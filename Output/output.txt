
The directory of the generated products: <  Tool Path + Products  >


clean_products_folder:
     [echo] This is an Ant Task created to clean the generated products folder.

 Two directories have been deleted:  < Tool Path + Products > and < pluginpath + emma + instr >
Walk through this directory and get all files: /home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02//src
Walk through this directory and get all files: /home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T//src



		Let's put the products in cache.


Build the SOURCE Feature Model Alloy file:
source Set OF Features: 

SOURCE Features: 

Feature: javaexorcismspl

Feature: treestructure

SOURCE FM Semantics: pred semanticasource[] { 
isTrue[javaexorcismspl] and ( isTrue[treestructure] <=> isTrue[javaexorcismspl] )
 }

 Alloy File has been created. Check it out in < Tool Path + Alloy + Alloy File >


Build the TARGET Feature Model Alloy file:
target Set OF Features: 

TARGET Features: 

Feature: javaexorcismspl

Feature: logging

Feature: treestructure

TARGET FM Semantics: pred semanticatarget[] { 
isTrue[javaexorcismspl] and ( isTrue[treestructure] <=> isTrue[javaexorcismspl] ) and ( isTrue[logging] => isTrue[javaexorcismspl] )
 }

 Alloy File has been created. Check it out in < Tool Path + Alloy + Alloy File >


Build the EVOLUTION Alloy file:

 Alloy File has been created. Check it out in < Tool Path + Alloy + Alloy File >


		The products are already in cache.
fieldA.getDeclaring: ContainerImpl
fieldA.getDeclaring: ContainerImpl

Have Source and Target the same assets ?:false 


 AM changed: false

Class Content:
package org.softlang.tests;

import org.junit.Test;
import org.softlang.company.Company;
import org.softlang.company.Department;
import org.softlang.company.Employee;
import org.softlang.company.factory.Factory;

/**
 * Test/demonstrate basic operations for totaling and cutting salaries.
 */
public class Basics {
	
	static Company createSampleCompany(Factory f) {
		
		// Create company
		Company sampleCompany = f.mkCompany();
		sampleCompany.setName("meganalysis");
		
		// Create all employees
		Employee craig = f.mkEmployee();
		craig.setName("Craig");
		craig.setAddress("Redmond");
		craig.setSalary(123456);
		craig.setManager(true);

		Employee erik = f.mkEmployee();
		erik.setName("Erik");
		erik.setAddress("Utrecht");
		erik.setSalary(12345);

		Employee ralf = f.mkEmployee();
		ralf.setName("Ralf");
		ralf.setAddress("Koblenz");
		ralf.setSalary(1234);		

		Employee ray = f.mkEmployee();
		ray.setName("Ray");
		ray.setAddress("Redmond");
		ray.setSalary(234567);
		ray.setManager(true);

		Employee klaus = f.mkEmployee();
		klaus.setName("Klaus");
		klaus.setAddress("Boston");
		klaus.setSalary(23456);
		klaus.setManager(true);
		
		Employee karl = f.mkEmployee();
		karl.setName("Karl");
		karl.setAddress("Riga");
		karl.setSalary(2345);
		karl.setManager(true);
		
		Employee joe = f.mkEmployee();
		joe.setName("Joe");
		joe.setAddress("Wifi City");
		joe.setSalary(2344);								

		// Create research department
		Department research = f.mkDepartment();
		research.setName("Research");
		research.add(craig);
		research.add(erik);
		research.add(ralf);
		sampleCompany.add(research);

		// Create development department
		Department development = f.mkDepartment();
		development.setName("Development");
		development.add(ray);
		sampleCompany.add(development);

		// Create sub-department dev1
		Department dev1 = f.mkDepartment();
		dev1.setName("Dev1");
		dev1.add(klaus);
		development.add(dev1);

		// Create sub-department dev11
		Department dev11 = f.mkDepartment();
		dev11.setName("Dev1.1");
		dev11.add(karl);
		dev11.add(joe);
		dev1.add(dev11);
		
		return sampleCompany;
	}
	
	@Test
	public void test() {
	}
}

Parametros para o SOOT -> Classe:Basics path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/tests

Provided Class: Basics Dependence: Test

Provided Class: Basics Dependence: org.softlang.company.factory.Factory

Provided Class: Basics Its Dependencies: org.softlang.company.factory.Factory - constant Required: Factory

Provided Class: Basics Dependence: org.softlang.company.Company

Provided Class: Basics Its Dependencies: org.softlang.company.Company - constant Required: Company

Provided Class: Basics Dependence: Factory

Provided Class: Basics Its Dependencies: Factory - constant Required: Factory

Provided Class: Basics Dependence: Department

Provided Class: Basics Its Dependencies: Department - constant Required: Department

Provided Class: Basics Dependence: Company

Provided Class: Basics Its Dependencies: Company - constant Required: Company

Provided Class: Basics Dependence: org.softlang.company.Employee

Provided Class: Basics Its Dependencies: org.softlang.company.Employee - constant Required: Employee

Provided Class: Basics Dependence: Employee

Provided Class: Basics Its Dependencies: Employee - constant Required: Employee

Provided Class: Basics Dependence: org.junit.Test

Provided Class: Basics Dependence: org.softlang.company.Department

Provided Class: Basics Its Dependencies: org.softlang.company.Department - constant Required: Department

Provided Class: Basics Dependence: package org.softlang.tests;


Class Name: Basics,  src\org\softlang\tests\Basics.java

 Provided Classes:  [ Basics ] 

 Required Classes:  [ Factory ]  [ Department ]  [ Company ]  [ Employee ] 


Class Name: Junit, lib\Junit.jar

 Provided Classes:  [ Junit ] 

 Required Classes: 


Class Name: Build, build.xml

 Provided Classes:  [ Build ] 

 Required Classes: 

Class Content:
package org.softlang.company;


/**
 * A company has a name and consists of (possibly nested) departments.
 * This is sufficiently covered by the Container interface.
 * Hence, the present interface is essentially a marker.
 */


public interface Company extends Container {	
	
}

Parametros para o SOOT -> Classe:Company path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company

Provided Class: Company Dependence: Container

Provided Class: Company Its Dependencies: Container - constant Required: Container

Provided Class: Company Dependence: package org.softlang.company;


Class Name: Company,  src\org\softlang\company\Company.java

 Provided Classes:  [ Company ] 

 Required Classes:  [ Container ] 

Class Content:
package org.softlang.company;

/**
 * The root class of the object model for companies.
 * All objects in a company have a name.
 * There is also general visitor support.
 */
public interface Component{
	
	String getName();
	void setName(String name);
	
}

Parametros para o SOOT -> Classe:Component path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company

Provided Class: Component Dependence: package org.softlang.company;


Class Name: Component, src\org\softlang\company\Component.java

 Provided Classes:  [ Component ] 

 Required Classes: 

Class Content:
package org.softlang.company;

/**
 * An interface for all composites in an company object structure.
 * Containers are supposed to aggregate sub-units.
 */
public interface Container extends Component {
	Iterable<? extends Subunit> subunits();
	boolean add(Subunit u);
	boolean remove(Subunit u);
}

Parametros para o SOOT -> Classe:Container path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company

Provided Class: Container Dependence: Subunit

Provided Class: Container Its Dependencies: Subunit - constant Required: Subunit

Provided Class: Container Dependence: Component

Provided Class: Container Its Dependencies: Component - constant Required: Component

Provided Class: Container Dependence: package org.softlang.company;


Class Name: Container, src\org\softlang\company\Container.java

 Provided Classes:  [ Container ] 

 Required Classes:  [ Subunit ]  [ Component ] 

Class Content:
package org.softlang.company;


/**
 * A department has a name, employees, and sub-departments.
 * One of the employees is supposed to be the manager.
 * We add a getter for the manager for convenience's sake.
 */
public interface Department extends Subunit, Container {
	Employee getManager();
}

Parametros para o SOOT -> Classe:Department path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company

Provided Class: Department Dependence: Subunit

Provided Class: Department Its Dependencies: Subunit - constant Required: Subunit

Provided Class: Department Dependence: Employee

Provided Class: Department Its Dependencies: Employee - constant Required: Employee

Provided Class: Department Dependence: Container

Provided Class: Department Its Dependencies: Container - constant Required: Container

Provided Class: Department Dependence: package org.softlang.company;


Class Name: Department, src\org\softlang\company\Department.java

 Provided Classes:  [ Department ] 

 Required Classes:  [ Subunit ]  [ Employee ]  [ Container ] 

Class Content:
package org.softlang.company;

/**
 * An employee has a name, an address, and a salary. 
 * Also, an employee may be flagged to be a manager.
 */
public interface Employee extends Subunit {
	String getAddress();
	void setAddress(String address);
	double getSalary();
	void setSalary(double salary);
	boolean getManager();
	void setManager(boolean manager);
	
	String getCep();
}

Parametros para o SOOT -> Classe:Employee path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company

Provided Class: Employee Dependence: Subunit

Provided Class: Employee Its Dependencies: Subunit - constant Required: Subunit

Provided Class: Employee Dependence: package org.softlang.company;


Class Name: Employee,  src\org\softlang\company\Employee.java

 Provided Classes:  [ Employee ] 

 Required Classes:  [ Subunit ] 

Class Content:
package org.softlang.company;

/**
 * A subunit is either an employee unit or a department unit.
 * The interface is only needed as a common base type.
 * That is, no members are added here to Component.
 */
public interface Subunit extends Component { }

Parametros para o SOOT -> Classe:Subunit path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company

Provided Class: Subunit Dependence: Component

Provided Class: Subunit Its Dependencies: Component - constant Required: Component

Provided Class: Subunit Dependence: package org.softlang.company;


Class Name: Subunit,  src\org\softlang\company\Subunit.java

 Provided Classes:  [ Subunit ] 

 Required Classes:  [ Component ] 

Class Content:
package org.softlang.company.factory;

import org.softlang.company.*;
import org.softlang.company.impl.bean.*;

/**
 * A factory that constructs (a kind of) "beans" as opposed to POJPs
 */
public class BeanFactory implements Factory {
	public Company mkCompany() { return new CompanyImpl(); }
	public Department mkDepartment() { return new DepartmentImpl(); }
	public Employee mkEmployee() { return new EmployeeImpl(); }
}

Parametros para o SOOT -> Classe:BeanFactory path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/factory
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/factory/BeanFactory.java:4,8:
  Semantic Error: org.softlang.company.impl.bean not found

Provided Class: BeanFactory Dependence: DepartmentImpl

Provided Class: BeanFactory Its Dependencies: DepartmentImpl - constant Required: DepartmentImplPojo

Provided Class: BeanFactory Dependence: EmployeeImpl

Provided Class: BeanFactory Its Dependencies: EmployeeImpl - constant Required: EmployeeImplPojo

Provided Class: BeanFactory Dependence: Factory

Provided Class: BeanFactory Its Dependencies: Factory - constant Required: Factory

Provided Class: BeanFactory Dependence: Department

Provided Class: BeanFactory Its Dependencies: Department - constant Required: Department

Provided Class: BeanFactory Dependence: Company

Provided Class: BeanFactory Its Dependencies: Company - constant Required: Company

Provided Class: BeanFactory Dependence: Employee

Provided Class: BeanFactory Its Dependencies: Employee - constant Required: Employee

Provided Class: BeanFactory Dependence: CompanyImpl

Provided Class: BeanFactory Its Dependencies: CompanyImpl - constant Required: CompanyImplBean

Provided Class: BeanFactory Dependence: package org.softlang.company.factory;


Class Name: BeanFactory,  src\org\softlang\company\factory\BeanFactory.java

 Provided Classes:  [ BeanFactory ] 

 Required Classes:  [ EmployeeImplPojo ]  [ DepartmentImplPojo ]  [ CompanyImplBean ]  [ Factory ]  [ Company ]  [ Department ]  [ Employee ] 

Class Content:
package org.softlang.company.factory;

import org.softlang.company.Company;
import org.softlang.company.Department;
import org.softlang.company.Employee;

/**
 * The factory interface for constructing all possible company objects
 */
public interface Factory {
	Company mkCompany();
	Department mkDepartment();
	Employee mkEmployee();
}

Parametros para o SOOT -> Classe:Factory path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/factory

Provided Class: Factory Dependence: org.softlang.company.Company

Provided Class: Factory Its Dependencies: org.softlang.company.Company - constant Required: Company

Provided Class: Factory Dependence: Department

Provided Class: Factory Its Dependencies: Department - constant Required: Department

Provided Class: Factory Dependence: Company

Provided Class: Factory Its Dependencies: Company - constant Required: Company

Provided Class: Factory Dependence: org.softlang.company.Employee

Provided Class: Factory Its Dependencies: org.softlang.company.Employee - constant Required: Employee

Provided Class: Factory Dependence: Employee

Provided Class: Factory Its Dependencies: Employee - constant Required: Employee

Provided Class: Factory Dependence: org.softlang.company.Department

Provided Class: Factory Its Dependencies: org.softlang.company.Department - constant Required: Department

Provided Class: Factory Dependence: package org.softlang.company.factory;


Class Name: Factory,  src\org\softlang\company\factory\Factory.java

 Provided Classes:  [ Factory ] 

 Required Classes:  [ Department ]  [ Company ]  [ Employee ] 

Class Content:
package org.softlang.company.impl.bean;

import org.softlang.company.Company;



public class CompanyImpl extends ContainerImpl implements Company {

}

Parametros para o SOOT -> Classe:CompanyImpl path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/bean

Provided Class: CompanyImplBean Dependence: org.softlang.company.Company

Provided Class: CompanyImplBean Its Dependencies: org.softlang.company.Company - constant Required: Company

Provided Class: CompanyImplBean Dependence: ContainerImpl

Provided Class: CompanyImplBean Its Dependencies: ContainerImpl - constant Required: ContainerImplPojo

Provided Class: CompanyImplBean Dependence: Company

Provided Class: CompanyImplBean Its Dependencies: Company - constant Required: Company

Provided Class: CompanyImplBean Dependence: package org.softlang.company.impl.bean;


Class Name: CompanyImplBean,  src\org\softlang\company\impl\bean\CompanyImpl.java

 Provided Classes:  [ CompanyImplBean ] 

 Required Classes:  [ ContainerImplPojo ]  [ Company ] 

Class Content:
package org.softlang.company.impl.bean;

import org.softlang.company.*;
import java.util.Observable;

/**
 * Observability and a parent axis are added on top of the Component interface.
 */
public abstract class ComponentImpl extends Observable implements Component {

	private ComponentImpl parent;
	private String name;
	public String getName() {
		return name; 
	}
	public void setName(String name) { 
		this.name = name; 
		/*#if($logging)*/
		setChanged();
		notifyObservers("name");		
		/*#end*/
	}
	public ComponentImpl getParent() { return parent; }
	/* package */ void setParent(ComponentImpl parent) { this.parent = parent; }
	
}

Parametros para o SOOT -> Classe:ComponentImpl path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/bean

Provided Class: ComponentImplBean Dependence: Component

Provided Class: ComponentImplBean Its Dependencies: Component - constant Required: Component

Provided Class: ComponentImplBean Dependence: package org.softlang.company.impl.bean;


Class Name: ComponentImplBean,  src\org\softlang\company\impl\bean\ComponentImpl.java

 Provided Classes:  [ ComponentImplBean ] 

 Required Classes:  [ Component ] 

Class Content:
package org.softlang.company.impl.bean;

import java.util.Observer;
import org.softlang.company.Container;
import org.softlang.company.Subunit;
import org.softlang.util.ObservableSimpleList;
import org.softlang.util.SimpleLinkedList;


public abstract class ContainerImpl extends ComponentImpl implements Container {

	private ObservableSimpleList<Subunit> subunits =  new ObservableSimpleList<Subunit>(new SimpleLinkedList<Subunit>());
	
	public Iterable<? extends Subunit> subunits() {
		return subunits;
	}
	
	public boolean add(Subunit u) {
		ComponentImpl i = (ComponentImpl)u;
		if (i.getParent()!=null)
			throw new IllegalArgumentException("Attemped re-parenting.");
		i.setParent(this);
		return subunits.add(u);
	}
	
	public boolean remove(Subunit u) {
		ComponentImpl i = (ComponentImpl)u;
		i.setParent(null);
		return subunits.remove(u);
	}
	
	/*#if($logging)*/
	public void addObserver(Observer o) {
		super.addObserver(o);
		subunits.addObserver(o);
	}
	/*#end*/
	
	/*#if($logging)*/
	public void deleteObserver(Observer o) {
		super.deleteObserver(o);
		subunits.deleteObserver(o);		
	}
	/*#end*/
	
	/*#if($logging)*/
	public void deleteObservers() {
		super.deleteObservers();
		subunits.deleteObservers();
	}	
	/*#end*/
}

Parametros para o SOOT -> Classe:ContainerImpl path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/bean
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/bean/ContainerImpl.java:12:
  Semantic Error: can not instantiate Unknown no matching constructor found in Unknown

Provided Class: ContainerImplBean Dependence: ComponentImpl

Provided Class: ContainerImplBean Its Dependencies: ComponentImpl - constant Required: ComponentImplPojo

Provided Class: ContainerImplBean Dependence: org.softlang.company.Subunit

Provided Class: ContainerImplBean Its Dependencies: org.softlang.company.Subunit - constant Required: Subunit

Provided Class: ContainerImplBean Dependence: ObservableSimpleList

Provided Class: ContainerImplBean Its Dependencies: ObservableSimpleList - constant Required: ObservableSimpleList

Provided Class: ContainerImplBean Dependence: org.softlang.util.SimpleLinkedList

Provided Class: ContainerImplBean Its Dependencies: org.softlang.util.SimpleLinkedList - constant Required: SimpleLinkedList

Provided Class: ContainerImplBean Dependence: Subunit

Provided Class: ContainerImplBean Its Dependencies: Subunit - constant Required: Subunit

Provided Class: ContainerImplBean Dependence: org.softlang.util.ObservableSimpleList

Provided Class: ContainerImplBean Its Dependencies: org.softlang.util.ObservableSimpleList - constant Required: ObservableSimpleList

Provided Class: ContainerImplBean Dependence: SimpleLinkedList

Provided Class: ContainerImplBean Its Dependencies: SimpleLinkedList - constant Required: SimpleLinkedList

Provided Class: ContainerImplBean Dependence: Container

Provided Class: ContainerImplBean Its Dependencies: Container - constant Required: Container

Provided Class: ContainerImplBean Dependence: org.softlang.company.Container

Provided Class: ContainerImplBean Its Dependencies: org.softlang.company.Container - constant Required: Container

Provided Class: ContainerImplBean Dependence: package org.softlang.company.impl.bean;


Class Name: ContainerImplBean,  src\org\softlang\company\impl\bean\ContainerImpl.java

 Provided Classes:  [ ContainerImplBean ] 

 Required Classes:  [ ComponentImplPojo ]  [ ObservableSimpleList ]  [ Subunit ]  [ SimpleLinkedList ]  [ Container ] 

Class Content:
package org.softlang.company.impl.bean;

import org.softlang.company.Department;
import org.softlang.company.Employee;
import org.softlang.company.Subunit;

public class DepartmentImpl extends ContainerImpl implements Department {
	
		public Employee getManager() {
		for (Subunit u : subunits())
			if (u instanceof Employee) {
				Employee e = (Employee)u;
				if (e.getManager())
					return e;
			}
		return null;
	}	
}

Parametros para o SOOT -> Classe:DepartmentImpl path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/bean
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/bean/DepartmentImpl.java:10:
  Semantic Error: no method named subunits() in org.softlang.company.impl.bean.DepartmentImpl matches.

Provided Class: DepartmentImplBean Dependence: org.softlang.company.Subunit

Provided Class: DepartmentImplBean Its Dependencies: org.softlang.company.Subunit - constant Required: Subunit

Provided Class: DepartmentImplBean Dependence: ContainerImpl

Provided Class: DepartmentImplBean Its Dependencies: ContainerImpl - constant Required: ContainerImplPojo

Provided Class: DepartmentImplBean Dependence: Subunit

Provided Class: DepartmentImplBean Its Dependencies: Subunit - constant Required: Subunit

Provided Class: DepartmentImplBean Dependence: Department

Provided Class: DepartmentImplBean Its Dependencies: Department - constant Required: Department

Provided Class: DepartmentImplBean Dependence: org.softlang.company.Employee

Provided Class: DepartmentImplBean Its Dependencies: org.softlang.company.Employee - constant Required: Employee

Provided Class: DepartmentImplBean Dependence: Employee

Provided Class: DepartmentImplBean Its Dependencies: Employee - constant Required: Employee

Provided Class: DepartmentImplBean Dependence: org.softlang.company.Department

Provided Class: DepartmentImplBean Its Dependencies: org.softlang.company.Department - constant Required: Department

Provided Class: DepartmentImplBean Dependence: package org.softlang.company.impl.bean;


Class Name: DepartmentImplBean,  src\org\softlang\company\impl\bean\DepartmentImpl.java

 Provided Classes:  [ DepartmentImplBean ] 

 Required Classes:  [ ContainerImplPojo ]  [ Subunit ]  [ Department ]  [ Employee ] 

Class Content:
package org.softlang.company.impl.bean;

import org.softlang.company.*;

public class EmployeeImpl extends ComponentImpl implements Employee {
	
	private String name;
	private String address;
	private double salary;
	private boolean manager;
	
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
		/*#if($logging)*/
		setChanged();
		notifyObservers("name");
		/*#end*/
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
		/*#if($logging)*/
		setChanged();
		notifyObservers("address");
	    /*#end*/
	}

	public double getSalary() {
		return 10;
	}

	public void setSalary(double salary) {
		if(salary!=this.getSalary()){
			this.salary = salary;
			/*#if($logging)*/
	 		setChanged();
	 		notifyObservers("salary");
		    /*#end*/
		}	
	}	
	
	public boolean getManager() {
		return manager;
	}

	public void setManager(boolean manager) {
		this.manager = manager;
		/*#if($logging)*/
		setChanged();
		notifyObservers("manager");
		/*#end*/
	}

	public String getCep() {
		return "cep";
	}
}

Parametros para o SOOT -> Classe:EmployeeImpl path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/bean
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/bean/EmployeeImpl.java:19:
  Semantic Error: no method named setChanged() in org.softlang.company.impl.bean.EmployeeImpl matches.
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/bean/EmployeeImpl.java:20:
  Semantic Error: no method named notifyObservers(java.lang.String) in org.softlang.company.impl.bean.EmployeeImpl matches.
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/bean/EmployeeImpl.java:31:
  Semantic Error: no method named setChanged() in org.softlang.company.impl.bean.EmployeeImpl matches.
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/bean/EmployeeImpl.java:32:
  Semantic Error: no method named notifyObservers(java.lang.String) in org.softlang.company.impl.bean.EmployeeImpl matches.
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/bean/EmployeeImpl.java:44:
  Semantic Error: no method named setChanged() in org.softlang.company.impl.bean.EmployeeImpl matches.
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/bean/EmployeeImpl.java:45:
  Semantic Error: no method named notifyObservers(java.lang.String) in org.softlang.company.impl.bean.EmployeeImpl matches.
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/bean/EmployeeImpl.java:57:
  Semantic Error: no method named setChanged() in org.softlang.company.impl.bean.EmployeeImpl matches.
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/bean/EmployeeImpl.java:58:
  Semantic Error: no method named notifyObservers(java.lang.String) in org.softlang.company.impl.bean.EmployeeImpl matches.

Provided Class: EmployeeImplBean Dependence: ComponentImpl

Provided Class: EmployeeImplBean Its Dependencies: ComponentImpl - constant Required: ComponentImplPojo

Provided Class: EmployeeImplBean Dependence: Employee

Provided Class: EmployeeImplBean Its Dependencies: Employee - constant Required: Employee

Provided Class: EmployeeImplBean Dependence: package org.softlang.company.impl.bean;


Class Name: EmployeeImplBean,  src\org\softlang\company\impl\bean\EmployeeImpl.java

 Provided Classes:  [ EmployeeImplBean ] 

 Required Classes:  [ ComponentImplPojo ]  [ Employee ] 

Class Content:
package org.softlang.visitor;

import org.softlang.company.*;

public interface ReturningVisitor<R> {

	R visit(Company o);
	R visit(Department o);
	R visit(Employee o);

}

Parametros para o SOOT -> Classe:ReturningVisitor path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/visitor
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/visitor/ReturningVisitor.java:3,8:
  Semantic Error: org.softlang.company not found
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/visitor/ReturningVisitor.java:7:
  Semantic Error: method with signature visit(Unknown) is multiply declared in type org.softlang.visitor.ReturningVisitor
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/visitor/ReturningVisitor.java:8:
  Semantic Error: method with signature visit(Unknown) is multiply declared in type org.softlang.visitor.ReturningVisitor

Provided Class: ReturningVisitor Dependence: Department

Provided Class: ReturningVisitor Its Dependencies: Department - constant Required: Department

Provided Class: ReturningVisitor Dependence: Company

Provided Class: ReturningVisitor Its Dependencies: Company - constant Required: Company

Provided Class: ReturningVisitor Dependence: Employee

Provided Class: ReturningVisitor Its Dependencies: Employee - constant Required: Employee

Provided Class: ReturningVisitor Dependence: package org.softlang.visitor;


Class Name: ReturningVisitor,  src\org\softlang\visitor\ReturningVisitor.java

 Provided Classes:  [ ReturningVisitor ] 

 Required Classes:  [ Company ]  [ Department ]  [ Employee ] 

Class Content:
package org.softlang.visitor;

import org.softlang.company.*;

public interface VoidVisitor {

	void visit(Company o);
	void visit(Department o);
	void visit(Employee o);
		
}

Parametros para o SOOT -> Classe:VoidVisitor path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/visitor
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/visitor/VoidVisitor.java:3,8:
  Semantic Error: org.softlang.company not found
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/visitor/VoidVisitor.java:7:
  Semantic Error: method with signature visit(Unknown) is multiply declared in type org.softlang.visitor.VoidVisitor
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/visitor/VoidVisitor.java:8:
  Semantic Error: method with signature visit(Unknown) is multiply declared in type org.softlang.visitor.VoidVisitor

Provided Class: VoidVisitor Dependence: Department

Provided Class: VoidVisitor Its Dependencies: Department - constant Required: Department

Provided Class: VoidVisitor Dependence: Company

Provided Class: VoidVisitor Its Dependencies: Company - constant Required: Company

Provided Class: VoidVisitor Dependence: Employee

Provided Class: VoidVisitor Its Dependencies: Employee - constant Required: Employee

Provided Class: VoidVisitor Dependence: package org.softlang.visitor;


Class Name: VoidVisitor,  src\org\softlang\visitor\VoidVisitor.java

 Provided Classes:  [ VoidVisitor ] 

 Required Classes:  [ Company ]  [ Department ]  [ Employee ] 

Class Content:
package org.softlang.util;

import java.util.*;

/**
 * Compose the (Simple)List interface with the Observable base class.
 * In fact, a given list is decorated with observer capability.
 * The methods must be adjusted to notify upon changes.
 * Addition and removal of observers is pushed into elements--if they are observable.
 */
public class ObservableSimpleList<X> extends Observable implements SimpleList<X> {

	private SimpleList<X> inner;
	
	public ObservableSimpleList(SimpleList<X> inner) {
		this.inner = inner;
	}
		
	//
	//
	// Methods of the Observable interface are overridden. 
	//
	//
	
	public void addObserver(Observer o) {
		super.addObserver(o);
		for (X e : this)
			if (e instanceof Observable)
				((Observable)e).addObserver(o);
	}	
	
	public void deleteObserver(Observer o) {
		super.deleteObserver(o);
		for (X e : this)
			if (e instanceof Observable)
				((Observable)e).deleteObserver(o);
	}	
	
	public void deleteObservers() {
		super.deleteObservers();
		for (X e : this)
			if (e instanceof Observable)
				((Observable)e).deleteObservers();
	}	
		
	//
	//
	// Beyond this point, the SimpleList interface is implemented
	//
	//
	
	public Iterator<X> iterator() {
		return inner.iterator();
	}
	
	public boolean add(X e) {
		boolean result = inner.add(e);
		if (result) {
			setChanged();
			notifyObservers(new AddToList(e));	
		}
		return result;
	}

	public boolean remove(X e) {
		boolean result = inner.remove(e);
		if (result) {
			setChanged();
			notifyObservers(new RemoveFromList(e));
		}
		return result;
	}
}

Parametros para o SOOT -> Classe:ObservableSimpleList path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/util
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/util/ObservableSimpleList.java:60:
  Semantic Error: can not instantiate Unknown no matching constructor found in Unknown
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/util/ObservableSimpleList.java:69:
  Semantic Error: can not instantiate Unknown no matching constructor found in Unknown

Provided Class: ObservableSimpleList Dependence: AddToList

Provided Class: ObservableSimpleList Its Dependencies: AddToList - constant Required: AddToList

Provided Class: ObservableSimpleList Dependence: RemoveFromList

Provided Class: ObservableSimpleList Its Dependencies: RemoveFromList - constant Required: RemoveFromList

Provided Class: ObservableSimpleList Dependence: SimpleList

Provided Class: ObservableSimpleList Its Dependencies: SimpleList - constant Required: SimpleList

Provided Class: ObservableSimpleList Dependence: package org.softlang.util;


Class Name: ObservableSimpleList,  src\org\softlang\util\ObservableSimpleList.java

 Provided Classes:  [ ObservableSimpleList ] 

 Required Classes:  [ AddToList ]  [ SimpleList ]  [ RemoveFromList ] 

Class Content:
package org.softlang.util;

/**
 * This is a down-graded version of java.util.List.
 */
public interface SimpleList<X> extends Iterable<X> {
	boolean add(X x);
	boolean remove(X x);
}

Parametros para o SOOT -> Classe:SimpleList path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/util

Provided Class: SimpleList Dependence: package org.softlang.util;


Class Name: SimpleList,  src\org\softlang\util\SimpleList.java

 Provided Classes:  [ SimpleList ] 

 Required Classes: 

Class Content:
package org.softlang.util;

import java.util.Iterator;
import java.util.LinkedList;

/**
 * This is a down-graded version of java.util.LinkedList.
 */
public class SimpleLinkedList<X> implements SimpleList<X> {

	protected LinkedList<X> inner = 
		new LinkedList<X>();
		
	public Iterator<X> iterator() {
		return inner.iterator();
	}

	public boolean add(X x) {
		return inner.add(x);
	}

	public boolean remove(X x) {
		return inner.remove(x);
	}
}

Parametros para o SOOT -> Classe:SimpleLinkedList path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/util

Provided Class: SimpleLinkedList Dependence: SimpleList

Provided Class: SimpleLinkedList Its Dependencies: SimpleList - constant Required: SimpleList

Provided Class: SimpleLinkedList Dependence: package org.softlang.util;


Class Name: SimpleLinkedList,  src\org\softlang\util\SimpleLinkedList.java

 Provided Classes:  [ SimpleLinkedList ] 

 Required Classes:  [ SimpleList ] 

Class Content:
package org.softlang.util;

public class AddToList extends ChangeList {
	public AddToList(Object o) { this.element = o; }
}

Parametros para o SOOT -> Classe:AddToList path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/util
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/util/AddToList.java:4,36:
  Semantic Error: no field named element

Provided Class: AddToList Dependence: ChangeList

Provided Class: AddToList Its Dependencies: ChangeList - constant Required: ChangeList

Provided Class: AddToList Dependence: package org.softlang.util;


Class Name: AddToList,  src\org\softlang\util\AddToList.java

 Provided Classes:  [ AddToList ] 

 Required Classes:  [ ChangeList ] 

Class Content:
package org.softlang.util;

/**
 * Represent changes to observable lists
 */
public abstract class ChangeList {
	public Object element;
}

Parametros para o SOOT -> Classe:ChangeList path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/util

Provided Class: ChangeList Dependence: package org.softlang.util;


Class Name: ChangeList,  src\org\softlang\util\ChangeList.java

 Provided Classes:  [ ChangeList ] 

 Required Classes: 

Class Content:
package org.softlang.util;

public class RemoveFromList extends ChangeList {
	public RemoveFromList(Object o) { this.element = o; }
}

Parametros para o SOOT -> Classe:RemoveFromList path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/util
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/util/RemoveFromList.java:4,41:
  Semantic Error: no field named element

Provided Class: RemoveFromList Dependence: ChangeList

Provided Class: RemoveFromList Its Dependencies: ChangeList - constant Required: ChangeList

Provided Class: RemoveFromList Dependence: package org.softlang.util;


Class Name: RemoveFromList,  src\org\softlang\util\RemoveFromList.java

 Provided Classes:  [ RemoveFromList ] 

 Required Classes:  [ ChangeList ] 

Class Content:
package org.softlang.company.factory;

import org.softlang.company.*;
import org.softlang.company.impl.pojo.*;

/**
 * A factory that constructs POJPs
 */
public class PojoFactory implements Factory {
	public Company mkCompany() { return new CompanyImpl(); }
	public Department mkDepartment() { return new DepartmentImpl(); }
	public Employee mkEmployee() { return new EmployeeImpl(); }
}

Parametros para o SOOT -> Classe:PojoFactory path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/factory
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/factory/PojoFactory.java:4,8:
  Semantic Error: org.softlang.company.impl.pojo not found

Provided Class: PojoFactory Dependence: DepartmentImpl

Provided Class: PojoFactory Its Dependencies: DepartmentImpl - constant Required: DepartmentImplPojo

Provided Class: PojoFactory Dependence: EmployeeImpl

Provided Class: PojoFactory Its Dependencies: EmployeeImpl - constant Required: EmployeeImplPojo

Provided Class: PojoFactory Dependence: Factory

Provided Class: PojoFactory Its Dependencies: Factory - constant Required: Factory

Provided Class: PojoFactory Dependence: Department

Provided Class: PojoFactory Its Dependencies: Department - constant Required: Department

Provided Class: PojoFactory Dependence: Company

Provided Class: PojoFactory Its Dependencies: Company - constant Required: Company

Provided Class: PojoFactory Dependence: Employee

Provided Class: PojoFactory Its Dependencies: Employee - constant Required: Employee

Provided Class: PojoFactory Dependence: CompanyImpl

Provided Class: PojoFactory Its Dependencies: CompanyImpl - constant Required: CompanyImplBean

Provided Class: PojoFactory Dependence: package org.softlang.company.factory;


Class Name: PojoFactory, src\org\softlang\company\factory\PojoFactory.java

 Provided Classes:  [ PojoFactory ] 

 Required Classes:  [ EmployeeImplPojo ]  [ DepartmentImplPojo ]  [ CompanyImplBean ]  [ Factory ]  [ Company ]  [ Department ]  [ Employee ] 

Class Content:
package org.softlang.company.impl.pojo;

import org.softlang.company.Company;
import org.softlang.company.Department;
import org.softlang.company.Subunit;

public class CompanyImpl extends ContainerImpl implements Company{ 

	/**
	 * Enforce the constraint a company can only aggregate departments
	 */
	public boolean add(Subunit u) {
		if (!(u instanceof Department)){
			throw new IllegalArgumentException();
		}
		return super.add(u);
	}
}

Parametros para o SOOT -> Classe:CompanyImpl path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/pojo

Provided Class: CompanyImplPojo Dependence: org.softlang.company.Subunit

Provided Class: CompanyImplPojo Its Dependencies: org.softlang.company.Subunit - constant Required: Subunit

Provided Class: CompanyImplPojo Dependence: org.softlang.company.Company

Provided Class: CompanyImplPojo Its Dependencies: org.softlang.company.Company - constant Required: Company

Provided Class: CompanyImplPojo Dependence: ContainerImpl

Provided Class: CompanyImplPojo Its Dependencies: ContainerImpl - constant Required: ContainerImplPojo

Provided Class: CompanyImplPojo Dependence: Subunit

Provided Class: CompanyImplPojo Its Dependencies: Subunit - constant Required: Subunit

Provided Class: CompanyImplPojo Dependence: Department

Provided Class: CompanyImplPojo Its Dependencies: Department - constant Required: Department

Provided Class: CompanyImplPojo Dependence: Company

Provided Class: CompanyImplPojo Its Dependencies: Company - constant Required: Company

Provided Class: CompanyImplPojo Dependence: org.softlang.company.Department

Provided Class: CompanyImplPojo Its Dependencies: org.softlang.company.Department - constant Required: Department

Provided Class: CompanyImplPojo Dependence: package org.softlang.company.impl.pojo;


Class Name: CompanyImplPojo, src\org\softlang\company\impl\pojo\CompanyImpl.java

 Provided Classes:  [ CompanyImplPojo ] 

 Required Classes:  [ ContainerImplPojo ]  [ Subunit ]  [ Department ]  [ Company ] 

Class Content:
package org.softlang.company.impl.pojo;

import org.softlang.company.*;

public abstract class ComponentImpl implements Component {
	private String name;
	public String getName() { return name; }
	public void setName(String name) { this.name = name; }
}

Parametros para o SOOT -> Classe:ComponentImpl path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/pojo

Provided Class: ComponentImplPojo Dependence: Component

Provided Class: ComponentImplPojo Its Dependencies: Component - constant Required: Component

Provided Class: ComponentImplPojo Dependence: package org.softlang.company.impl.pojo;


Class Name: ComponentImplPojo, src\org\softlang\company\impl\pojo\ComponentImpl.java

 Provided Classes:  [ ComponentImplPojo ] 

 Required Classes:  [ Component ] 

Class Content:
package org.softlang.company.impl.pojo;

import org.softlang.company.*;
import java.util.LinkedList;
import java.util.List;

public abstract class ContainerImpl extends ComponentImpl implements Container {
	
	private List<Subunit> subunits = new LinkedList<Subunit>();
	public Iterable<? extends Subunit> subunits() {
		return subunits;
	}
	public boolean add(Subunit u) {
		return subunits.add(u);
	}
	public boolean remove(Subunit u) {
		return subunits.remove(u);
	}
}

Parametros para o SOOT -> Classe:ContainerImpl path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/pojo

Provided Class: ContainerImplPojo Dependence: ComponentImpl

Provided Class: ContainerImplPojo Its Dependencies: ComponentImpl - constant Required: ComponentImplPojo

Provided Class: ContainerImplPojo Dependence: Subunit

Provided Class: ContainerImplPojo Its Dependencies: Subunit - constant Required: Subunit

Provided Class: ContainerImplPojo Dependence: Container

Provided Class: ContainerImplPojo Its Dependencies: Container - constant Required: Container

Provided Class: ContainerImplPojo Dependence: package org.softlang.company.impl.pojo;


Class Name: ContainerImplPojo, src\org\softlang\company\impl\pojo\ContainerImpl.java

 Provided Classes:  [ ContainerImplPojo ] 

 Required Classes:  [ ComponentImplPojo ]  [ Subunit ]  [ Container ] 

Class Content:
package org.softlang.company.impl.pojo;

import org.softlang.company.Department;
import org.softlang.company.Employee;
import org.softlang.company.Subunit;

public class DepartmentImpl extends ContainerImpl implements Department {
	
	public Employee getManager() {
		for (Subunit u : subunits())
			if (u instanceof Employee) {
				Employee e = (Employee)u;
				if (e.getManager()){
					return e;
				}
			}
		return null;
	}	
}

Parametros para o SOOT -> Classe:DepartmentImpl path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/pojo
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/pojo/DepartmentImpl.java:10:
  Semantic Error: no method named subunits() in org.softlang.company.impl.pojo.DepartmentImpl matches.

Provided Class: DepartmentImplPojo Dependence: org.softlang.company.Subunit

Provided Class: DepartmentImplPojo Its Dependencies: org.softlang.company.Subunit - constant Required: Subunit

Provided Class: DepartmentImplPojo Dependence: ContainerImpl

Provided Class: DepartmentImplPojo Its Dependencies: ContainerImpl - constant Required: ContainerImplPojo

Provided Class: DepartmentImplPojo Dependence: Subunit

Provided Class: DepartmentImplPojo Its Dependencies: Subunit - constant Required: Subunit

Provided Class: DepartmentImplPojo Dependence: Department

Provided Class: DepartmentImplPojo Its Dependencies: Department - constant Required: Department

Provided Class: DepartmentImplPojo Dependence: org.softlang.company.Employee

Provided Class: DepartmentImplPojo Its Dependencies: org.softlang.company.Employee - constant Required: Employee

Provided Class: DepartmentImplPojo Dependence: Employee

Provided Class: DepartmentImplPojo Its Dependencies: Employee - constant Required: Employee

Provided Class: DepartmentImplPojo Dependence: org.softlang.company.Department

Provided Class: DepartmentImplPojo Its Dependencies: org.softlang.company.Department - constant Required: Department

Provided Class: DepartmentImplPojo Dependence: package org.softlang.company.impl.pojo;


Class Name: DepartmentImplPojo, src\org\softlang\company\impl\pojo\DepartmentImpl.java

 Provided Classes:  [ DepartmentImplPojo ] 

 Required Classes:  [ ContainerImplPojo ]  [ Subunit ]  [ Department ]  [ Employee ] 

Class Content:
package org.softlang.company.impl.pojo;

import org.softlang.company.*;

public class EmployeeImpl extends ComponentImpl implements Employee {
	
	private String address;
	private double salary;
	private boolean manager = false;

	public String getAddress() {
		return address;
	}
	public void setAddress(String address) {
		this.address = address;
	}
	public double getSalary() {
		return salary;
	}
	public void setSalary(double salary) {
		this.salary = salary;
	}
	public boolean getManager() {
		return manager;
	}
	public void setManager(boolean manager) {
		this.manager = manager;
	}
	
	public String getCep() {
		return "cep";
	}
	
}

Parametros para o SOOT -> Classe:EmployeeImpl path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/pojo

Provided Class: EmployeeImplPojo Dependence: ComponentImpl

Provided Class: EmployeeImplPojo Its Dependencies: ComponentImpl - constant Required: ComponentImplPojo

Provided Class: EmployeeImplPojo Dependence: Employee

Provided Class: EmployeeImplPojo Its Dependencies: Employee - constant Required: Employee

Provided Class: EmployeeImplPojo Dependence: package org.softlang.company.impl.pojo;


Class Name: EmployeeImplPojo, src\org\softlang\company\impl\pojo\EmployeeImpl.java

 Provided Classes:  [ EmployeeImplPojo ] 

 Required Classes:  [ ComponentImplPojo ]  [ Employee ] 

Class Content:
package org.softlang.main;

import org.softlang.company.Company;
import org.softlang.company.Department;
import org.softlang.company.Employee;
import org.softlang.company.factory.BeanFactory;
import org.softlang.company.factory.Factory;
import org.softlang.company.impl.bean.EmployeeImpl;

public class Main {
	
	    private Company sampleCompany;
	    private EmployeeImpl emp;
	    
	    public Main(){
	    	super();
	    	this.createSampleCompany(new BeanFactory());
	    }
	    
		public void createSampleCompany(Factory f) {
			// Create company
			this.sampleCompany = f.mkCompany();
			sampleCompany.setName("meganalysis");
			
			// Create all employees
			Employee craig = f.mkEmployee();
			craig.setName("Craig");
			craig.setAddress("Redmond");
			craig.setSalary(123456);
			craig.setManager(true);
	
			Employee erik = f.mkEmployee();
			erik.setName("Erik");
			erik.setAddress("Utrecht");
			erik.setSalary(12345);
	
			Employee ralf = f.mkEmployee();
			ralf.setName("Ralf");
			ralf.setAddress("Koblenz");
			ralf.setSalary(1234);		
	
			Employee ray = f.mkEmployee();
			ray.setName("Ray");
			ray.setAddress("Redmond");
			ray.setSalary(234567);
			ray.setManager(true);
	
			Employee klaus = f.mkEmployee();
			klaus.setName("Klaus");
			klaus.setAddress("Boston");
			klaus.setSalary(23456);
			klaus.setManager(true);
			
			Employee karl = f.mkEmployee();
			karl.setName("Karl");
			karl.setAddress("Riga");
			karl.setSalary(2345);
			karl.setManager(true);
			
			Employee joe = f.mkEmployee();
			joe.setName("Joe");
			joe.setAddress("Wifi City");
			joe.setSalary(2344);								
	
			// Create research department
			Department research = f.mkDepartment();
			research.setName("Research");
			research.add(craig);
			research.add(erik);
			research.add(ralf);
			sampleCompany.add(research);
	
			// Create development department
			Department development = f.mkDepartment();
			development.setName("Development");
			development.add(ray);
			sampleCompany.add(development);
	
			// Create sub-department dev1
			Department dev1 = f.mkDepartment();
			dev1.setName("Dev1");
			dev1.add(klaus);
			development.add(dev1);
	
			// Create sub-department dev11
			Department dev11 = f.mkDepartment();
			dev11.setName("Dev1.1");
			dev11.add(karl);
			dev11.add(joe);
			dev1.add(dev11);
	}
		
	public void setSalary(org.softlang.company.impl.bean.EmployeeImpl e, double salary){
		e.setSalary(salary);
	}
	
	public double getSalary(org.softlang.company.impl.bean.EmployeeImpl e){
		return e.getSalary();
	}
	
	public static void main(String[] args) {
		Main m = new Main();
		Company c = m.getSampleCompany();
		
	}

	
	
	
	
	/*.................... Getters and Setters */
	public Company getSampleCompany() {
		return sampleCompany;
	}
	public void setSampleCompany(Company sampleCompany) {
		this.sampleCompany = sampleCompany;
	}

	public EmployeeImpl getEmp() {
		return emp;
	}

	public void setEmp(EmployeeImpl emp) {
		this.emp = emp;
	}

}

Parametros para o SOOT -> Classe:Main path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/main

Provided Class: Main Dependence: org.softlang.company.factory.Factory

Provided Class: Main Its Dependencies: org.softlang.company.factory.Factory - constant Required: Factory

Provided Class: Main Dependence: org.softlang.company.Company

Provided Class: Main Its Dependencies: org.softlang.company.Company - constant Required: Company

Provided Class: Main Dependence: org.softlang.company.factory.BeanFactory

Provided Class: Main Its Dependencies: org.softlang.company.factory.BeanFactory - constant Required: BeanFactory

Provided Class: Main Dependence: Factory

Provided Class: Main Its Dependencies: Factory - constant Required: Factory

Provided Class: Main Dependence: EmployeeImpl

Provided Class: Main Its Dependencies: EmployeeImpl - constant Required: EmployeeImplPojo

Provided Class: Main Dependence: org.softlang.company.impl.bean.EmployeeImpl

Provided Class: Main Its Dependencies: org.softlang.company.impl.bean.EmployeeImpl - constant Required: EmployeeImplBean

Provided Class: Main Dependence: Department

Provided Class: Main Its Dependencies: Department - constant Required: Department

Provided Class: Main Dependence: Company

Provided Class: Main Its Dependencies: Company - constant Required: Company

Provided Class: Main Dependence: org.softlang.company.Employee

Provided Class: Main Its Dependencies: org.softlang.company.Employee - constant Required: Employee

Provided Class: Main Dependence: Employee

Provided Class: Main Its Dependencies: Employee - constant Required: Employee

Provided Class: Main Dependence: BeanFactory

Provided Class: Main Its Dependencies: BeanFactory - constant Required: BeanFactory

Provided Class: Main Dependence: org.softlang.company.Department

Provided Class: Main Its Dependencies: org.softlang.company.Department - constant Required: Department

Provided Class: Main Dependence: package org.softlang.main;


Class Name: Main, src\org\softlang\main\Main.java

 Provided Classes:  [ Main ] 

 Required Classes:  [ EmployeeImplBean ]  [ EmployeeImplPojo ]  [ Factory ]  [ Department ]  [ Company ]  [ Employee ]  [ BeanFactory ] 

Class Content:
package org.softlang.features;

import java.util.Observable;
import java.util.Observer;

import org.softlang.company.impl.bean.EmployeeImpl;

/**
 * Log all changes to salaries of employees.
 * Log them on stdout and count them.
 */
public class Logging implements Observer {

	private int size;
	
	
	public void update(Observable o, Object arg) {
		if (o instanceof EmployeeImpl && arg instanceof String) {
			EmployeeImpl e = (EmployeeImpl)o;
			if (((String)arg).equals("salary")) {
					size++;
					System.out.println("Salary of " + e.getName() + " adjusted to " + e.getSalary());
			}
		}
	}

	/**
	 * Get the number of entries in the log.
	 */
	public int getSize() {
		return size;
	}
	
	/**
	 * Reset the log.
	 */
	public void reset() {
		size = 0;
	}
}

Parametros para o SOOT -> Classe:Logging path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/features

Provided Class: Logging Dependence: EmployeeImpl

Provided Class: Logging Its Dependencies: EmployeeImpl - constant Required: EmployeeImplPojo

Provided Class: Logging Dependence: org.softlang.company.impl.bean.EmployeeImpl

Provided Class: Logging Its Dependencies: org.softlang.company.impl.bean.EmployeeImpl - constant Required: EmployeeImplBean

Provided Class: Logging Dependence: package org.softlang.features;


Class Name: Logging, src\org\softlang\features\Logging.java

 Provided Classes:  [ Logging ] 

 Required Classes:  [ EmployeeImplBean ]  [ EmployeeImplPojo ] 

List of Modified Classes: 12
org.softlang.company.impl.pojo.ContainerImpl.java
org.softlang.company.impl.bean.CompanyImpl.java
org.softlang.company.impl.pojo.CompanyImpl.java
org.softlang.company.impl.bean.DepartmentImpl.java
org.softlang.company.impl.bean.ContainerImpl.java
org.softlang.company.Component.java
org.softlang.company.impl.pojo.EmployeeImpl.java
org.softlang.company.impl.pojo.ComponentImpl.java
org.softlang.util.ObservableSimpleList.java
org.softlang.company.impl.bean.EmployeeImpl.java
org.softlang.company.impl.bean.ComponentImpl.java
org.softlang.company.impl.pojo.DepartmentImpl.java

--------------------------
 - Modified Class: org.softlang.company.impl.pojo.ContainerImpl.java
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/bean/ComponentImpl.java:4,8:
  Semantic Error: org.softlang.visitor not found
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/bean/ComponentImpl.java:23:
  Semantic Error: method with signature accept(Unknown) is multiply declared in type org.softlang.company.impl.bean.ComponentImpl
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/visitor/ReturningVisitor.java:3,8:
  Semantic Error: org.softlang.company not found
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/visitor/ReturningVisitor.java:7:
  Semantic Error: method with signature visit(Unknown) is multiply declared in type org.softlang.visitor.ReturningVisitor
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/visitor/ReturningVisitor.java:8:
  Semantic Error: method with signature visit(Unknown) is multiply declared in type org.softlang.visitor.ReturningVisitor
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/Component.java:14:
  Semantic Error: method with signature accept(Unknown) is multiply declared in type org.softlang.company.Component
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/visitor/VoidVisitor.java:3,8:
  Semantic Error: org.softlang.company not found
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/visitor/VoidVisitor.java:7:
  Semantic Error: method with signature visit(Unknown) is multiply declared in type org.softlang.visitor.VoidVisitor
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/visitor/VoidVisitor.java:8:
  Semantic Error: method with signature visit(Unknown) is multiply declared in type org.softlang.visitor.VoidVisitor
 - Modified Class: org.softlang.company.impl.pojo.ContainerImpl.java
 - Modified Class: org.softlang.company.impl.bean.CompanyImpl.java
/home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source/src/org/softlang/company/impl/bean/CompanyImpl.java:4,8:
  Semantic Error: org.softlang.visitor not found
/home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source/src/org/softlang/company/impl/bean/CompanyImpl.java:9:
  Semantic Error: method with signature accept(Unknown) is multiply declared in type org.softlang.company.impl.bean.CompanyImpl
 - Modified Class: org.softlang.company.impl.bean.CompanyImpl.java
 - Modified Class: org.softlang.company.impl.pojo.CompanyImpl.java
/home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source/src/org/softlang/company/impl/pojo/CompanyImpl.java:4,8:
  Semantic Error: org.softlang.visitor not found
/home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source/src/org/softlang/company/impl/pojo/CompanyImpl.java:17:
  Semantic Error: method with signature accept(Unknown) is multiply declared in type org.softlang.company.impl.pojo.CompanyImpl
 - Modified Class: org.softlang.company.impl.pojo.CompanyImpl.java
 - Modified Class: org.softlang.company.impl.bean.DepartmentImpl.java
/home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source/src/org/softlang/company/impl/bean/DepartmentImpl.java:4,8:
  Semantic Error: org.softlang.visitor not found
/home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source/src/org/softlang/company/impl/bean/DepartmentImpl.java:9:
  Semantic Error: no method named subunits() in org.softlang.company.impl.bean.DepartmentImpl matches.
/home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source/src/org/softlang/company/impl/bean/DepartmentImpl.java:18:
  Semantic Error: method with signature accept(Unknown) is multiply declared in type org.softlang.company.impl.bean.DepartmentImpl
 - Modified Class: org.softlang.company.impl.bean.DepartmentImpl.java
 - Modified Class: org.softlang.company.impl.bean.ContainerImpl.java
/home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source/src/org/softlang/company/impl/bean/ContainerImpl.java:11:
  Semantic Error: can not instantiate Unknown no matching constructor found in Unknown
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/util/ObservableSimpleList.java:48:
  Semantic Error: can not instantiate Unknown no matching constructor found in Unknown
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/util/ObservableSimpleList.java:57:
  Semantic Error: can not instantiate Unknown no matching constructor found in Unknown
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/util/AddToList.java:4,36:
  Semantic Error: no field named element
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/util/RemoveFromList.java:4,41:
  Semantic Error: no field named element
 - Modified Class: org.softlang.company.impl.bean.ContainerImpl.java
 - Modified Class: org.softlang.company.Component.java
/home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source/src/org/softlang/company/Component.java:14:
  Semantic Error: method with signature accept(Unknown) is multiply declared in type org.softlang.company.Component
 - Modified Class: org.softlang.company.Component.java
 - Modified Class: org.softlang.company.impl.pojo.EmployeeImpl.java
/home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source/src/org/softlang/company/impl/pojo/EmployeeImpl.java:4,8:
  Semantic Error: org.softlang.visitor not found
/home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source/src/org/softlang/company/impl/pojo/EmployeeImpl.java:36:
  Semantic Error: method with signature accept(Unknown) is multiply declared in type org.softlang.company.impl.pojo.EmployeeImpl
 - Modified Class: org.softlang.company.impl.pojo.EmployeeImpl.java
 - Modified Class: org.softlang.company.impl.pojo.ComponentImpl.java
/home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source/src/org/softlang/company/impl/pojo/ComponentImpl.java:4,8:
  Semantic Error: org.softlang.visitor not found
/home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source/src/org/softlang/company/impl/pojo/ComponentImpl.java:10:
  Semantic Error: method with signature accept(Unknown) is multiply declared in type org.softlang.company.impl.pojo.ComponentImpl
 - Modified Class: org.softlang.company.impl.pojo.ComponentImpl.java
 - Modified Class: org.softlang.util.ObservableSimpleList.java
/home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source/src/org/softlang/util/ObservableSimpleList.java:48:
  Semantic Error: can not instantiate Unknown no matching constructor found in Unknown
/home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source/src/org/softlang/util/ObservableSimpleList.java:57:
  Semantic Error: can not instantiate Unknown no matching constructor found in Unknown
 - Modified Class: org.softlang.util.ObservableSimpleList.java
 - Modified Class: org.softlang.company.impl.bean.EmployeeImpl.java
/home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source/src/org/softlang/company/impl/bean/EmployeeImpl.java:4,8:
  Semantic Error: org.softlang.visitor not found
/home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source/src/org/softlang/company/impl/bean/EmployeeImpl.java:19:
  Semantic Error: no method named setChanged() in org.softlang.company.impl.bean.EmployeeImpl matches.
/home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source/src/org/softlang/company/impl/bean/EmployeeImpl.java:20:
  Semantic Error: no method named notifyObservers(java.lang.String) in org.softlang.company.impl.bean.EmployeeImpl matches.
/home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source/src/org/softlang/company/impl/bean/EmployeeImpl.java:29:
  Semantic Error: no method named setChanged() in org.softlang.company.impl.bean.EmployeeImpl matches.
/home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source/src/org/softlang/company/impl/bean/EmployeeImpl.java:30:
  Semantic Error: no method named notifyObservers(java.lang.String) in org.softlang.company.impl.bean.EmployeeImpl matches.
/home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source/src/org/softlang/company/impl/bean/EmployeeImpl.java:39:
  Semantic Error: no method named setChanged() in org.softlang.company.impl.bean.EmployeeImpl matches.
/home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source/src/org/softlang/company/impl/bean/EmployeeImpl.java:40:
  Semantic Error: no method named notifyObservers(java.lang.String) in org.softlang.company.impl.bean.EmployeeImpl matches.
/home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source/src/org/softlang/company/impl/bean/EmployeeImpl.java:49:
  Semantic Error: no method named setChanged() in org.softlang.company.impl.bean.EmployeeImpl matches.
/home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source/src/org/softlang/company/impl/bean/EmployeeImpl.java:50:
  Semantic Error: no method named notifyObservers(java.lang.String) in org.softlang.company.impl.bean.EmployeeImpl matches.
/home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source/src/org/softlang/company/impl/bean/EmployeeImpl.java:53:
  Semantic Error: method with signature accept(Unknown) is multiply declared in type org.softlang.company.impl.bean.EmployeeImpl
 - Modified Class: org.softlang.company.impl.bean.EmployeeImpl.java
 - Modified Class: org.softlang.company.impl.bean.ComponentImpl.java
/home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source/src/org/softlang/company/impl/bean/ComponentImpl.java:4,8:
  Semantic Error: org.softlang.visitor not found
/home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source/src/org/softlang/company/impl/bean/ComponentImpl.java:23:
  Semantic Error: method with signature accept(Unknown) is multiply declared in type org.softlang.company.impl.bean.ComponentImpl
 - Modified Class: org.softlang.company.impl.bean.ComponentImpl.java
 - Modified Class: org.softlang.company.impl.pojo.DepartmentImpl.java
/home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source/src/org/softlang/company/impl/pojo/DepartmentImpl.java:4,8:
  Semantic Error: org.softlang.visitor not found
/home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source/src/org/softlang/company/impl/pojo/DepartmentImpl.java:9:
  Semantic Error: no method named subunits() in org.softlang.company.impl.pojo.DepartmentImpl matches.
/home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source/src/org/softlang/company/impl/pojo/DepartmentImpl.java:18:
  Semantic Error: method with signature accept(Unknown) is multiply declared in type org.softlang.company.impl.pojo.DepartmentImpl
 - Modified Class: org.softlang.company.impl.pojo.DepartmentImpl.java
