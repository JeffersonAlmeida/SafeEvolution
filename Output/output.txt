SPL Refactoring Checker
... Checking Start
evolutionDescription = Bank4.0
sourceLineDirectory = /home/jefferson/Desktop/workspace/Bank4.0/
targetLineDirectory = /home/jefferson/Desktop/workspace/Bank4.1/
sourceLineLibDirectory = /home/jefferson/Desktop/workspace/Bank4.0/lib/
targetLineLibDirectory = /home/jefferson/Desktop/workspace/Bank4.1/lib/
line = DEFAULT
generateTestsWith = randoop
timeOut = 120
inputLimit = 120
approach  = EIC
aspectsInSourceSPL = false
aspectsInTargetSPL = false
whichMethods = ONLY_COMMON_METHODS_SUBSET_DEFAULT
ckFormatSourceSPL = HEPHAESTUS
ckFormatTargetSPL = HEPHAESTUS
amFormatSourceSPL = SIMPLE
amFormatTargetSPL = SIMPLE
artifactsSourceDir = /home/jefferson/Desktop/workspace/Bank4.0/Hephaestus/
artifactsTargetDir = /home/jefferson/Desktop/workspace/Bank4.1/Hephaestus/

Asset Mapping Analyzer

The directory of the generated products: <  Tool Path + Products  >


clean_products_folder:
     [echo] This is an Ant Task created to clean the generated products folder.

 Two directories have been deleted:  < Tool Path + Products > and < pluginpath + emma + instr >
Walk through this directory and get all files: /home/jefferson/Desktop/workspace/Bank4.0//src
Walk through this directory and get all files: /home/jefferson/Desktop/workspace/Bank4.1//src



		Let's put the products in cache.


Build the SOURCE Feature Model Alloy file:
source Set OF Features: 

SOURCE Features: 

Feature: core

Feature: bank

SOURCE FM Semantics: pred semanticasource[] { 
isTrue[bank] and ( isTrue[core] <=> isTrue[bank] )
 }

 Alloy File has been created. Check it out in < Tool Path + Alloy + Alloy File >


Build the TARGET Feature Model Alloy file:
target Set OF Features: 

TARGET Features: 

Feature: core

Feature: bank

TARGET FM Semantics: pred semanticatarget[] { 
isTrue[bank] and ( isTrue[core] <=> isTrue[bank] )
 }

 Alloy File has been created. Check it out in < Tool Path + Alloy + Alloy File >


Build the EVOLUTION Alloy file:

 Alloy File has been created. Check it out in < Tool Path + Alloy + Alloy File >


		The products are already in cache.

Build the SOURCE Feature Model Alloy file:
source Set OF Features: 

SOURCE Features: 

Feature: core

Feature: bank

SOURCE FM Semantics: pred semanticasource[] { 
isTrue[bank] and ( isTrue[core] <=> isTrue[bank] )
 }

 Alloy File has been created. Check it out in < Tool Path + Alloy + Alloy File >


Build the TARGET Feature Model Alloy file:
target Set OF Features: 

TARGET Features: 

Feature: core

Feature: bank

TARGET FM Semantics: pred semanticatarget[] { 
isTrue[bank] and ( isTrue[core] <=> isTrue[bank] )
 }

 Alloy File has been created. Check it out in < Tool Path + Alloy + Alloy File >


Build the SOURCE Configuration Knowledge Alloy file:

Class Content:
package org.bank.client;

import org.bank.account.Account;

public class Client {

	private String name;  
    private String phone;
    private Account account;
    
    public Client(String name, String phone, Account account) {
		super();
		this.name = name;
		this.phone = phone;
		this.account = account;
	}
    
    public Client(String name, Account account) {
		super();
		this.name = name;
		this.account = account;
	}

	@Override
	public String toString() {
		return "Client [name=" + name + ", conta=" + account	+ "]";
	}

	/* .......................... Getters and Setters*/
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getPhone() {
		return phone;
	}
	public void setPhone(String phone) {
		this.phone = phone;
	}
	public Account getAccount() {
		return account;
	}
	public void setAccount(Account conta) {
		this.account = conta;
	}  
    
    
}

Parametros para o SOOT -> Classe:Client path:/home/jefferson/Desktop/workspace/Bank4.0/src/org/bank/client
/home/jefferson/Desktop/workspace/Bank4.0/src/org/bank/client/Client.java:3,8:
  Semantic Error: no visible type named org.bank.account.Account
/home/jefferson/Desktop/workspace/Bank4.0/src/org/bank/client/Client.java:9,13:
  Semantic Error: no visible type named Account
/home/jefferson/Desktop/workspace/Bank4.0/src/org/bank/client/Client.java:11,46:
  Semantic Error: no visible type named Account
/home/jefferson/Desktop/workspace/Bank4.0/src/org/bank/client/Client.java:18,32:
  Semantic Error: no visible type named Account
/home/jefferson/Desktop/workspace/Bank4.0/src/org/bank/client/Client.java:42,9:
  Semantic Error: no visible type named Account
/home/jefferson/Desktop/workspace/Bank4.0/src/org/bank/client/Client.java:45,25:
  Semantic Error: no visible type named Account

Provided Class: Client Dependence: package org.bank.client;


Class Name: Client, src/org/bank/client/Client.java

 Provided Classes:  [ Client ] 

 Required Classes: 

Class Content:
package org.bank.account;

public class Account {
	
	private int ag;  
    private int cc;  
    private double balance;
    private static final double LOAN_lIMIT = 1000.00;
   
    /* ............................................ Constructors */
    public Account() {
    	super();
	}
   
    
	public Account(int ag, int cc) {
		super();
		this.ag = ag;
		this.cc = cc;
	}
	
	/* ............................................ Methods */
	public boolean transferir(Double value, Account c){
		if(this.getBalance()>=value){
			this.debito(value);
			c.setBalance(c.getBalance()+value);
			return true;
		}
		return false;
	}
	public boolean deposito(double value){
		this.balance += value;
		return true;
	}
	public boolean debito(double value){
		if(this.getBalance()>=value){
			this.balance -= value;
			return true;
		}else {
			return loan(value-this.getBalance());  
		}
	}
	
	public boolean loan(double value) {
		if(value<=LOAN_lIMIT){
			this.setBalance(this.getBalance()+value);
			return true;	
		}return false;
	}
	
	public boolean sacar(double value){
		return debito(value);
	}
	
	/* ............................................ ToString */
	@Override
	public String toString() {
		return "Conta [ag=" + ag + ", cc=" + cc + ", balance=" + balance + "]";
	}

	/* .......................... Getters and Setters*/
    public int getAg() {
		return ag;
	}
	public void setAg(int ag) {
		this.ag = ag;
	}
	public int getCc() {
		return cc;
	}
	public void setCc(int cc) {
		this.cc = cc;
	}
	public double getBalance() {
		return balance;
	}
	public void setBalance(double balance) {
		this.balance = balance;
	}  
}

Parametros para o SOOT -> Classe:Account path:/home/jefferson/Desktop/workspace/Bank4.0/src/org/bank/account

Provided Class: Account Dependence: package org.bank.account;


Class Name: Account, src/org/bank/account/Account.java

 Provided Classes:  [ Account ] 

 Required Classes: 

Class Content:
package org.bank.facade;

import org.bank.account.Account;

public class Facade {
	public Facade() {
		super();
	}
	public boolean withdraw(Account c, Double v){
		return c.sacar(v);
	}
}

Parametros para o SOOT -> Classe:Facade path:/home/jefferson/Desktop/workspace/Bank4.0/src/org/bank/facade
/home/jefferson/Desktop/workspace/Bank4.0/src/org/bank/facade/Facade.java:3,8:
  Semantic Error: no visible type named org.bank.account.Account
/home/jefferson/Desktop/workspace/Bank4.0/src/org/bank/facade/Facade.java:9,26:
  Semantic Error: no visible type named Account

Provided Class: Facade Dependence: package org.bank.facade;


Class Name: Facade, src/org/bank/facade/Facade.java

 Provided Classes:  [ Facade ] 

 Required Classes: 

Class Content:
package org.bank.validation;

public class Validation {
	private static Validation instance = new Validation();
	private static final double WITHDRAW_lIMIT = 50.00;
	private Validation() {
		super();
	}
	public static Validation getInstance(){
	      return instance;
    }
	public boolean withDrawValidation(double value){
		if(value<WITHDRAW_lIMIT){
			return true;
		}return false;
	}
}

Parametros para o SOOT -> Classe:Validation path:/home/jefferson/Desktop/workspace/Bank4.0/src/org/bank/validation

Provided Class: Validation Dependence: package org.bank.validation;


Class Name: Validation, src/org/bank/validation/Validation.java

 Provided Classes:  [ Validation ] 

 Required Classes: 

Class Content:
package org.bank.gui;

import org.bank.account.Account;
import org.bank.client.Client;
import org.bank.facade.Facade;

public class GUI{
	
	public GUI(){
		super();
	}
	
	public boolean withdraw(Client client, double value) {
		Facade facade = new Facade();
		return facade.withdraw(client.getAccount(), (value));
	}
	
	public static void main(String[] args) {
		Account account = new Account(1,1);
		account.setBalance(2000);
		Client client = new Client("Jefferson", account);
		System.out.println("\n" + client);
		
	}

}

Parametros para o SOOT -> Classe:GUI path:/home/jefferson/Desktop/workspace/Bank4.0/src/org/bank/gui
/home/jefferson/Desktop/workspace/Bank4.0/src/org/bank/gui/GUI.java:3,8:
  Semantic Error: no visible type named org.bank.account.Account
/home/jefferson/Desktop/workspace/Bank4.0/src/org/bank/gui/GUI.java:4,8:
  Semantic Error: no visible type named org.bank.client.Client
/home/jefferson/Desktop/workspace/Bank4.0/src/org/bank/gui/GUI.java:5,8:
  Semantic Error: no visible type named org.bank.facade.Facade
/home/jefferson/Desktop/workspace/Bank4.0/src/org/bank/gui/GUI.java:13,26:
  Semantic Error: no visible type named Client
/home/jefferson/Desktop/workspace/Bank4.0/src/org/bank/gui/GUI.java:14,3:
  Semantic Error: no visible type named Facade
/home/jefferson/Desktop/workspace/Bank4.0/src/org/bank/gui/GUI.java:14,23:
  Semantic Error: no visible type named Facade
/home/jefferson/Desktop/workspace/Bank4.0/src/org/bank/gui/GUI.java:19,3:
  Semantic Error: no visible type named Account
/home/jefferson/Desktop/workspace/Bank4.0/src/org/bank/gui/GUI.java:19:
  Semantic Error: can not instantiate Unknown no matching constructor found in Unknown
/home/jefferson/Desktop/workspace/Bank4.0/src/org/bank/gui/GUI.java:19,25:
  Semantic Error: no visible type named Account
/home/jefferson/Desktop/workspace/Bank4.0/src/org/bank/gui/GUI.java:21,3:
  Semantic Error: no visible type named Client
/home/jefferson/Desktop/workspace/Bank4.0/src/org/bank/gui/GUI.java:21:
  Semantic Error: can not instantiate Unknown no matching constructor found in Unknown
/home/jefferson/Desktop/workspace/Bank4.0/src/org/bank/gui/GUI.java:21,23:
  Semantic Error: no visible type named Client

Provided Class: GUI Dependence: package org.bank.gui;


Class Name: GUI, src/org/bank/gui/GUI.java

 Provided Classes:  [ GUI ] 

 Required Classes: 

source Configuration Knowledge Items:
Feature Expression: core
Provided: {GUI=src/org/bank/gui/GUI.java}
Required: []

Feature Expression: core
Provided: {Facade=src/org/bank/facade/Facade.java}
Required: []

Feature Expression: core
Provided: {Account=src/org/bank/account/Account.java}
Required: []

Feature Expression: core
Provided: {Client=src/org/bank/client/Client.java}
Required: []

Feature Expression: core
Provided: {Validation=src/org/bank/validation/Validation.java}
Required: []


Alloy File Content: open default
 pred provided[] { 
( isTrue[core] => (isTrue[GUI]) )
( isTrue[core] => (isTrue[Facade]) )
( isTrue[core] => (isTrue[Account]) )
( isTrue[core] => (isTrue[Client]) )
( isTrue[core] => (isTrue[Validation]) )
 }

 pred required[] { 
 }

 pred semanticaCK[] { provided[] => required[] }


Correct Set of Features:

Feature: core

Feature: bank

Including CK Signatures in Correct Set

Signature: GUI

Signature: Account

Signature: Facade

Signature: core

Signature: Validation

Signature: Client

Correct Ser Filled:

Correct Item: GUI

Correct Item: Account

Correct Item: Facade

Correct Item: bank

Correct Item: core

Correct Item: Validation

Correct Item: Client

Create Alloy CK File:
File Name: /home/jefferson/workspace/ferramentaLPSSM/Alloy/sourceCKAlloy.als
Content: module sourceCKAlloy
open default
 pred provided[] { 
( isTrue[core] => (isTrue[GUI]) )
( isTrue[core] => (isTrue[Facade]) )
( isTrue[core] => (isTrue[Account]) )
( isTrue[core] => (isTrue[Client]) )
( isTrue[core] => (isTrue[Validation]) )
 }

 pred required[] { 
 }

 pred semanticaCK[] { provided[] => required[] }
one sig GUI, Account, Facade, bank, core, Validation, Client in Bool{}

pred semanticasource[] { 
isTrue[bank] and ( isTrue[core] <=> isTrue[bank] )
 }
assert WT {semanticasource[] => semanticaCK[]}
check WT for 2

Build the TARGET Configuration Knowledge Alloy file:

Class Content:
package org.bank.client;

import org.bank.account.Account;

public class Client {

	private String name;  
    private String phone;
    private Account account;
    
    public Client(String name, String phone, Account account) {
		super();
		this.name = name;
		this.phone = phone;
		this.account = account;
	}
    
    public Client(String name, Account account) {
		super();
		this.name = name;
		this.account = account;
	}

	@Override
	public String toString() {
		return "Client [name=" + name + ", conta=" + account	+ "]";
	}

	/* .......................... Getters and Setters*/
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getPhone() {
		return phone;
	}
	public void setPhone(String phone) {
		this.phone = phone;
	}
	public Account getAccount() {
		return account;
	}
	public void setAccount(Account conta) {
		this.account = conta;
	}  
    
    
}

Parametros para o SOOT -> Classe:Client path:/home/jefferson/Desktop/workspace/Bank4.1/src/org/bank/client
/home/jefferson/Desktop/workspace/Bank4.1/src/org/bank/client/Client.java:3,8:
  Semantic Error: no visible type named org.bank.account.Account
/home/jefferson/Desktop/workspace/Bank4.1/src/org/bank/client/Client.java:9,13:
  Semantic Error: no visible type named Account
/home/jefferson/Desktop/workspace/Bank4.1/src/org/bank/client/Client.java:11,46:
  Semantic Error: no visible type named Account
/home/jefferson/Desktop/workspace/Bank4.1/src/org/bank/client/Client.java:18,32:
  Semantic Error: no visible type named Account
/home/jefferson/Desktop/workspace/Bank4.1/src/org/bank/client/Client.java:42,9:
  Semantic Error: no visible type named Account
/home/jefferson/Desktop/workspace/Bank4.1/src/org/bank/client/Client.java:45,25:
  Semantic Error: no visible type named Account

Provided Class: Client Dependence: package org.bank.client;


Class Name: Client, src/org/bank/client/Client.java

 Provided Classes:  [ Client ] 

 Required Classes: 

Class Content:
package org.bank.account;

public class Account {
	
	private int ag;  
    private int cc;  
    private double balance;
   
    /* ............................................ Constructors */
    public Account() {
    	super();
	}
   
	public Account(int ag, int cc) {
		super();
		this.ag = ag;
		this.cc = cc;
	}
	
	/* ............................................ Methods */
	public boolean transferir(Double value, Account c){
		if(this.getBalance()>=value){
			this.debito(value);
			c.setBalance(c.getBalance()+value);
			return true;
		}
		return false;
	}
	public boolean deposito(double value){
		this.balance += value;
		return true;
	}
	public boolean debito(double value){
		if(this.getBalance()>=value){
			this.balance -= value;
			return true;
		}else {
			return loan(value-this.getBalance());  
		}
	}
	
	public boolean loan(double value) {
		this.setBalance(this.getBalance()+value);
		return true;
	}
	
	public boolean sacar(double value){
		return debito(value);
	}
	
	/* ............................................ ToString */
	@Override
	public String toString() {
		return "Conta [ag=" + ag + ", cc=" + cc + ", balance=" + balance + "]";
	}

	/* .......................... Getters and Setters*/
    public int getAg() {
		return ag;
	}
	public void setAg(int ag) {
		this.ag = ag;
	}
	public int getCc() {
		return cc;
	}
	public void setCc(int cc) {
		this.cc = cc;
	}
	public double getBalance() {
		return balance;
	}
	public void setBalance(double balance) {
		this.balance = balance;
	}  
}

Parametros para o SOOT -> Classe:Account path:/home/jefferson/Desktop/workspace/Bank4.1/src/org/bank/account

Provided Class: Account Dependence: package org.bank.account;


Class Name: Account, src/org/bank/account/Account.java

 Provided Classes:  [ Account ] 

 Required Classes: 

Class Content:
package org.bank.facade;

import org.bank.account.Account;

public class Facade {
	
	public Facade() {
		super();
	}
	public boolean withdraw(Account c, Double v){
		return c.sacar(v);
	}
}

Parametros para o SOOT -> Classe:Facade path:/home/jefferson/Desktop/workspace/Bank4.1/src/org/bank/facade
/home/jefferson/Desktop/workspace/Bank4.1/src/org/bank/facade/Facade.java:3,8:
  Semantic Error: no visible type named org.bank.account.Account
/home/jefferson/Desktop/workspace/Bank4.1/src/org/bank/facade/Facade.java:10,26:
  Semantic Error: no visible type named Account

Provided Class: Facade Dependence: package org.bank.facade;


Class Name: Facade, src/org/bank/facade/Facade.java

 Provided Classes:  [ Facade ] 

 Required Classes: 

Class Content:
package org.bank.validation;

public class Validation {
	private static Validation instance = new Validation();
	private static final double WITHDRAW_lIMIT = 50.00;
	private Validation() {
		super();
	}
	public static Validation getInstance(){
	      return instance;
    }
	public boolean withDrawValidation(double value){
		if(value<WITHDRAW_lIMIT){
			return true;
		}return false;
	}
}

Parametros para o SOOT -> Classe:Validation path:/home/jefferson/Desktop/workspace/Bank4.1/src/org/bank/validation

Provided Class: Validation Dependence: package org.bank.validation;


Class Name: Validation, src/org/bank/validation/Validation.java

 Provided Classes:  [ Validation ] 

 Required Classes: 

Class Content:
package org.bank.gui;

import org.bank.account.Account;
import org.bank.client.Client;
import org.bank.facade.Facade;

public class GUI{
	
	public GUI(){
		super();
	}
	
	public boolean withdraw(Client client, double value) {
		Facade facade = new Facade();
		return facade.withdraw(client.getAccount(), (value));
	}
	
	public static void main(String[] args) {
		Account account = new Account(1,1);
		account.setBalance(2000);
		Client client = new Client("Jefferson", account);
		System.out.println("\n" + client);
		
	}

}

Parametros para o SOOT -> Classe:GUI path:/home/jefferson/Desktop/workspace/Bank4.1/src/org/bank/gui
/home/jefferson/Desktop/workspace/Bank4.1/src/org/bank/gui/GUI.java:3,8:
  Semantic Error: no visible type named org.bank.account.Account
/home/jefferson/Desktop/workspace/Bank4.1/src/org/bank/gui/GUI.java:4,8:
  Semantic Error: no visible type named org.bank.client.Client
/home/jefferson/Desktop/workspace/Bank4.1/src/org/bank/gui/GUI.java:5,8:
  Semantic Error: no visible type named org.bank.facade.Facade
/home/jefferson/Desktop/workspace/Bank4.1/src/org/bank/gui/GUI.java:13,26:
  Semantic Error: no visible type named Client
/home/jefferson/Desktop/workspace/Bank4.1/src/org/bank/gui/GUI.java:14,3:
  Semantic Error: no visible type named Facade
/home/jefferson/Desktop/workspace/Bank4.1/src/org/bank/gui/GUI.java:14,23:
  Semantic Error: no visible type named Facade
/home/jefferson/Desktop/workspace/Bank4.1/src/org/bank/gui/GUI.java:19,3:
  Semantic Error: no visible type named Account
/home/jefferson/Desktop/workspace/Bank4.1/src/org/bank/gui/GUI.java:19:
  Semantic Error: can not instantiate Unknown no matching constructor found in Unknown
/home/jefferson/Desktop/workspace/Bank4.1/src/org/bank/gui/GUI.java:19,25:
  Semantic Error: no visible type named Account
/home/jefferson/Desktop/workspace/Bank4.1/src/org/bank/gui/GUI.java:21,3:
  Semantic Error: no visible type named Client
/home/jefferson/Desktop/workspace/Bank4.1/src/org/bank/gui/GUI.java:21:
  Semantic Error: can not instantiate Unknown no matching constructor found in Unknown
/home/jefferson/Desktop/workspace/Bank4.1/src/org/bank/gui/GUI.java:21,23:
  Semantic Error: no visible type named Client

Provided Class: GUI Dependence: package org.bank.gui;


Class Name: GUI, src/org/bank/gui/GUI.java

 Provided Classes:  [ GUI ] 

 Required Classes: 

target Configuration Knowledge Items:
Feature Expression: core
Provided: {GUI=src/org/bank/gui/GUI.java}
Required: []

Feature Expression: core
Provided: {Facade=src/org/bank/facade/Facade.java}
Required: []

Feature Expression: core
Provided: {Account=src/org/bank/account/Account.java}
Required: []

Feature Expression: core
Provided: {Client=src/org/bank/client/Client.java}
Required: []

Feature Expression: core
Provided: {Validation=src/org/bank/validation/Validation.java}
Required: []


Alloy File Content: open default
 pred provided[] { 
( isTrue[core] => (isTrue[GUI]) )
( isTrue[core] => (isTrue[Facade]) )
( isTrue[core] => (isTrue[Account]) )
( isTrue[core] => (isTrue[Client]) )
( isTrue[core] => (isTrue[Validation]) )
 }

 pred required[] { 
 }

 pred semanticaCK[] { provided[] => required[] }


Correct Set of Features:

Feature: core

Feature: bank

Including CK Signatures in Correct Set

Signature: GUI

Signature: Account

Signature: Facade

Signature: core

Signature: Validation

Signature: Client

Correct Ser Filled:

Correct Item: GUI

Correct Item: Account

Correct Item: Facade

Correct Item: bank

Correct Item: core

Correct Item: Validation

Correct Item: Client

Create Alloy CK File:
File Name: /home/jefferson/workspace/ferramentaLPSSM/Alloy/targetCKAlloy.als
Content: module targetCKAlloy
open default
 pred provided[] { 
( isTrue[core] => (isTrue[GUI]) )
( isTrue[core] => (isTrue[Facade]) )
( isTrue[core] => (isTrue[Account]) )
( isTrue[core] => (isTrue[Client]) )
( isTrue[core] => (isTrue[Validation]) )
 }

 pred required[] { 
 }

 pred semanticaCK[] { provided[] => required[] }
one sig GUI, Account, Facade, bank, core, Validation, Client in Bool{}

pred semanticatarget[] { 
isTrue[bank] and ( isTrue[core] <=> isTrue[bank] )
 }
assert WT {semanticatarget[] => semanticaCK[]}
check WT for 2


		The beginning of the safe composition test to the source SPL


Features: < 2 >
 [ core ]  [ bank ] 

Checking CK ... 

FileContent: module sourceCKAlloy
open default
 pred provided[] { 
( isTrue[core] => (isTrue[GUI]) )
( isTrue[core] => (isTrue[Facade]) )
( isTrue[core] => (isTrue[Account]) )
( isTrue[core] => (isTrue[Client]) )
( isTrue[core] => (isTrue[Validation]) )
 }

 pred required[] { 
 }

 pred semanticaCK[] { provided[] => required[] }
one sig GUI, Account, Facade, bank, core, Validation, Client in Bool{}

pred semanticasource[] { 
isTrue[bank] and ( isTrue[core] <=> isTrue[bank] )
 }
assert WT {semanticasource[] => semanticaCK[]}
check WT for 2


Content: module sourceCKAlloy
open default
 pred provided[] { 
( isTrue[core] => (isTrue[GUI]) )
( isTrue[core] => (isTrue[Facade]) )
( isTrue[core] => (isTrue[Account]) )
( isTrue[core] => (isTrue[Client]) )
( isTrue[core] => (isTrue[Validation]) )
 }

 pred required[] { 
 }

 pred semanticaCK[] { provided[] => required[] }
one sig GUI, Account, Facade, bank, core, Validation, Client in Bool{}

pred semanticasource[] { 
isTrue[bank] and ( isTrue[core] <=> isTrue[bank] )
 }
assert WT {semanticasource[] => semanticaCK[]}
check WT for 2

world get All Commands SIZE: 1
Command: Check WT for 2

ans:
 ---OUTCOME---
Unsatisfiable.


		End of Safe Composition test to the + source SPL

Well Formedness to the <Source> SPL: true


		The beginning of the safe composition test to the target SPL


Features: < 2 >
 [ core ]  [ bank ] 

Checking CK ... 

FileContent: module targetCKAlloy
open default
 pred provided[] { 
( isTrue[core] => (isTrue[GUI]) )
( isTrue[core] => (isTrue[Facade]) )
( isTrue[core] => (isTrue[Account]) )
( isTrue[core] => (isTrue[Client]) )
( isTrue[core] => (isTrue[Validation]) )
 }

 pred required[] { 
 }

 pred semanticaCK[] { provided[] => required[] }
one sig GUI, Account, Facade, bank, core, Validation, Client in Bool{}

pred semanticatarget[] { 
isTrue[bank] and ( isTrue[core] <=> isTrue[bank] )
 }
assert WT {semanticatarget[] => semanticaCK[]}
check WT for 2


Content: module targetCKAlloy
open default
 pred provided[] { 
( isTrue[core] => (isTrue[GUI]) )
( isTrue[core] => (isTrue[Facade]) )
( isTrue[core] => (isTrue[Account]) )
( isTrue[core] => (isTrue[Client]) )
( isTrue[core] => (isTrue[Validation]) )
 }

 pred required[] { 
 }

 pred semanticaCK[] { provided[] => required[] }
one sig GUI, Account, Facade, bank, core, Validation, Client in Bool{}

pred semanticatarget[] { 
isTrue[bank] and ( isTrue[core] <=> isTrue[bank] )
 }
assert WT {semanticatarget[] => semanticaCK[]}
check WT for 2

world get All Commands SIZE: 1
Command: Check WT for 2

ans:
 ---OUTCOME---
Unsatisfiable.


		End of Safe Composition test to the + target SPL

Well Formedness to the <Target> SPL.: true

# SOURCE Products List<1> #

1 -> [ bank ] [ core ] 

# TARGET Products List<1> #

1 -> [ bank ] [ core ] 

Product 0 ::  [ bank ] [ core ]

 [ GUI ] - src/org/bank/gui/GUI.java

 [ Facade ] - src/org/bank/facade/Facade.java

 [ Account ] - src/org/bank/account/Account.java

 [ Client ] - src/org/bank/client/Client.java

 [ Validation ] - src/org/bank/validation/Validation.java
constante destino esta vazio: false


	Correspondent Product

Product 1 ::  [ bank ] [ core ]

 [ GUI ] - src/org/bank/gui/GUI.java

 [ Facade ] - src/org/bank/facade/Facade.java

 [ Account ] - src/org/bank/account/Account.java

 [ Client ] - src/org/bank/client/Client.java

 [ Validation ] - src/org/bank/validation/Validation.java
constante destino esta vazio: false


	SOURCE Mapping Asset DESTINY:

 key 0: GUI content: src/org/bank/gui/GUI.java
 key 1: Account content: src/org/bank/account/Account.java
 key 2: Facade content: src/org/bank/facade/Facade.java
 key 3: Validation content: src/org/bank/validation/Validation.java
 key 4: Client content: src/org/bank/client/Client.java

	TARGET Mapping Asset DESTINY:

 key 0: GUI content: src/org/bank/gui/GUI.java
 key 1: Account content: src/org/bank/account/Account.java
 key 2: Facade content: src/org/bank/facade/Facade.java
 key 3: Validation content: src/org/bank/validation/Validation.java
 key 4: Client content: src/org/bank/client/Client.java


	SOURCE Mapping Asset ORGIGEM:

 key 0: GUI content: /src/org/bank/gui/GUI.java
 key 1: Account content: /src/org/bank/account/Account.java
 key 2: Facade content: /src/org/bank/facade/Facade.java
 key 3: Validation content: /src/org/bank/validation/Validation.java
 key 4: Client content: /src/org/bank/client/Client.java


	TARGET Mapping Asset ORGIGEM:

 key 0: GUI content: /src/org/bank/gui/GUI.java
 key 1: Account content: /src/org/bank/account/Account.java
 key 2: Facade content: /src/org/bank/facade/Facade.java
 key 3: Validation content: /src/org/bank/validation/Validation.java
 key 4: Client content: /src/org/bank/client/Client.java


	SOURCE PREPROCESS TAGS:



	 TARGET PREPROCESS TAGS:




mappingAssetDestiny: true mappingAssetOrigin: true preProcess: true


 ... Attempting to marry products that did not have a par.


All products in the source have a really correspondent target product ?: true
areAllProductsMatched: true

Have Source and Target the same assets ?:false 


 AM Equal: false

EXTENDED IMPACTED ClASSES


List of Extended Impacted Classes: 1
org.bank.gui.GUI.java

--------------------------

List of Modified Classes: 1
org.bank.gui.GUI.java

--------------------------
