### ONLY_CHANGED_CLASSES ###
Avaliando A LPS.

The directory of the generated products: <  Tool Path + Products  >


clean_products_folder:
     [echo] This is an Ant Task created to clean the generated products folder.

 Two directories have been deleted:  < Tool Path + Products > and < pluginpath + emma + instr >
Walk through this directory and get all files: /home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src
Walk through this directory and get all files: /home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src



		Let's put the products in cache.


Build the SOURCE Feature Model Alloy file:
source Set OF Features: 

SOURCE Features: 

Feature: javaexorcismspl

Feature: treestructure

SOURCE FM Semantics: pred semanticasource[] { 
isTrue[javaexorcismspl] and ( isTrue[treestructure] <=> isTrue[javaexorcismspl] )
 }

 Alloy File has been created. Check it out in < Tool Path + Alloy + Alloy File >


Build the TARGET Feature Model Alloy file:
target Set OF Features: 

TARGET Features: 

Feature: javaexorcismspl

Feature: logging

Feature: treestructure

TARGET FM Semantics: pred semanticatarget[] { 
isTrue[javaexorcismspl] and ( isTrue[treestructure] <=> isTrue[javaexorcismspl] ) and ( isTrue[logging] => isTrue[javaexorcismspl] )
 }

 Alloy File has been created. Check it out in < Tool Path + Alloy + Alloy File >


Build the EVOLUTION Alloy file:

 Alloy File has been created. Check it out in < Tool Path + Alloy + Alloy File >


		The products are already in cache.

Class Content:
package org.softlang.tests;

import org.junit.Test;
import org.softlang.company.Company;
import org.softlang.company.Department;
import org.softlang.company.Employee;
import org.softlang.company.factory.Factory;

/**
 * Test/demonstrate basic operations for totaling and cutting salaries.
 */
public class Basics {
	
	static Company createSampleCompany(Factory f) {
		
		// Create company
		Company sampleCompany = f.mkCompany();
		sampleCompany.setName("meganalysis");
		
		// Create all employees
		Employee craig = f.mkEmployee();
		craig.setName("Craig");
		craig.setAddress("Redmond");
		craig.setSalary(123456);
		craig.setManager(true);

		Employee erik = f.mkEmployee();
		erik.setName("Erik");
		erik.setAddress("Utrecht");
		erik.setSalary(12345);

		Employee ralf = f.mkEmployee();
		ralf.setName("Ralf");
		ralf.setAddress("Koblenz");
		ralf.setSalary(1234);		

		Employee ray = f.mkEmployee();
		ray.setName("Ray");
		ray.setAddress("Redmond");
		ray.setSalary(234567);
		ray.setManager(true);

		Employee klaus = f.mkEmployee();
		klaus.setName("Klaus");
		klaus.setAddress("Boston");
		klaus.setSalary(23456);
		klaus.setManager(true);
		
		Employee karl = f.mkEmployee();
		karl.setName("Karl");
		karl.setAddress("Riga");
		karl.setSalary(2345);
		karl.setManager(true);
		
		Employee joe = f.mkEmployee();
		joe.setName("Joe");
		joe.setAddress("Wifi City");
		joe.setSalary(2344);								

		// Create research department
		Department research = f.mkDepartment();
		research.setName("Research");
		research.add(craig);
		research.add(erik);
		research.add(ralf);
		sampleCompany.add(research);

		// Create development department
		Department development = f.mkDepartment();
		development.setName("Development");
		development.add(ray);
		sampleCompany.add(development);

		// Create sub-department dev1
		Department dev1 = f.mkDepartment();
		dev1.setName("Dev1");
		dev1.add(klaus);
		development.add(dev1);

		// Create sub-department dev11
		Department dev11 = f.mkDepartment();
		dev11.setName("Dev1.1");
		dev11.add(karl);
		dev11.add(joe);
		dev1.add(dev11);
		
		return sampleCompany;
	}
	
	@Test
	public void test() {
	}
}

Parametros para o SOOT -> Classe:Basics path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/tests

Provided Class: Basics Dependence: Test

Provided Class: Basics Dependence: org.softlang.company.factory.Factory

Provided Class: Basics Its Dependencies: org.softlang.company.factory.Factory - constant Required: Factory

Provided Class: Basics Dependence: org.softlang.company.Company

Provided Class: Basics Its Dependencies: org.softlang.company.Company - constant Required: Company

Provided Class: Basics Dependence: Factory

Provided Class: Basics Its Dependencies: Factory - constant Required: Factory

Provided Class: Basics Dependence: Department

Provided Class: Basics Its Dependencies: Department - constant Required: Department

Provided Class: Basics Dependence: Company

Provided Class: Basics Its Dependencies: Company - constant Required: Company

Provided Class: Basics Dependence: org.softlang.company.Employee

Provided Class: Basics Its Dependencies: org.softlang.company.Employee - constant Required: Employee

Provided Class: Basics Dependence: Employee

Provided Class: Basics Its Dependencies: Employee - constant Required: Employee

Provided Class: Basics Dependence: org.junit.Test

Provided Class: Basics Dependence: org.softlang.company.Department

Provided Class: Basics Its Dependencies: org.softlang.company.Department - constant Required: Department

Provided Class: Basics Dependence: package org.softlang.tests;


Class Name: Basics,  src\org\softlang\tests\Basics.java

 Provided Classes:  [ Basics ] 

 Required Classes:  [ Factory ]  [ Department ]  [ Company ]  [ Employee ] 


Class Name: Junit, lib\Junit.jar

 Provided Classes:  [ Junit ] 

 Required Classes: 


Class Name: Build, build.xml

 Provided Classes:  [ Build ] 

 Required Classes: 

Class Content:
package org.softlang.company;

/**
 * A company has a name and consists of (possibly nested) departments.
 * This is sufficiently covered by the Container interface.
 * Hence, the present interface is essentially a marker.
 */
public interface Company extends Container { }

Parametros para o SOOT -> Classe:Company path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company

Provided Class: Company Dependence: Container

Provided Class: Company Its Dependencies: Container - constant Required: Container

Provided Class: Company Dependence: package org.softlang.company;


Class Name: Company,  src\org\softlang\company\Company.java

 Provided Classes:  [ Company ] 

 Required Classes:  [ Container ] 

Class Content:
package org.softlang.company;

import org.softlang.visitor.ReturningVisitor;
import org.softlang.visitor.VoidVisitor;

/**
 * The root class of the object model for companies.
 * All objects in a company have a name.
 * There is also general visitor support.
 */
public interface Component {
	String getName();
	void setName(String name);
	void accept(VoidVisitor v);
	<R> R accept(ReturningVisitor<R> v);
}

Parametros para o SOOT -> Classe:Component path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/Component.java:14:
  Semantic Error: method with signature accept(Unknown) is multiply declared in type org.softlang.company.Component

Provided Class: Component Dependence: ReturningVisitor

Provided Class: Component Its Dependencies: ReturningVisitor - constant Required: ReturningVisitor

Provided Class: Component Dependence: VoidVisitor

Provided Class: Component Its Dependencies: VoidVisitor - constant Required: VoidVisitor

Provided Class: Component Dependence: org.softlang.visitor.VoidVisitor

Provided Class: Component Its Dependencies: org.softlang.visitor.VoidVisitor - constant Required: VoidVisitor

Provided Class: Component Dependence: org.softlang.visitor.ReturningVisitor

Provided Class: Component Its Dependencies: org.softlang.visitor.ReturningVisitor - constant Required: ReturningVisitor

Provided Class: Component Dependence: package org.softlang.company;


Class Name: Component, src\org\softlang\company\Component.java

 Provided Classes:  [ Component ] 

 Required Classes:  [ ReturningVisitor ]  [ VoidVisitor ] 

Class Content:
package org.softlang.company;

/**
 * An interface for all composites in an company object structure.
 * Containers are supposed to aggregate sub-units.
 */
public interface Container extends Component {
	Iterable<? extends Subunit> subunits();
	boolean add(Subunit u);
	boolean remove(Subunit u);
}

Parametros para o SOOT -> Classe:Container path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company

Provided Class: Container Dependence: Subunit

Provided Class: Container Its Dependencies: Subunit - constant Required: Subunit

Provided Class: Container Dependence: Component

Provided Class: Container Its Dependencies: Component - constant Required: Component

Provided Class: Container Dependence: package org.softlang.company;


Class Name: Container, src\org\softlang\company\Container.java

 Provided Classes:  [ Container ] 

 Required Classes:  [ Subunit ]  [ Component ] 

Class Content:
package org.softlang.company;

/**
 * A department has a name, employees, and sub-departments.
 * One of the employees is supposed to be the manager.
 * We add a getter for the manager for convenience's sake.
 */
public interface Department extends Subunit, Container {
	Employee getManager();
}

Parametros para o SOOT -> Classe:Department path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company

Provided Class: Department Dependence: Subunit

Provided Class: Department Its Dependencies: Subunit - constant Required: Subunit

Provided Class: Department Dependence: Employee

Provided Class: Department Its Dependencies: Employee - constant Required: Employee

Provided Class: Department Dependence: Container

Provided Class: Department Its Dependencies: Container - constant Required: Container

Provided Class: Department Dependence: package org.softlang.company;


Class Name: Department, src\org\softlang\company\Department.java

 Provided Classes:  [ Department ] 

 Required Classes:  [ Subunit ]  [ Employee ]  [ Container ] 

Class Content:
package org.softlang.company;

/**
 * An employee has a name, an address, and a salary. 
 * Also, an employee may be flagged to be a manager.
 */
public interface Employee extends Subunit {
	String getAddress();
	void setAddress(String address);
	double getSalary();
	void setSalary(double salary);
	boolean getManager();
	void setManager(boolean manager);
	
	String getCep();
}

Parametros para o SOOT -> Classe:Employee path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company

Provided Class: Employee Dependence: Subunit

Provided Class: Employee Its Dependencies: Subunit - constant Required: Subunit

Provided Class: Employee Dependence: package org.softlang.company;


Class Name: Employee,  src\org\softlang\company\Employee.java

 Provided Classes:  [ Employee ] 

 Required Classes:  [ Subunit ] 

Class Content:
package org.softlang.company;

/**
 * A subunit is either an employee unit or a department unit.
 * The interface is only needed as a common base type.
 * That is, no members are added here to Component.
 */
public interface Subunit extends Component { }

Parametros para o SOOT -> Classe:Subunit path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company

Provided Class: Subunit Dependence: Component

Provided Class: Subunit Its Dependencies: Component - constant Required: Component

Provided Class: Subunit Dependence: package org.softlang.company;


Class Name: Subunit,  src\org\softlang\company\Subunit.java

 Provided Classes:  [ Subunit ] 

 Required Classes:  [ Component ] 

Class Content:
package org.softlang.company.factory;

import org.softlang.company.*;
import org.softlang.company.impl.bean.*;

/**
 * A factory that constructs (a kind of) "beans" as opposed to POJPs
 */
public class BeanFactory implements Factory {
	public Company mkCompany() { return new CompanyImpl(); }
	public Department mkDepartment() { return new DepartmentImpl(); }
	public Employee mkEmployee() { return new EmployeeImpl(); }
}

Parametros para o SOOT -> Classe:BeanFactory path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/factory
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/factory/BeanFactory.java:4,8:
  Semantic Error: org.softlang.company.impl.bean not found

Provided Class: BeanFactory Dependence: DepartmentImpl

Provided Class: BeanFactory Its Dependencies: DepartmentImpl - constant Required: DepartmentImplPojo

Provided Class: BeanFactory Dependence: EmployeeImpl

Provided Class: BeanFactory Its Dependencies: EmployeeImpl - constant Required: EmployeeImplPojo

Provided Class: BeanFactory Dependence: Factory

Provided Class: BeanFactory Its Dependencies: Factory - constant Required: Factory

Provided Class: BeanFactory Dependence: Department

Provided Class: BeanFactory Its Dependencies: Department - constant Required: Department

Provided Class: BeanFactory Dependence: Company

Provided Class: BeanFactory Its Dependencies: Company - constant Required: Company

Provided Class: BeanFactory Dependence: Employee

Provided Class: BeanFactory Its Dependencies: Employee - constant Required: Employee

Provided Class: BeanFactory Dependence: CompanyImpl

Provided Class: BeanFactory Its Dependencies: CompanyImpl - constant Required: CompanyImplBean

Provided Class: BeanFactory Dependence: package org.softlang.company.factory;


Class Name: BeanFactory,  src\org\softlang\company\factory\BeanFactory.java

 Provided Classes:  [ BeanFactory ] 

 Required Classes:  [ EmployeeImplPojo ]  [ DepartmentImplPojo ]  [ CompanyImplBean ]  [ Factory ]  [ Company ]  [ Department ]  [ Employee ] 

Class Content:
package org.softlang.company.factory;

import org.softlang.company.Company;
import org.softlang.company.Department;
import org.softlang.company.Employee;

/**
 * The factory interface for constructing all possible company objects
 */
public interface Factory {
	Company mkCompany();
	Department mkDepartment();
	Employee mkEmployee();
}

Parametros para o SOOT -> Classe:Factory path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/factory

Provided Class: Factory Dependence: org.softlang.company.Company

Provided Class: Factory Its Dependencies: org.softlang.company.Company - constant Required: Company

Provided Class: Factory Dependence: Department

Provided Class: Factory Its Dependencies: Department - constant Required: Department

Provided Class: Factory Dependence: Company

Provided Class: Factory Its Dependencies: Company - constant Required: Company

Provided Class: Factory Dependence: org.softlang.company.Employee

Provided Class: Factory Its Dependencies: org.softlang.company.Employee - constant Required: Employee

Provided Class: Factory Dependence: Employee

Provided Class: Factory Its Dependencies: Employee - constant Required: Employee

Provided Class: Factory Dependence: org.softlang.company.Department

Provided Class: Factory Its Dependencies: org.softlang.company.Department - constant Required: Department

Provided Class: Factory Dependence: package org.softlang.company.factory;


Class Name: Factory,  src\org\softlang\company\factory\Factory.java

 Provided Classes:  [ Factory ] 

 Required Classes:  [ Department ]  [ Company ]  [ Employee ] 

Class Content:
package org.softlang.company.impl.bean;

import org.softlang.company.*;
import org.softlang.visitor.*;
import org.softlang.visitor.VoidVisitor;

public class CompanyImpl extends ContainerImpl implements Company {

	public void accept(VoidVisitor v) {
		v.visit(this);
	}

	public <R> R accept(ReturningVisitor<R> v) {
		return v.visit(this);
	}	
}

Parametros para o SOOT -> Classe:CompanyImpl path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/bean
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/bean/CompanyImpl.java:4,8:
  Semantic Error: org.softlang.visitor not found
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/bean/CompanyImpl.java:9:
  Semantic Error: method with signature accept(Unknown) is multiply declared in type org.softlang.company.impl.bean.CompanyImpl

Provided Class: CompanyImplBean Dependence: ReturningVisitor

Provided Class: CompanyImplBean Its Dependencies: ReturningVisitor - constant Required: ReturningVisitor

Provided Class: CompanyImplBean Dependence: VoidVisitor

Provided Class: CompanyImplBean Its Dependencies: VoidVisitor - constant Required: VoidVisitor

Provided Class: CompanyImplBean Dependence: ContainerImpl

Provided Class: CompanyImplBean Its Dependencies: ContainerImpl - constant Required: ContainerImplPojo

Provided Class: CompanyImplBean Dependence: org.softlang.visitor.VoidVisitor

Provided Class: CompanyImplBean Its Dependencies: org.softlang.visitor.VoidVisitor - constant Required: VoidVisitor

Provided Class: CompanyImplBean Dependence: Company

Provided Class: CompanyImplBean Its Dependencies: Company - constant Required: Company

Provided Class: CompanyImplBean Dependence: package org.softlang.company.impl.bean;


Class Name: CompanyImplBean,  src\org\softlang\company\impl\bean\CompanyImpl.java

 Provided Classes:  [ CompanyImplBean ] 

 Required Classes:  [ ReturningVisitor ]  [ ContainerImplPojo ]  [ VoidVisitor ]  [ Company ] 

Class Content:
package org.softlang.company.impl.bean;

import org.softlang.company.*;
import org.softlang.visitor.*;
import java.util.Observable;

/**
 * Observability and a parent axis are added on top of the Component interface.
 */
public abstract class ComponentImpl extends Observable implements Component {
	private ComponentImpl parent;
	private String name;
	public String getName() {
		return name; 
	}
	public void setName(String name) { 
		this.name = name; 
		setChanged();
		notifyObservers("name");		
	}
	public ComponentImpl getParent() { return parent; }
	/* package */ void setParent(ComponentImpl parent) { this.parent = parent; }
	public abstract void accept(VoidVisitor v);
	public abstract <R> R accept(ReturningVisitor<R> v);
}

Parametros para o SOOT -> Classe:ComponentImpl path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/bean
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/bean/ComponentImpl.java:4,8:
  Semantic Error: org.softlang.visitor not found
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/bean/ComponentImpl.java:23:
  Semantic Error: method with signature accept(Unknown) is multiply declared in type org.softlang.company.impl.bean.ComponentImpl

Provided Class: ComponentImplBean Dependence: ReturningVisitor

Provided Class: ComponentImplBean Its Dependencies: ReturningVisitor - constant Required: ReturningVisitor

Provided Class: ComponentImplBean Dependence: VoidVisitor

Provided Class: ComponentImplBean Its Dependencies: VoidVisitor - constant Required: VoidVisitor

Provided Class: ComponentImplBean Dependence: Component

Provided Class: ComponentImplBean Its Dependencies: Component - constant Required: Component

Provided Class: ComponentImplBean Dependence: package org.softlang.company.impl.bean;


Class Name: ComponentImplBean,  src\org\softlang\company\impl\bean\ComponentImpl.java

 Provided Classes:  [ ComponentImplBean ] 

 Required Classes:  [ ReturningVisitor ]  [ VoidVisitor ]  [ Component ] 

Class Content:
package org.softlang.company.impl.bean;

import org.softlang.company.*;
import org.softlang.util.ObservableSimpleList;
import org.softlang.util.SimpleLinkedList;
import java.util.Observer;

public abstract class ContainerImpl extends ComponentImpl implements Container {

	private ObservableSimpleList<Subunit> subunits = 
		new ObservableSimpleList<Subunit>(
				new SimpleLinkedList<Subunit>());
	
	public Iterable<? extends Subunit> subunits() {
		return subunits;
	}

	public boolean add(Subunit u) {
		ComponentImpl i = (ComponentImpl)u;
		if (i.getParent()!=null)
			throw new IllegalArgumentException("Attemped re-parenting.");
		i.setParent(this);
		return subunits.add(u);
	}

	public boolean remove(Subunit u) {
		ComponentImpl i = (ComponentImpl)u;
		i.setParent(null);
		return subunits.remove(u);
	}
	
	public void addObserver(Observer o) {
		super.addObserver(o);
		subunits.addObserver(o);
	}
	
	public void deleteObserver(Observer o) {
		super.deleteObserver(o);
		subunits.deleteObserver(o);		
	}
	
	public void deleteObservers() {
		super.deleteObservers();
		subunits.deleteObservers();
	}			
}

Parametros para o SOOT -> Classe:ContainerImpl path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/bean
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/bean/ContainerImpl.java:11:
  Semantic Error: can not instantiate Unknown no matching constructor found in Unknown

Provided Class: ContainerImplBean Dependence: ComponentImpl

Provided Class: ContainerImplBean Its Dependencies: ComponentImpl - constant Required: ComponentImplPojo

Provided Class: ContainerImplBean Dependence: ObservableSimpleList

Provided Class: ContainerImplBean Its Dependencies: ObservableSimpleList - constant Required: ObservableSimpleList

Provided Class: ContainerImplBean Dependence: org.softlang.util.SimpleLinkedList

Provided Class: ContainerImplBean Its Dependencies: org.softlang.util.SimpleLinkedList - constant Required: SimpleLinkedList

Provided Class: ContainerImplBean Dependence: Subunit

Provided Class: ContainerImplBean Its Dependencies: Subunit - constant Required: Subunit

Provided Class: ContainerImplBean Dependence: org.softlang.util.ObservableSimpleList

Provided Class: ContainerImplBean Its Dependencies: org.softlang.util.ObservableSimpleList - constant Required: ObservableSimpleList

Provided Class: ContainerImplBean Dependence: SimpleLinkedList

Provided Class: ContainerImplBean Its Dependencies: SimpleLinkedList - constant Required: SimpleLinkedList

Provided Class: ContainerImplBean Dependence: Container

Provided Class: ContainerImplBean Its Dependencies: Container - constant Required: Container

Provided Class: ContainerImplBean Dependence: package org.softlang.company.impl.bean;


Class Name: ContainerImplBean,  src\org\softlang\company\impl\bean\ContainerImpl.java

 Provided Classes:  [ ContainerImplBean ] 

 Required Classes:  [ ComponentImplPojo ]  [ ObservableSimpleList ]  [ Subunit ]  [ SimpleLinkedList ]  [ Container ] 

Class Content:
package org.softlang.company.impl.bean;

import org.softlang.company.*;
import org.softlang.visitor.*;

public class DepartmentImpl extends ContainerImpl implements Department {
	
	public Employee getManager() {
		for (Subunit u : subunits())
			if (u instanceof Employee) {
				Employee e = (Employee)u;
				if (e.getManager())
					return e;
			}
		return null;
	}	

	public void accept(VoidVisitor v) {
		v.visit(this);
	}

	public <R> R accept(ReturningVisitor<R> v) {
		return v.visit(this);
	}
}

Parametros para o SOOT -> Classe:DepartmentImpl path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/bean
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/bean/DepartmentImpl.java:4,8:
  Semantic Error: org.softlang.visitor not found
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/bean/DepartmentImpl.java:9:
  Semantic Error: no method named subunits() in org.softlang.company.impl.bean.DepartmentImpl matches.
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/bean/DepartmentImpl.java:18:
  Semantic Error: method with signature accept(Unknown) is multiply declared in type org.softlang.company.impl.bean.DepartmentImpl

Provided Class: DepartmentImplBean Dependence: ReturningVisitor

Provided Class: DepartmentImplBean Its Dependencies: ReturningVisitor - constant Required: ReturningVisitor

Provided Class: DepartmentImplBean Dependence: VoidVisitor

Provided Class: DepartmentImplBean Its Dependencies: VoidVisitor - constant Required: VoidVisitor

Provided Class: DepartmentImplBean Dependence: ContainerImpl

Provided Class: DepartmentImplBean Its Dependencies: ContainerImpl - constant Required: ContainerImplPojo

Provided Class: DepartmentImplBean Dependence: Subunit

Provided Class: DepartmentImplBean Its Dependencies: Subunit - constant Required: Subunit

Provided Class: DepartmentImplBean Dependence: Department

Provided Class: DepartmentImplBean Its Dependencies: Department - constant Required: Department

Provided Class: DepartmentImplBean Dependence: Employee

Provided Class: DepartmentImplBean Its Dependencies: Employee - constant Required: Employee

Provided Class: DepartmentImplBean Dependence: package org.softlang.company.impl.bean;


Class Name: DepartmentImplBean,  src\org\softlang\company\impl\bean\DepartmentImpl.java

 Provided Classes:  [ DepartmentImplBean ] 

 Required Classes:  [ ReturningVisitor ]  [ ContainerImplPojo ]  [ VoidVisitor ]  [ Subunit ]  [ Department ]  [ Employee ] 

Class Content:
package org.softlang.company.impl.bean;

import org.softlang.company.*;
import org.softlang.visitor.*;

public class EmployeeImpl extends ComponentImpl implements Employee {

	private String name;
	private String address;
	private double salary;
	private boolean manager;

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
		setChanged();
		notifyObservers("name");
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
		setChanged();
		notifyObservers("address");
	}

	public double getSalary() {
		return salary;
	}

	public void setSalary(double salary) {
		this.salary = salary;
		setChanged();
		notifyObservers("salary");
	}	
	
	public boolean getManager() {
		return manager;
	}

	public void setManager(boolean manager) {
		this.manager = manager;
		setChanged();
		notifyObservers("manager");
	}

	public void accept(VoidVisitor v) {
		v.visit(this);
	}

	public <R> R accept(ReturningVisitor<R> v) {
		return v.visit(this);
	}

	public String getCep() {
		return "cep";
	}
}

Parametros para o SOOT -> Classe:EmployeeImpl path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/bean
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/bean/EmployeeImpl.java:4,8:
  Semantic Error: org.softlang.visitor not found
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/bean/EmployeeImpl.java:19:
  Semantic Error: no method named setChanged() in org.softlang.company.impl.bean.EmployeeImpl matches.
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/bean/EmployeeImpl.java:20:
  Semantic Error: no method named notifyObservers(java.lang.String) in org.softlang.company.impl.bean.EmployeeImpl matches.
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/bean/EmployeeImpl.java:29:
  Semantic Error: no method named setChanged() in org.softlang.company.impl.bean.EmployeeImpl matches.
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/bean/EmployeeImpl.java:30:
  Semantic Error: no method named notifyObservers(java.lang.String) in org.softlang.company.impl.bean.EmployeeImpl matches.
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/bean/EmployeeImpl.java:39:
  Semantic Error: no method named setChanged() in org.softlang.company.impl.bean.EmployeeImpl matches.
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/bean/EmployeeImpl.java:40:
  Semantic Error: no method named notifyObservers(java.lang.String) in org.softlang.company.impl.bean.EmployeeImpl matches.
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/bean/EmployeeImpl.java:49:
  Semantic Error: no method named setChanged() in org.softlang.company.impl.bean.EmployeeImpl matches.
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/bean/EmployeeImpl.java:50:
  Semantic Error: no method named notifyObservers(java.lang.String) in org.softlang.company.impl.bean.EmployeeImpl matches.
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/bean/EmployeeImpl.java:53:
  Semantic Error: method with signature accept(Unknown) is multiply declared in type org.softlang.company.impl.bean.EmployeeImpl

Provided Class: EmployeeImplBean Dependence: ReturningVisitor

Provided Class: EmployeeImplBean Its Dependencies: ReturningVisitor - constant Required: ReturningVisitor

Provided Class: EmployeeImplBean Dependence: ComponentImpl

Provided Class: EmployeeImplBean Its Dependencies: ComponentImpl - constant Required: ComponentImplPojo

Provided Class: EmployeeImplBean Dependence: VoidVisitor

Provided Class: EmployeeImplBean Its Dependencies: VoidVisitor - constant Required: VoidVisitor

Provided Class: EmployeeImplBean Dependence: Employee

Provided Class: EmployeeImplBean Its Dependencies: Employee - constant Required: Employee

Provided Class: EmployeeImplBean Dependence: package org.softlang.company.impl.bean;


Class Name: EmployeeImplBean,  src\org\softlang\company\impl\bean\EmployeeImpl.java

 Provided Classes:  [ EmployeeImplBean ] 

 Required Classes:  [ ComponentImplPojo ]  [ ReturningVisitor ]  [ VoidVisitor ]  [ Employee ] 

Class Content:
package org.softlang.visitor;

import org.softlang.company.*;

public interface ReturningVisitor<R> {

	R visit(Company o);
	R visit(Department o);
	R visit(Employee o);

}

Parametros para o SOOT -> Classe:ReturningVisitor path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/visitor
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/visitor/ReturningVisitor.java:3,8:
  Semantic Error: org.softlang.company not found
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/visitor/ReturningVisitor.java:7:
  Semantic Error: method with signature visit(Unknown) is multiply declared in type org.softlang.visitor.ReturningVisitor
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/visitor/ReturningVisitor.java:8:
  Semantic Error: method with signature visit(Unknown) is multiply declared in type org.softlang.visitor.ReturningVisitor

Provided Class: ReturningVisitor Dependence: Department

Provided Class: ReturningVisitor Its Dependencies: Department - constant Required: Department

Provided Class: ReturningVisitor Dependence: Company

Provided Class: ReturningVisitor Its Dependencies: Company - constant Required: Company

Provided Class: ReturningVisitor Dependence: Employee

Provided Class: ReturningVisitor Its Dependencies: Employee - constant Required: Employee

Provided Class: ReturningVisitor Dependence: package org.softlang.visitor;


Class Name: ReturningVisitor,  src\org\softlang\visitor\ReturningVisitor.java

 Provided Classes:  [ ReturningVisitor ] 

 Required Classes:  [ Company ]  [ Department ]  [ Employee ] 

Class Content:
package org.softlang.visitor;

import org.softlang.company.*;

public interface VoidVisitor {

	void visit(Company o);
	void visit(Department o);
	void visit(Employee o);
		
}

Parametros para o SOOT -> Classe:VoidVisitor path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/visitor
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/visitor/VoidVisitor.java:3,8:
  Semantic Error: org.softlang.company not found
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/visitor/VoidVisitor.java:7:
  Semantic Error: method with signature visit(Unknown) is multiply declared in type org.softlang.visitor.VoidVisitor
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/visitor/VoidVisitor.java:8:
  Semantic Error: method with signature visit(Unknown) is multiply declared in type org.softlang.visitor.VoidVisitor

Provided Class: VoidVisitor Dependence: Department

Provided Class: VoidVisitor Its Dependencies: Department - constant Required: Department

Provided Class: VoidVisitor Dependence: Company

Provided Class: VoidVisitor Its Dependencies: Company - constant Required: Company

Provided Class: VoidVisitor Dependence: Employee

Provided Class: VoidVisitor Its Dependencies: Employee - constant Required: Employee

Provided Class: VoidVisitor Dependence: package org.softlang.visitor;


Class Name: VoidVisitor,  src\org\softlang\visitor\VoidVisitor.java

 Provided Classes:  [ VoidVisitor ] 

 Required Classes:  [ Company ]  [ Department ]  [ Employee ] 

Class Content:
package org.softlang.util;

import java.util.*;

/**
 * Compose the (Simple)List interface with the Observable base class.
 * In fact, a given list is decorated with observer capability.
 * The methods must be adjusted to notify upon changes.
 * Addition and removal of observers is pushed into elements--if they are observable.
 */
public class ObservableSimpleList<X> extends Observable implements SimpleList<X> {

	private SimpleList<X> inner;
	
	public ObservableSimpleList(SimpleList<X> inner) {
		this.inner = inner;
	}
	
	public void addObserver(Observer o) {
		super.addObserver(o);
		for (X e : this)
			if (e instanceof Observable)
				((Observable)e).addObserver(o);
	}
	
	public void deleteObserver(Observer o) {
		super.deleteObserver(o);
		for (X e : this)
			if (e instanceof Observable)
				((Observable)e).deleteObserver(o);
	}
	
	public void deleteObservers() {
		super.deleteObservers();
		for (X e : this)
			if (e instanceof Observable)
				((Observable)e).deleteObservers();
	}	
		
	public Iterator<X> iterator() {
		return inner.iterator();
	}
		
	public boolean add(X e) {
		boolean result = inner.add(e);
		if (result) {
			setChanged();
			notifyObservers(new AddToList(e));	
		}
		return result;
	}

	public boolean remove(X e) {
		boolean result = inner.remove(e);
		if (result) {
			setChanged();
			notifyObservers(new RemoveFromList(e));
		}
		return result;
	}
}

Parametros para o SOOT -> Classe:ObservableSimpleList path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/util
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/util/ObservableSimpleList.java:48:
  Semantic Error: can not instantiate Unknown no matching constructor found in Unknown
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/util/ObservableSimpleList.java:57:
  Semantic Error: can not instantiate Unknown no matching constructor found in Unknown

Provided Class: ObservableSimpleList Dependence: AddToList

Provided Class: ObservableSimpleList Its Dependencies: AddToList - constant Required: AddToList

Provided Class: ObservableSimpleList Dependence: RemoveFromList

Provided Class: ObservableSimpleList Its Dependencies: RemoveFromList - constant Required: RemoveFromList

Provided Class: ObservableSimpleList Dependence: SimpleList

Provided Class: ObservableSimpleList Its Dependencies: SimpleList - constant Required: SimpleList

Provided Class: ObservableSimpleList Dependence: package org.softlang.util;


Class Name: ObservableSimpleList,  src\org\softlang\util\ObservableSimpleList.java

 Provided Classes:  [ ObservableSimpleList ] 

 Required Classes:  [ AddToList ]  [ SimpleList ]  [ RemoveFromList ] 

Class Content:
package org.softlang.util;

/**
 * This is a down-graded version of java.util.List.
 */
public interface SimpleList<X> extends Iterable<X> {
	boolean add(X x);
	boolean remove(X x);
}

Parametros para o SOOT -> Classe:SimpleList path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/util

Provided Class: SimpleList Dependence: package org.softlang.util;


Class Name: SimpleList,  src\org\softlang\util\SimpleList.java

 Provided Classes:  [ SimpleList ] 

 Required Classes: 

Class Content:
package org.softlang.util;

import java.util.Iterator;
import java.util.LinkedList;

/**
 * This is a down-graded version of java.util.LinkedList.
 */
public class SimpleLinkedList<X> implements SimpleList<X> {

	protected LinkedList<X> inner = 
		new LinkedList<X>();
		
	public Iterator<X> iterator() {
		return inner.iterator();
	}

	public boolean add(X x) {
		return inner.add(x);
	}

	public boolean remove(X x) {
		return inner.remove(x);
	}
}

Parametros para o SOOT -> Classe:SimpleLinkedList path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/util

Provided Class: SimpleLinkedList Dependence: SimpleList

Provided Class: SimpleLinkedList Its Dependencies: SimpleList - constant Required: SimpleList

Provided Class: SimpleLinkedList Dependence: package org.softlang.util;


Class Name: SimpleLinkedList,  src\org\softlang\util\SimpleLinkedList.java

 Provided Classes:  [ SimpleLinkedList ] 

 Required Classes:  [ SimpleList ] 

Class Content:
package org.softlang.util;

public class AddToList extends ChangeList {
	public AddToList(Object o) { this.element = o; }
}

Parametros para o SOOT -> Classe:AddToList path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/util
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/util/AddToList.java:4,36:
  Semantic Error: no field named element

Provided Class: AddToList Dependence: ChangeList

Provided Class: AddToList Its Dependencies: ChangeList - constant Required: ChangeList

Provided Class: AddToList Dependence: package org.softlang.util;


Class Name: AddToList,  src\org\softlang\util\AddToList.java

 Provided Classes:  [ AddToList ] 

 Required Classes:  [ ChangeList ] 

Class Content:
package org.softlang.util;

/**
 * Represent changes to observable lists
 */
public abstract class ChangeList {
	public Object element;
}

Parametros para o SOOT -> Classe:ChangeList path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/util

Provided Class: ChangeList Dependence: package org.softlang.util;


Class Name: ChangeList,  src\org\softlang\util\ChangeList.java

 Provided Classes:  [ ChangeList ] 

 Required Classes: 

Class Content:
package org.softlang.util;

public class RemoveFromList extends ChangeList {
	public RemoveFromList(Object o) { this.element = o; }
}

Parametros para o SOOT -> Classe:RemoveFromList path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/util
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/util/RemoveFromList.java:4,41:
  Semantic Error: no field named element

Provided Class: RemoveFromList Dependence: ChangeList

Provided Class: RemoveFromList Its Dependencies: ChangeList - constant Required: ChangeList

Provided Class: RemoveFromList Dependence: package org.softlang.util;


Class Name: RemoveFromList,  src\org\softlang\util\RemoveFromList.java

 Provided Classes:  [ RemoveFromList ] 

 Required Classes:  [ ChangeList ] 

Class Content:
package org.softlang.company.factory;

import org.softlang.company.*;
import org.softlang.company.impl.pojo.*;

/**
 * A factory that constructs POJPs
 */
public class PojoFactory implements Factory {
	public Company mkCompany() { return new CompanyImpl(); }
	public Department mkDepartment() { return new DepartmentImpl(); }
	public Employee mkEmployee() { return new EmployeeImpl(); }
}

Parametros para o SOOT -> Classe:PojoFactory path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/factory
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/factory/PojoFactory.java:4,8:
  Semantic Error: org.softlang.company.impl.pojo not found

Provided Class: PojoFactory Dependence: DepartmentImpl

Provided Class: PojoFactory Its Dependencies: DepartmentImpl - constant Required: DepartmentImplPojo

Provided Class: PojoFactory Dependence: EmployeeImpl

Provided Class: PojoFactory Its Dependencies: EmployeeImpl - constant Required: EmployeeImplPojo

Provided Class: PojoFactory Dependence: Factory

Provided Class: PojoFactory Its Dependencies: Factory - constant Required: Factory

Provided Class: PojoFactory Dependence: Department

Provided Class: PojoFactory Its Dependencies: Department - constant Required: Department

Provided Class: PojoFactory Dependence: Company

Provided Class: PojoFactory Its Dependencies: Company - constant Required: Company

Provided Class: PojoFactory Dependence: Employee

Provided Class: PojoFactory Its Dependencies: Employee - constant Required: Employee

Provided Class: PojoFactory Dependence: CompanyImpl

Provided Class: PojoFactory Its Dependencies: CompanyImpl - constant Required: CompanyImplBean

Provided Class: PojoFactory Dependence: package org.softlang.company.factory;


Class Name: PojoFactory, src\org\softlang\company\factory\PojoFactory.java

 Provided Classes:  [ PojoFactory ] 

 Required Classes:  [ EmployeeImplPojo ]  [ DepartmentImplPojo ]  [ CompanyImplBean ]  [ Factory ]  [ Company ]  [ Department ]  [ Employee ] 

Class Content:
package org.softlang.company.impl.pojo;

import org.softlang.company.*;
import org.softlang.visitor.*;

public class CompanyImpl extends ContainerImpl implements Company {

	/**
	 * Enforce the constraint a company can only aggregate departments
	 */
	public boolean add(Subunit u) {
		if (!(u instanceof Department))
			throw new IllegalArgumentException();
		return super.add(u);
	}
	
	public void accept(VoidVisitor v) {
		v.visit(this);
	}

	public <R> R accept(ReturningVisitor<R> v) {
		return v.visit(this);
	}	
}

Parametros para o SOOT -> Classe:CompanyImpl path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/pojo
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/pojo/CompanyImpl.java:4,8:
  Semantic Error: org.softlang.visitor not found
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/pojo/CompanyImpl.java:17:
  Semantic Error: method with signature accept(Unknown) is multiply declared in type org.softlang.company.impl.pojo.CompanyImpl

Provided Class: CompanyImplPojo Dependence: ReturningVisitor

Provided Class: CompanyImplPojo Its Dependencies: ReturningVisitor - constant Required: ReturningVisitor

Provided Class: CompanyImplPojo Dependence: VoidVisitor

Provided Class: CompanyImplPojo Its Dependencies: VoidVisitor - constant Required: VoidVisitor

Provided Class: CompanyImplPojo Dependence: ContainerImpl

Provided Class: CompanyImplPojo Its Dependencies: ContainerImpl - constant Required: ContainerImplPojo

Provided Class: CompanyImplPojo Dependence: Subunit

Provided Class: CompanyImplPojo Its Dependencies: Subunit - constant Required: Subunit

Provided Class: CompanyImplPojo Dependence: Department

Provided Class: CompanyImplPojo Its Dependencies: Department - constant Required: Department

Provided Class: CompanyImplPojo Dependence: Company

Provided Class: CompanyImplPojo Its Dependencies: Company - constant Required: Company

Provided Class: CompanyImplPojo Dependence: package org.softlang.company.impl.pojo;


Class Name: CompanyImplPojo, src\org\softlang\company\impl\pojo\CompanyImpl.java

 Provided Classes:  [ CompanyImplPojo ] 

 Required Classes:  [ ReturningVisitor ]  [ ContainerImplPojo ]  [ VoidVisitor ]  [ Subunit ]  [ Company ]  [ Department ] 

Class Content:
package org.softlang.company.impl.pojo;

import org.softlang.company.*;
import org.softlang.visitor.*;

public abstract class ComponentImpl implements Component {
	private String name;
	public String getName() { return name; }
	public void setName(String name) { this.name = name; }
	public abstract void accept(VoidVisitor v);
	public abstract <R> R accept(ReturningVisitor<R> v);
}

Parametros para o SOOT -> Classe:ComponentImpl path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/pojo
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/pojo/ComponentImpl.java:4,8:
  Semantic Error: org.softlang.visitor not found
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/pojo/ComponentImpl.java:10:
  Semantic Error: method with signature accept(Unknown) is multiply declared in type org.softlang.company.impl.pojo.ComponentImpl

Provided Class: ComponentImplPojo Dependence: ReturningVisitor

Provided Class: ComponentImplPojo Its Dependencies: ReturningVisitor - constant Required: ReturningVisitor

Provided Class: ComponentImplPojo Dependence: VoidVisitor

Provided Class: ComponentImplPojo Its Dependencies: VoidVisitor - constant Required: VoidVisitor

Provided Class: ComponentImplPojo Dependence: Component

Provided Class: ComponentImplPojo Its Dependencies: Component - constant Required: Component

Provided Class: ComponentImplPojo Dependence: package org.softlang.company.impl.pojo;


Class Name: ComponentImplPojo, src\org\softlang\company\impl\pojo\ComponentImpl.java

 Provided Classes:  [ ComponentImplPojo ] 

 Required Classes:  [ ReturningVisitor ]  [ VoidVisitor ]  [ Component ] 

Class Content:
package org.softlang.company.impl.pojo;

import org.softlang.company.*;
import java.util.LinkedList;
import java.util.List;

public abstract class ContainerImpl extends ComponentImpl implements Container {

	private List<Subunit> subunits =
		new LinkedList<Subunit>();
	
	public Iterable<? extends Subunit> subunits() {
		return subunits;
	}

	public boolean add(Subunit u) {
		return subunits.add(u);
	}

	public boolean remove(Subunit u) {
		return subunits.remove(u);
	}
}

Parametros para o SOOT -> Classe:ContainerImpl path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/pojo

Provided Class: ContainerImplPojo Dependence: ComponentImpl

Provided Class: ContainerImplPojo Its Dependencies: ComponentImpl - constant Required: ComponentImplPojo

Provided Class: ContainerImplPojo Dependence: Subunit

Provided Class: ContainerImplPojo Its Dependencies: Subunit - constant Required: Subunit

Provided Class: ContainerImplPojo Dependence: Container

Provided Class: ContainerImplPojo Its Dependencies: Container - constant Required: Container

Provided Class: ContainerImplPojo Dependence: package org.softlang.company.impl.pojo;


Class Name: ContainerImplPojo, src\org\softlang\company\impl\pojo\ContainerImpl.java

 Provided Classes:  [ ContainerImplPojo ] 

 Required Classes:  [ ComponentImplPojo ]  [ Subunit ]  [ Container ] 

Class Content:
package org.softlang.company.impl.pojo;

import org.softlang.company.*;
import org.softlang.visitor.*;

public class DepartmentImpl extends ContainerImpl implements Department {

	public Employee getManager() {
		for (Subunit u : subunits())
			if (u instanceof Employee) {
				Employee e = (Employee)u;
				if (e.getManager())
					return e;
			}
		return null;
	}	

	public void accept(VoidVisitor v) {
		v.visit(this);
	}

	public <R> R accept(ReturningVisitor<R> v) {
		return v.visit(this);
	}
}

Parametros para o SOOT -> Classe:DepartmentImpl path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/pojo
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/pojo/DepartmentImpl.java:4,8:
  Semantic Error: org.softlang.visitor not found
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/pojo/DepartmentImpl.java:9:
  Semantic Error: no method named subunits() in org.softlang.company.impl.pojo.DepartmentImpl matches.
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/pojo/DepartmentImpl.java:18:
  Semantic Error: method with signature accept(Unknown) is multiply declared in type org.softlang.company.impl.pojo.DepartmentImpl

Provided Class: DepartmentImplPojo Dependence: ReturningVisitor

Provided Class: DepartmentImplPojo Its Dependencies: ReturningVisitor - constant Required: ReturningVisitor

Provided Class: DepartmentImplPojo Dependence: VoidVisitor

Provided Class: DepartmentImplPojo Its Dependencies: VoidVisitor - constant Required: VoidVisitor

Provided Class: DepartmentImplPojo Dependence: ContainerImpl

Provided Class: DepartmentImplPojo Its Dependencies: ContainerImpl - constant Required: ContainerImplPojo

Provided Class: DepartmentImplPojo Dependence: Subunit

Provided Class: DepartmentImplPojo Its Dependencies: Subunit - constant Required: Subunit

Provided Class: DepartmentImplPojo Dependence: Department

Provided Class: DepartmentImplPojo Its Dependencies: Department - constant Required: Department

Provided Class: DepartmentImplPojo Dependence: Employee

Provided Class: DepartmentImplPojo Its Dependencies: Employee - constant Required: Employee

Provided Class: DepartmentImplPojo Dependence: package org.softlang.company.impl.pojo;


Class Name: DepartmentImplPojo, src\org\softlang\company\impl\pojo\DepartmentImpl.java

 Provided Classes:  [ DepartmentImplPojo ] 

 Required Classes:  [ ReturningVisitor ]  [ ContainerImplPojo ]  [ VoidVisitor ]  [ Subunit ]  [ Department ]  [ Employee ] 

Class Content:
package org.softlang.company.impl.pojo;

import org.softlang.company.*;
import org.softlang.visitor.*;

public class EmployeeImpl extends ComponentImpl implements Employee {

	private String address;
	private double salary;
	private boolean manager = false;

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	public double getSalary() {
		return salary;
	}

	public void setSalary(double salary) {
		this.salary = salary;
	}

	public boolean getManager() {
		return manager;
	}

	public void setManager(boolean manager) {
		this.manager = manager;
	}

	public void accept(VoidVisitor v) {
		v.visit(this);
	}

	public <R> R accept(ReturningVisitor<R> v) {
		return v.visit(this);
	}

	public String getCep() {
		return "cep";
	}
}

Parametros para o SOOT -> Classe:EmployeeImpl path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/pojo
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/pojo/EmployeeImpl.java:4,8:
  Semantic Error: org.softlang.visitor not found
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/company/impl/pojo/EmployeeImpl.java:36:
  Semantic Error: method with signature accept(Unknown) is multiply declared in type org.softlang.company.impl.pojo.EmployeeImpl

Provided Class: EmployeeImplPojo Dependence: ReturningVisitor

Provided Class: EmployeeImplPojo Its Dependencies: ReturningVisitor - constant Required: ReturningVisitor

Provided Class: EmployeeImplPojo Dependence: ComponentImpl

Provided Class: EmployeeImplPojo Its Dependencies: ComponentImpl - constant Required: ComponentImplPojo

Provided Class: EmployeeImplPojo Dependence: VoidVisitor

Provided Class: EmployeeImplPojo Its Dependencies: VoidVisitor - constant Required: VoidVisitor

Provided Class: EmployeeImplPojo Dependence: Employee

Provided Class: EmployeeImplPojo Its Dependencies: Employee - constant Required: Employee

Provided Class: EmployeeImplPojo Dependence: package org.softlang.company.impl.pojo;


Class Name: EmployeeImplPojo, src\org\softlang\company\impl\pojo\EmployeeImpl.java

 Provided Classes:  [ EmployeeImplPojo ] 

 Required Classes:  [ ComponentImplPojo ]  [ ReturningVisitor ]  [ VoidVisitor ]  [ Employee ] 

Class Content:
package org.softlang.main;

import org.softlang.company.Company;
import org.softlang.company.Department;
import org.softlang.company.Employee;
import org.softlang.company.factory.BeanFactory;
import org.softlang.company.factory.Factory;
import org.softlang.company.impl.bean.EmployeeImpl;

public class Main {
	
	    private Company sampleCompany;
	    private EmployeeImpl emp;
	    
	    public Main(){
	    	super();
	    	this.createSampleCompany(new BeanFactory());
	    }
	    
		public void createSampleCompany(Factory f) {
			// Create company
			this.sampleCompany = f.mkCompany();
			sampleCompany.setName("meganalysis");
			
			// Create all employees
			Employee craig = f.mkEmployee();
			craig.setName("Craig");
			craig.setAddress("Redmond");
			craig.setSalary(123456);
			craig.setManager(true);
	
			Employee erik = f.mkEmployee();
			erik.setName("Erik");
			erik.setAddress("Utrecht");
			erik.setSalary(12345);
	
			Employee ralf = f.mkEmployee();
			ralf.setName("Ralf");
			ralf.setAddress("Koblenz");
			ralf.setSalary(1234);		
	
			Employee ray = f.mkEmployee();
			ray.setName("Ray");
			ray.setAddress("Redmond");
			ray.setSalary(234567);
			ray.setManager(true);
	
			Employee klaus = f.mkEmployee();
			klaus.setName("Klaus");
			klaus.setAddress("Boston");
			klaus.setSalary(23456);
			klaus.setManager(true);
			
			Employee karl = f.mkEmployee();
			karl.setName("Karl");
			karl.setAddress("Riga");
			karl.setSalary(2345);
			karl.setManager(true);
			
			Employee joe = f.mkEmployee();
			joe.setName("Joe");
			joe.setAddress("Wifi City");
			joe.setSalary(2344);								
	
			// Create research department
			Department research = f.mkDepartment();
			research.setName("Research");
			research.add(craig);
			research.add(erik);
			research.add(ralf);
			sampleCompany.add(research);
	
			// Create development department
			Department development = f.mkDepartment();
			development.setName("Development");
			development.add(ray);
			sampleCompany.add(development);
	
			// Create sub-department dev1
			Department dev1 = f.mkDepartment();
			dev1.setName("Dev1");
			dev1.add(klaus);
			development.add(dev1);
	
			// Create sub-department dev11
			Department dev11 = f.mkDepartment();
			dev11.setName("Dev1.1");
			dev11.add(karl);
			dev11.add(joe);
			dev1.add(dev11);
	}
		
	public void setSalary(org.softlang.company.impl.bean.EmployeeImpl e, double salary){
		e.setSalary(salary);
	}
	
	public double getSalary(org.softlang.company.impl.bean.EmployeeImpl e){
		return e.getSalary();
	}
	
	public static void main(String[] args) {
		Main m = new Main();
		Company c = m.getSampleCompany();
		
	}

	
	
	
	
	/*.................... Getters and Setters */
	public Company getSampleCompany() {
		return sampleCompany;
	}
	public void setSampleCompany(Company sampleCompany) {
		this.sampleCompany = sampleCompany;
	}

	public EmployeeImpl getEmp() {
		return emp;
	}

	public void setEmp(EmployeeImpl emp) {
		this.emp = emp;
	}

}

Parametros para o SOOT -> Classe:Main path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02/src/org/softlang/main

Provided Class: Main Dependence: org.softlang.company.factory.Factory

Provided Class: Main Its Dependencies: org.softlang.company.factory.Factory - constant Required: Factory

Provided Class: Main Dependence: org.softlang.company.Company

Provided Class: Main Its Dependencies: org.softlang.company.Company - constant Required: Company

Provided Class: Main Dependence: org.softlang.company.factory.BeanFactory

Provided Class: Main Its Dependencies: org.softlang.company.factory.BeanFactory - constant Required: BeanFactory

Provided Class: Main Dependence: Factory

Provided Class: Main Its Dependencies: Factory - constant Required: Factory

Provided Class: Main Dependence: EmployeeImpl

Provided Class: Main Its Dependencies: EmployeeImpl - constant Required: EmployeeImplPojo

Provided Class: Main Dependence: org.softlang.company.impl.bean.EmployeeImpl

Provided Class: Main Its Dependencies: org.softlang.company.impl.bean.EmployeeImpl - constant Required: EmployeeImplBean

Provided Class: Main Dependence: Department

Provided Class: Main Its Dependencies: Department - constant Required: Department

Provided Class: Main Dependence: Company

Provided Class: Main Its Dependencies: Company - constant Required: Company

Provided Class: Main Dependence: org.softlang.company.Employee

Provided Class: Main Its Dependencies: org.softlang.company.Employee - constant Required: Employee

Provided Class: Main Dependence: Employee

Provided Class: Main Its Dependencies: Employee - constant Required: Employee

Provided Class: Main Dependence: BeanFactory

Provided Class: Main Its Dependencies: BeanFactory - constant Required: BeanFactory

Provided Class: Main Dependence: org.softlang.company.Department

Provided Class: Main Its Dependencies: org.softlang.company.Department - constant Required: Department

Provided Class: Main Dependence: package org.softlang.main;


Class Name: Main, src\org\softlang\main\Main.java

 Provided Classes:  [ Main ] 

 Required Classes:  [ EmployeeImplBean ]  [ EmployeeImplPojo ]  [ Factory ]  [ Department ]  [ Company ]  [ Employee ]  [ BeanFactory ] 


SOURCE PRODUCT LINE CONFIGURATION KNOWLEDGE:



SOURCE Configuration Knowledge Items:
Feature Expression: treestructure
Provided: {Subunit=src\org\softlang\company\Subunit.java}
Required: [Component]

Feature Expression: treestructure
Provided: {ComponentImplPojo=src\org\softlang\company\impl\pojo\ComponentImpl.java}
Required: [ReturningVisitor, VoidVisitor, Component]

Feature Expression: treestructure
Provided: {EmployeeImplBean=src\org\softlang\company\impl\bean\EmployeeImpl.java}
Required: [ComponentImplPojo, ReturningVisitor, VoidVisitor, Employee]

Feature Expression: treestructure
Provided: {Company=src\org\softlang\company\Company.java}
Required: [Container]

Feature Expression: treestructure
Provided: {ReturningVisitor=src\org\softlang\visitor\ReturningVisitor.java}
Required: [Company, Department, Employee]

Feature Expression: treestructure
Provided: {DepartmentImplBean=src\org\softlang\company\impl\bean\DepartmentImpl.java}
Required: [ReturningVisitor, ContainerImplPojo, VoidVisitor, Subunit, Department, Employee]

Feature Expression: treestructure
Provided: {DepartmentImplPojo=src\org\softlang\company\impl\pojo\DepartmentImpl.java}
Required: [ReturningVisitor, ContainerImplPojo, VoidVisitor, Subunit, Department, Employee]

Feature Expression: treestructure
Provided: {ComponentImplBean=src\org\softlang\company\impl\bean\ComponentImpl.java}
Required: [ReturningVisitor, VoidVisitor, Component]

Feature Expression: treestructure
Provided: {Component=src\org\softlang\company\Component.java}
Required: [ReturningVisitor, VoidVisitor]

Feature Expression: treestructure
Provided: {PojoFactory=src\org\softlang\company\factory\PojoFactory.java}
Required: [EmployeeImplPojo, DepartmentImplPojo, CompanyImplBean, Factory, Company, Department, Employee]

Feature Expression: treestructure
Provided: {BeanFactory=src\org\softlang\company\factory\BeanFactory.java}
Required: [EmployeeImplPojo, DepartmentImplPojo, CompanyImplBean, Factory, Company, Department, Employee]

Feature Expression: treestructure
Provided: {AddToList=src\org\softlang\util\AddToList.java}
Required: [ChangeList]

Feature Expression: treestructure
Provided: {Factory=src\org\softlang\company\factory\Factory.java}
Required: [Department, Company, Employee]

Feature Expression: treestructure
Provided: {ChangeList=src\org\softlang\util\ChangeList.java}
Required: []

Feature Expression: javaexorcismspl
Provided: {Basics=src\org\softlang\tests\Basics.java}
Required: [Factory, Department, Company, Employee]

Feature Expression: treestructure
Provided: {Container=src\org\softlang\company\Container.java}
Required: [Subunit, Component]

Feature Expression: treestructure
Provided: {EmployeeImplPojo=src\org\softlang\company\impl\pojo\EmployeeImpl.java}
Required: [ComponentImplPojo, ReturningVisitor, VoidVisitor, Employee]

Feature Expression: treestructure
Provided: {SimpleLinkedList=src\org\softlang\util\SimpleLinkedList.java}
Required: [SimpleList]

Feature Expression: javaexorcismspl
Provided: {Junit=lib\Junit.jar}
Required: []

Feature Expression: treestructure
Provided: {ContainerImplBean=src\org\softlang\company\impl\bean\ContainerImpl.java}
Required: [ComponentImplPojo, ObservableSimpleList, Subunit, SimpleLinkedList, Container]

Feature Expression: treestructure
Provided: {ObservableSimpleList=src\org\softlang\util\ObservableSimpleList.java}
Required: [AddToList, SimpleList, RemoveFromList]

Feature Expression: treestructure
Provided: {CompanyImplPojo=src\org\softlang\company\impl\pojo\CompanyImpl.java}
Required: [ReturningVisitor, ContainerImplPojo, VoidVisitor, Subunit, Company, Department]

Feature Expression: treestructure
Provided: {Employee=src\org\softlang\company\Employee.java}
Required: [Subunit]

Feature Expression: treestructure
Provided: {Main=src\org\softlang\main\Main.java}
Required: [EmployeeImplBean, EmployeeImplPojo, Factory, Department, Company, Employee, BeanFactory]

Feature Expression: treestructure
Provided: {Department=src\org\softlang\company\Department.java}
Required: [Subunit, Employee, Container]

Feature Expression: treestructure
Provided: {VoidVisitor=src\org\softlang\visitor\VoidVisitor.java}
Required: [Company, Department, Employee]

Feature Expression: treestructure
Provided: {ContainerImplPojo=src\org\softlang\company\impl\pojo\ContainerImpl.java}
Required: [ComponentImplPojo, Subunit, Container]

Feature Expression: treestructure
Provided: {SimpleList=src\org\softlang\util\SimpleList.java}
Required: []

Feature Expression: treestructure
Provided: {Build=build.xml}
Required: []

Feature Expression: treestructure
Provided: {RemoveFromList=src\org\softlang\util\RemoveFromList.java}
Required: [ChangeList]

Feature Expression: treestructure
Provided: {CompanyImplBean=src\org\softlang\company\impl\bean\CompanyImpl.java}
Required: [ReturningVisitor, ContainerImplPojo, VoidVisitor, Company]




SOURCE PRODUCT LINE PRE-PROCESS PROPERTIES:




SOURCE PRODUCT LINE PRE-PROCESS FILES:



File To PreProcess:





		Let's check if the SPL is well formed.


Build the SOURCE Feature Model Alloy file:
source Set OF Features: 

SOURCE Features: 

Feature: javaexorcismspl

Feature: treestructure

SOURCE FM Semantics: pred semanticasource[] { 
isTrue[javaexorcismspl] and ( isTrue[treestructure] <=> isTrue[javaexorcismspl] )
 }

 Alloy File has been created. Check it out in < Tool Path + Alloy + Alloy File >


Build the TARGET Feature Model Alloy file:
target Set OF Features: 

TARGET Features: 

Feature: javaexorcismspl

Feature: logging

Feature: treestructure

TARGET FM Semantics: pred semanticatarget[] { 
isTrue[javaexorcismspl] and ( isTrue[treestructure] <=> isTrue[javaexorcismspl] ) and ( isTrue[logging] => isTrue[javaexorcismspl] )
 }

 Alloy File has been created. Check it out in < Tool Path + Alloy + Alloy File >


Build the SOURCE Configuration Knowledge Alloy file:

source Configuration Knowledge Items:
Feature Expression: treestructure
Provided: {Subunit=src\org\softlang\company\Subunit.java}
Required: [Component]

Feature Expression: treestructure
Provided: {ComponentImplPojo=src\org\softlang\company\impl\pojo\ComponentImpl.java}
Required: [ReturningVisitor, VoidVisitor, Component]

Feature Expression: treestructure
Provided: {EmployeeImplBean=src\org\softlang\company\impl\bean\EmployeeImpl.java}
Required: [ComponentImplPojo, ReturningVisitor, VoidVisitor, Employee]

Feature Expression: treestructure
Provided: {Company=src\org\softlang\company\Company.java}
Required: [Container]

Feature Expression: treestructure
Provided: {ReturningVisitor=src\org\softlang\visitor\ReturningVisitor.java}
Required: [Company, Department, Employee]

Feature Expression: treestructure
Provided: {DepartmentImplBean=src\org\softlang\company\impl\bean\DepartmentImpl.java}
Required: [ReturningVisitor, ContainerImplPojo, VoidVisitor, Subunit, Department, Employee]

Feature Expression: treestructure
Provided: {DepartmentImplPojo=src\org\softlang\company\impl\pojo\DepartmentImpl.java}
Required: [ReturningVisitor, ContainerImplPojo, VoidVisitor, Subunit, Department, Employee]

Feature Expression: treestructure
Provided: {ComponentImplBean=src\org\softlang\company\impl\bean\ComponentImpl.java}
Required: [ReturningVisitor, VoidVisitor, Component]

Feature Expression: treestructure
Provided: {Component=src\org\softlang\company\Component.java}
Required: [ReturningVisitor, VoidVisitor]

Feature Expression: treestructure
Provided: {PojoFactory=src\org\softlang\company\factory\PojoFactory.java}
Required: [EmployeeImplPojo, DepartmentImplPojo, CompanyImplBean, Factory, Company, Department, Employee]

Feature Expression: treestructure
Provided: {BeanFactory=src\org\softlang\company\factory\BeanFactory.java}
Required: [EmployeeImplPojo, DepartmentImplPojo, CompanyImplBean, Factory, Company, Department, Employee]

Feature Expression: treestructure
Provided: {AddToList=src\org\softlang\util\AddToList.java}
Required: [ChangeList]

Feature Expression: treestructure
Provided: {Factory=src\org\softlang\company\factory\Factory.java}
Required: [Department, Company, Employee]

Feature Expression: treestructure
Provided: {ChangeList=src\org\softlang\util\ChangeList.java}
Required: []

Feature Expression: javaexorcismspl
Provided: {Basics=src\org\softlang\tests\Basics.java}
Required: [Factory, Department, Company, Employee]

Feature Expression: treestructure
Provided: {Container=src\org\softlang\company\Container.java}
Required: [Subunit, Component]

Feature Expression: treestructure
Provided: {EmployeeImplPojo=src\org\softlang\company\impl\pojo\EmployeeImpl.java}
Required: [ComponentImplPojo, ReturningVisitor, VoidVisitor, Employee]

Feature Expression: treestructure
Provided: {SimpleLinkedList=src\org\softlang\util\SimpleLinkedList.java}
Required: [SimpleList]

Feature Expression: javaexorcismspl
Provided: {Junit=lib\Junit.jar}
Required: []

Feature Expression: treestructure
Provided: {ContainerImplBean=src\org\softlang\company\impl\bean\ContainerImpl.java}
Required: [ComponentImplPojo, ObservableSimpleList, Subunit, SimpleLinkedList, Container]

Feature Expression: treestructure
Provided: {ObservableSimpleList=src\org\softlang\util\ObservableSimpleList.java}
Required: [AddToList, SimpleList, RemoveFromList]

Feature Expression: treestructure
Provided: {CompanyImplPojo=src\org\softlang\company\impl\pojo\CompanyImpl.java}
Required: [ReturningVisitor, ContainerImplPojo, VoidVisitor, Subunit, Company, Department]

Feature Expression: treestructure
Provided: {Employee=src\org\softlang\company\Employee.java}
Required: [Subunit]

Feature Expression: treestructure
Provided: {Main=src\org\softlang\main\Main.java}
Required: [EmployeeImplBean, EmployeeImplPojo, Factory, Department, Company, Employee, BeanFactory]

Feature Expression: treestructure
Provided: {Department=src\org\softlang\company\Department.java}
Required: [Subunit, Employee, Container]

Feature Expression: treestructure
Provided: {VoidVisitor=src\org\softlang\visitor\VoidVisitor.java}
Required: [Company, Department, Employee]

Feature Expression: treestructure
Provided: {ContainerImplPojo=src\org\softlang\company\impl\pojo\ContainerImpl.java}
Required: [ComponentImplPojo, Subunit, Container]

Feature Expression: treestructure
Provided: {SimpleList=src\org\softlang\util\SimpleList.java}
Required: []

Feature Expression: treestructure
Provided: {Build=build.xml}
Required: []

Feature Expression: treestructure
Provided: {RemoveFromList=src\org\softlang\util\RemoveFromList.java}
Required: [ChangeList]

Feature Expression: treestructure
Provided: {CompanyImplBean=src\org\softlang\company\impl\bean\CompanyImpl.java}
Required: [ReturningVisitor, ContainerImplPojo, VoidVisitor, Company]


Alloy File Content: open default
 pred provided[] { 
( isTrue[treestructure] => (isTrue[Subunit]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo]) )
( isTrue[treestructure] => (isTrue[EmployeeImplBean]) )
( isTrue[treestructure] => (isTrue[Company]) )
( isTrue[treestructure] => (isTrue[ReturningVisitor]) )
( isTrue[treestructure] => (isTrue[DepartmentImplBean]) )
( isTrue[treestructure] => (isTrue[DepartmentImplPojo]) )
( isTrue[treestructure] => (isTrue[ComponentImplBean]) )
( isTrue[treestructure] => (isTrue[Component]) )
( isTrue[treestructure] => (isTrue[PojoFactory]) )
( isTrue[treestructure] => (isTrue[BeanFactory]) )
( isTrue[treestructure] => (isTrue[AddToList]) )
( isTrue[treestructure] => (isTrue[Factory]) )
( isTrue[treestructure] => (isTrue[ChangeList]) )
( isTrue[javaexorcismspl] => (isTrue[Basics]) )
( isTrue[treestructure] => (isTrue[Container]) )
( isTrue[treestructure] => (isTrue[EmployeeImplPojo]) )
( isTrue[treestructure] => (isTrue[SimpleLinkedList]) )
( isTrue[javaexorcismspl] => (isTrue[Junit]) )
( isTrue[treestructure] => (isTrue[ContainerImplBean]) )
( isTrue[treestructure] => (isTrue[ObservableSimpleList]) )
( isTrue[treestructure] => (isTrue[CompanyImplPojo]) )
( isTrue[treestructure] => (isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[Main]) )
( isTrue[treestructure] => (isTrue[Department]) )
( isTrue[treestructure] => (isTrue[VoidVisitor]) )
( isTrue[treestructure] => (isTrue[ContainerImplPojo]) )
( isTrue[treestructure] => (isTrue[SimpleList]) )
( isTrue[treestructure] => (isTrue[Build]) )
( isTrue[treestructure] => (isTrue[RemoveFromList]) )
( isTrue[treestructure] => (isTrue[CompanyImplBean]) )
 }

 pred required[] { 
( isTrue[treestructure] => (isTrue[Component]) )
( isTrue[treestructure] => (isTrue[ReturningVisitor] and isTrue[VoidVisitor] and isTrue[Component]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo] and isTrue[ReturningVisitor] and isTrue[VoidVisitor] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[Container]) )
( isTrue[treestructure] => (isTrue[Company] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[ReturningVisitor] and isTrue[ContainerImplPojo] and isTrue[VoidVisitor] and isTrue[Subunit] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[ReturningVisitor] and isTrue[ContainerImplPojo] and isTrue[VoidVisitor] and isTrue[Subunit] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[ReturningVisitor] and isTrue[VoidVisitor] and isTrue[Component]) )
( isTrue[treestructure] => (isTrue[ReturningVisitor] and isTrue[VoidVisitor]) )
( isTrue[treestructure] => (isTrue[EmployeeImplPojo] and isTrue[DepartmentImplPojo] and isTrue[CompanyImplBean] and isTrue[Factory] and isTrue[Company] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[EmployeeImplPojo] and isTrue[DepartmentImplPojo] and isTrue[CompanyImplBean] and isTrue[Factory] and isTrue[Company] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[ChangeList]) )
( isTrue[treestructure] => (isTrue[Department] and isTrue[Company] and isTrue[Employee]) )
( isTrue[javaexorcismspl] => (isTrue[Factory] and isTrue[Department] and isTrue[Company] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[Subunit] and isTrue[Component]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo] and isTrue[ReturningVisitor] and isTrue[VoidVisitor] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[SimpleList]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo] and isTrue[ObservableSimpleList] and isTrue[Subunit] and isTrue[SimpleLinkedList] and isTrue[Container]) )
( isTrue[treestructure] => (isTrue[AddToList] and isTrue[SimpleList] and isTrue[RemoveFromList]) )
( isTrue[treestructure] => (isTrue[ReturningVisitor] and isTrue[ContainerImplPojo] and isTrue[VoidVisitor] and isTrue[Subunit] and isTrue[Company] and isTrue[Department]) )
( isTrue[treestructure] => (isTrue[Subunit]) )
( isTrue[treestructure] => (isTrue[EmployeeImplBean] and isTrue[EmployeeImplPojo] and isTrue[Factory] and isTrue[Department] and isTrue[Company] and isTrue[Employee] and isTrue[BeanFactory]) )
( isTrue[treestructure] => (isTrue[Subunit] and isTrue[Employee] and isTrue[Container]) )
( isTrue[treestructure] => (isTrue[Company] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo] and isTrue[Subunit] and isTrue[Container]) )
( isTrue[treestructure] => (isTrue[ChangeList]) )
( isTrue[treestructure] => (isTrue[ReturningVisitor] and isTrue[ContainerImplPojo] and isTrue[VoidVisitor] and isTrue[Company]) )
 }

 pred semanticaCK[] { provided[] => required[] }


Correct Set of Features:

Feature: javaexorcismspl

Feature: treestructure

Including CK Signatures in Correct Set

Signature: ReturningVisitor

Signature: Basics

Signature: Subunit

Signature: RemoveFromList

Signature: ComponentImplPojo

Signature: Junit

Signature: PojoFactory

Signature: Main

Signature: EmployeeImplPojo

Signature: VoidVisitor

Signature: Build

Signature: ChangeList

Signature: Component

Signature: Department

Signature: Company

Signature: SimpleList

Signature: SimpleLinkedList

Signature: Container

Signature: EmployeeImplBean

Signature: javaexorcismspl

Signature: ContainerImplPojo

Signature: ObservableSimpleList

Signature: ComponentImplBean

Signature: CompanyImplBean

Signature: Factory

Signature: Employee

Signature: ContainerImplBean

Signature: AddToList

Signature: CompanyImplPojo

Signature: DepartmentImplBean

Signature: DepartmentImplPojo

Signature: treestructure

Signature: BeanFactory

Correct Ser Filled:

Correct Item: ReturningVisitor

Correct Item: Basics

Correct Item: Subunit

Correct Item: RemoveFromList

Correct Item: ComponentImplPojo

Correct Item: PojoFactory

Correct Item: Junit

Correct Item: Main

Correct Item: EmployeeImplPojo

Correct Item: VoidVisitor

Correct Item: Build

Correct Item: ChangeList

Correct Item: Component

Correct Item: Department

Correct Item: Company

Correct Item: SimpleList

Correct Item: SimpleLinkedList

Correct Item: Container

Correct Item: javaexorcismspl

Correct Item: EmployeeImplBean

Correct Item: ContainerImplPojo

Correct Item: ObservableSimpleList

Correct Item: ComponentImplBean

Correct Item: CompanyImplBean

Correct Item: Factory

Correct Item: Employee

Correct Item: ContainerImplBean

Correct Item: AddToList

Correct Item: DepartmentImplPojo

Correct Item: DepartmentImplBean

Correct Item: CompanyImplPojo

Correct Item: BeanFactory

Correct Item: treestructure

Create Alloy CK File:
File Name: /home/jefferson/workspace/ferramentaLPSSM/Alloy/sourceCKAlloy.als
Content: module sourceCKAlloy
open default
 pred provided[] { 
( isTrue[treestructure] => (isTrue[Subunit]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo]) )
( isTrue[treestructure] => (isTrue[EmployeeImplBean]) )
( isTrue[treestructure] => (isTrue[Company]) )
( isTrue[treestructure] => (isTrue[ReturningVisitor]) )
( isTrue[treestructure] => (isTrue[DepartmentImplBean]) )
( isTrue[treestructure] => (isTrue[DepartmentImplPojo]) )
( isTrue[treestructure] => (isTrue[ComponentImplBean]) )
( isTrue[treestructure] => (isTrue[Component]) )
( isTrue[treestructure] => (isTrue[PojoFactory]) )
( isTrue[treestructure] => (isTrue[BeanFactory]) )
( isTrue[treestructure] => (isTrue[AddToList]) )
( isTrue[treestructure] => (isTrue[Factory]) )
( isTrue[treestructure] => (isTrue[ChangeList]) )
( isTrue[javaexorcismspl] => (isTrue[Basics]) )
( isTrue[treestructure] => (isTrue[Container]) )
( isTrue[treestructure] => (isTrue[EmployeeImplPojo]) )
( isTrue[treestructure] => (isTrue[SimpleLinkedList]) )
( isTrue[javaexorcismspl] => (isTrue[Junit]) )
( isTrue[treestructure] => (isTrue[ContainerImplBean]) )
( isTrue[treestructure] => (isTrue[ObservableSimpleList]) )
( isTrue[treestructure] => (isTrue[CompanyImplPojo]) )
( isTrue[treestructure] => (isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[Main]) )
( isTrue[treestructure] => (isTrue[Department]) )
( isTrue[treestructure] => (isTrue[VoidVisitor]) )
( isTrue[treestructure] => (isTrue[ContainerImplPojo]) )
( isTrue[treestructure] => (isTrue[SimpleList]) )
( isTrue[treestructure] => (isTrue[Build]) )
( isTrue[treestructure] => (isTrue[RemoveFromList]) )
( isTrue[treestructure] => (isTrue[CompanyImplBean]) )
 }

 pred required[] { 
( isTrue[treestructure] => (isTrue[Component]) )
( isTrue[treestructure] => (isTrue[ReturningVisitor] and isTrue[VoidVisitor] and isTrue[Component]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo] and isTrue[ReturningVisitor] and isTrue[VoidVisitor] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[Container]) )
( isTrue[treestructure] => (isTrue[Company] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[ReturningVisitor] and isTrue[ContainerImplPojo] and isTrue[VoidVisitor] and isTrue[Subunit] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[ReturningVisitor] and isTrue[ContainerImplPojo] and isTrue[VoidVisitor] and isTrue[Subunit] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[ReturningVisitor] and isTrue[VoidVisitor] and isTrue[Component]) )
( isTrue[treestructure] => (isTrue[ReturningVisitor] and isTrue[VoidVisitor]) )
( isTrue[treestructure] => (isTrue[EmployeeImplPojo] and isTrue[DepartmentImplPojo] and isTrue[CompanyImplBean] and isTrue[Factory] and isTrue[Company] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[EmployeeImplPojo] and isTrue[DepartmentImplPojo] and isTrue[CompanyImplBean] and isTrue[Factory] and isTrue[Company] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[ChangeList]) )
( isTrue[treestructure] => (isTrue[Department] and isTrue[Company] and isTrue[Employee]) )
( isTrue[javaexorcismspl] => (isTrue[Factory] and isTrue[Department] and isTrue[Company] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[Subunit] and isTrue[Component]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo] and isTrue[ReturningVisitor] and isTrue[VoidVisitor] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[SimpleList]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo] and isTrue[ObservableSimpleList] and isTrue[Subunit] and isTrue[SimpleLinkedList] and isTrue[Container]) )
( isTrue[treestructure] => (isTrue[AddToList] and isTrue[SimpleList] and isTrue[RemoveFromList]) )
( isTrue[treestructure] => (isTrue[ReturningVisitor] and isTrue[ContainerImplPojo] and isTrue[VoidVisitor] and isTrue[Subunit] and isTrue[Company] and isTrue[Department]) )
( isTrue[treestructure] => (isTrue[Subunit]) )
( isTrue[treestructure] => (isTrue[EmployeeImplBean] and isTrue[EmployeeImplPojo] and isTrue[Factory] and isTrue[Department] and isTrue[Company] and isTrue[Employee] and isTrue[BeanFactory]) )
( isTrue[treestructure] => (isTrue[Subunit] and isTrue[Employee] and isTrue[Container]) )
( isTrue[treestructure] => (isTrue[Company] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo] and isTrue[Subunit] and isTrue[Container]) )
( isTrue[treestructure] => (isTrue[ChangeList]) )
( isTrue[treestructure] => (isTrue[ReturningVisitor] and isTrue[ContainerImplPojo] and isTrue[VoidVisitor] and isTrue[Company]) )
 }

 pred semanticaCK[] { provided[] => required[] }
one sig ReturningVisitor, Basics, Subunit, RemoveFromList, ComponentImplPojo, PojoFactory, Junit, Main, EmployeeImplPojo, VoidVisitor, Build, ChangeList, Component, Department, Company, SimpleList, SimpleLinkedList, Container, javaexorcismspl, EmployeeImplBean, ContainerImplPojo, ObservableSimpleList, ComponentImplBean, CompanyImplBean, Factory, Employee, ContainerImplBean, AddToList, DepartmentImplPojo, DepartmentImplBean, CompanyImplPojo, BeanFactory, treestructure in Bool{}

pred semanticasource[] { 
isTrue[javaexorcismspl] and ( isTrue[treestructure] <=> isTrue[javaexorcismspl] )
 }
assert WT {semanticasource[] => semanticaCK[]}
check WT for 2

Build the TARGET Configuration Knowledge Alloy file:

Class Content:
package org.softlang.tests;

import org.junit.Test;
import org.softlang.company.Company;
import org.softlang.company.Department;
import org.softlang.company.Employee;
import org.softlang.company.factory.Factory;

/**
 * Test/demonstrate basic operations for totaling and cutting salaries.
 */
public class Basics {
	
	static Company createSampleCompany(Factory f) {
		
		// Create company
		Company sampleCompany = f.mkCompany();
		sampleCompany.setName("meganalysis");
		
		// Create all employees
		Employee craig = f.mkEmployee();
		craig.setName("Craig");
		craig.setAddress("Redmond");
		craig.setSalary(123456);
		craig.setManager(true);

		Employee erik = f.mkEmployee();
		erik.setName("Erik");
		erik.setAddress("Utrecht");
		erik.setSalary(12345);

		Employee ralf = f.mkEmployee();
		ralf.setName("Ralf");
		ralf.setAddress("Koblenz");
		ralf.setSalary(1234);		

		Employee ray = f.mkEmployee();
		ray.setName("Ray");
		ray.setAddress("Redmond");
		ray.setSalary(234567);
		ray.setManager(true);

		Employee klaus = f.mkEmployee();
		klaus.setName("Klaus");
		klaus.setAddress("Boston");
		klaus.setSalary(23456);
		klaus.setManager(true);
		
		Employee karl = f.mkEmployee();
		karl.setName("Karl");
		karl.setAddress("Riga");
		karl.setSalary(2345);
		karl.setManager(true);
		
		Employee joe = f.mkEmployee();
		joe.setName("Joe");
		joe.setAddress("Wifi City");
		joe.setSalary(2344);								

		// Create research department
		Department research = f.mkDepartment();
		research.setName("Research");
		research.add(craig);
		research.add(erik);
		research.add(ralf);
		sampleCompany.add(research);

		// Create development department
		Department development = f.mkDepartment();
		development.setName("Development");
		development.add(ray);
		sampleCompany.add(development);

		// Create sub-department dev1
		Department dev1 = f.mkDepartment();
		dev1.setName("Dev1");
		dev1.add(klaus);
		development.add(dev1);

		// Create sub-department dev11
		Department dev11 = f.mkDepartment();
		dev11.setName("Dev1.1");
		dev11.add(karl);
		dev11.add(joe);
		dev1.add(dev11);
		
		return sampleCompany;
	}
	
	@Test
	public void test() {
	}
}

Parametros para o SOOT -> Classe:Basics path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/tests

Provided Class: Basics Dependence: Test

Provided Class: Basics Dependence: org.softlang.company.factory.Factory

Provided Class: Basics Its Dependencies: org.softlang.company.factory.Factory - constant Required: Factory

Provided Class: Basics Dependence: org.softlang.company.Company

Provided Class: Basics Its Dependencies: org.softlang.company.Company - constant Required: Company

Provided Class: Basics Dependence: Factory

Provided Class: Basics Its Dependencies: Factory - constant Required: Factory

Provided Class: Basics Dependence: Department

Provided Class: Basics Its Dependencies: Department - constant Required: Department

Provided Class: Basics Dependence: Company

Provided Class: Basics Its Dependencies: Company - constant Required: Company

Provided Class: Basics Dependence: org.softlang.company.Employee

Provided Class: Basics Its Dependencies: org.softlang.company.Employee - constant Required: Employee

Provided Class: Basics Dependence: Employee

Provided Class: Basics Its Dependencies: Employee - constant Required: Employee

Provided Class: Basics Dependence: org.junit.Test

Provided Class: Basics Dependence: org.softlang.company.Department

Provided Class: Basics Its Dependencies: org.softlang.company.Department - constant Required: Department

Provided Class: Basics Dependence: package org.softlang.tests;


Class Name: Basics,  src\org\softlang\tests\Basics.java

 Provided Classes:  [ Basics ] 

 Required Classes:  [ Factory ]  [ Department ]  [ Company ]  [ Employee ] 


Class Name: Junit, lib\Junit.jar

 Provided Classes:  [ Junit ] 

 Required Classes: 


Class Name: Build, build.xml

 Provided Classes:  [ Build ] 

 Required Classes: 

Class Content:
package org.softlang.company;


/**
 * A company has a name and consists of (possibly nested) departments.
 * This is sufficiently covered by the Container interface.
 * Hence, the present interface is essentially a marker.
 */


public interface Company extends Container {	
	
}

Parametros para o SOOT -> Classe:Company path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company

Provided Class: Company Dependence: Container

Provided Class: Company Its Dependencies: Container - constant Required: Container

Provided Class: Company Dependence: package org.softlang.company;


Class Name: Company,  src\org\softlang\company\Company.java

 Provided Classes:  [ Company ] 

 Required Classes:  [ Container ] 

Class Content:
package org.softlang.company;

/**
 * The root class of the object model for companies.
 * All objects in a company have a name.
 * There is also general visitor support.
 */
public interface Component{
	
	String getName();
	void setName(String name);
	
}

Parametros para o SOOT -> Classe:Component path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company

Provided Class: Component Dependence: package org.softlang.company;


Class Name: Component, src\org\softlang\company\Component.java

 Provided Classes:  [ Component ] 

 Required Classes: 

Class Content:
package org.softlang.company;

/**
 * An interface for all composites in an company object structure.
 * Containers are supposed to aggregate sub-units.
 */
public interface Container extends Component {
	Iterable<? extends Subunit> subunits();
	boolean add(Subunit u);
	boolean remove(Subunit u);
}

Parametros para o SOOT -> Classe:Container path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company

Provided Class: Container Dependence: Subunit

Provided Class: Container Its Dependencies: Subunit - constant Required: Subunit

Provided Class: Container Dependence: Component

Provided Class: Container Its Dependencies: Component - constant Required: Component

Provided Class: Container Dependence: package org.softlang.company;


Class Name: Container, src\org\softlang\company\Container.java

 Provided Classes:  [ Container ] 

 Required Classes:  [ Subunit ]  [ Component ] 

Class Content:
package org.softlang.company;


/**
 * A department has a name, employees, and sub-departments.
 * One of the employees is supposed to be the manager.
 * We add a getter for the manager for convenience's sake.
 */
public interface Department extends Subunit, Container {
	Employee getManager();
}

Parametros para o SOOT -> Classe:Department path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company

Provided Class: Department Dependence: Subunit

Provided Class: Department Its Dependencies: Subunit - constant Required: Subunit

Provided Class: Department Dependence: Employee

Provided Class: Department Its Dependencies: Employee - constant Required: Employee

Provided Class: Department Dependence: Container

Provided Class: Department Its Dependencies: Container - constant Required: Container

Provided Class: Department Dependence: package org.softlang.company;


Class Name: Department, src\org\softlang\company\Department.java

 Provided Classes:  [ Department ] 

 Required Classes:  [ Subunit ]  [ Employee ]  [ Container ] 

Class Content:
package org.softlang.company;

/**
 * An employee has a name, an address, and a salary. 
 * Also, an employee may be flagged to be a manager.
 */
public interface Employee extends Subunit {
	String getAddress();
	void setAddress(String address);
	double getSalary();
	void setSalary(double salary);
	boolean getManager();
	void setManager(boolean manager);
	
	String getCep();
}

Parametros para o SOOT -> Classe:Employee path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company

Provided Class: Employee Dependence: Subunit

Provided Class: Employee Its Dependencies: Subunit - constant Required: Subunit

Provided Class: Employee Dependence: package org.softlang.company;


Class Name: Employee,  src\org\softlang\company\Employee.java

 Provided Classes:  [ Employee ] 

 Required Classes:  [ Subunit ] 

Class Content:
package org.softlang.company;

/**
 * A subunit is either an employee unit or a department unit.
 * The interface is only needed as a common base type.
 * That is, no members are added here to Component.
 */
public interface Subunit extends Component { }

Parametros para o SOOT -> Classe:Subunit path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company

Provided Class: Subunit Dependence: Component

Provided Class: Subunit Its Dependencies: Component - constant Required: Component

Provided Class: Subunit Dependence: package org.softlang.company;


Class Name: Subunit,  src\org\softlang\company\Subunit.java

 Provided Classes:  [ Subunit ] 

 Required Classes:  [ Component ] 

Class Content:
package org.softlang.company.factory;

import org.softlang.company.*;
import org.softlang.company.impl.bean.*;

/**
 * A factory that constructs (a kind of) "beans" as opposed to POJPs
 */
public class BeanFactory implements Factory {
	public Company mkCompany() { return new CompanyImpl(); }
	public Department mkDepartment() { return new DepartmentImpl(); }
	public Employee mkEmployee() { return new EmployeeImpl(); }
}

Parametros para o SOOT -> Classe:BeanFactory path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/factory
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/factory/BeanFactory.java:4,8:
  Semantic Error: org.softlang.company.impl.bean not found

Provided Class: BeanFactory Dependence: DepartmentImpl

Provided Class: BeanFactory Its Dependencies: DepartmentImpl - constant Required: DepartmentImplPojo

Provided Class: BeanFactory Dependence: EmployeeImpl

Provided Class: BeanFactory Its Dependencies: EmployeeImpl - constant Required: EmployeeImplPojo

Provided Class: BeanFactory Dependence: Factory

Provided Class: BeanFactory Its Dependencies: Factory - constant Required: Factory

Provided Class: BeanFactory Dependence: Department

Provided Class: BeanFactory Its Dependencies: Department - constant Required: Department

Provided Class: BeanFactory Dependence: Company

Provided Class: BeanFactory Its Dependencies: Company - constant Required: Company

Provided Class: BeanFactory Dependence: Employee

Provided Class: BeanFactory Its Dependencies: Employee - constant Required: Employee

Provided Class: BeanFactory Dependence: CompanyImpl

Provided Class: BeanFactory Its Dependencies: CompanyImpl - constant Required: CompanyImplBean

Provided Class: BeanFactory Dependence: package org.softlang.company.factory;


Class Name: BeanFactory,  src\org\softlang\company\factory\BeanFactory.java

 Provided Classes:  [ BeanFactory ] 

 Required Classes:  [ EmployeeImplPojo ]  [ DepartmentImplPojo ]  [ CompanyImplBean ]  [ Factory ]  [ Company ]  [ Department ]  [ Employee ] 

Class Content:
package org.softlang.company.factory;

import org.softlang.company.Company;
import org.softlang.company.Department;
import org.softlang.company.Employee;

/**
 * The factory interface for constructing all possible company objects
 */
public interface Factory {
	Company mkCompany();
	Department mkDepartment();
	Employee mkEmployee();
}

Parametros para o SOOT -> Classe:Factory path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/factory

Provided Class: Factory Dependence: org.softlang.company.Company

Provided Class: Factory Its Dependencies: org.softlang.company.Company - constant Required: Company

Provided Class: Factory Dependence: Department

Provided Class: Factory Its Dependencies: Department - constant Required: Department

Provided Class: Factory Dependence: Company

Provided Class: Factory Its Dependencies: Company - constant Required: Company

Provided Class: Factory Dependence: org.softlang.company.Employee

Provided Class: Factory Its Dependencies: org.softlang.company.Employee - constant Required: Employee

Provided Class: Factory Dependence: Employee

Provided Class: Factory Its Dependencies: Employee - constant Required: Employee

Provided Class: Factory Dependence: org.softlang.company.Department

Provided Class: Factory Its Dependencies: org.softlang.company.Department - constant Required: Department

Provided Class: Factory Dependence: package org.softlang.company.factory;


Class Name: Factory,  src\org\softlang\company\factory\Factory.java

 Provided Classes:  [ Factory ] 

 Required Classes:  [ Department ]  [ Company ]  [ Employee ] 

Class Content:
package org.softlang.company.impl.bean;

import org.softlang.company.Company;



public class CompanyImpl extends ContainerImpl implements Company {

}

Parametros para o SOOT -> Classe:CompanyImpl path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/bean

Provided Class: CompanyImplBean Dependence: org.softlang.company.Company

Provided Class: CompanyImplBean Its Dependencies: org.softlang.company.Company - constant Required: Company

Provided Class: CompanyImplBean Dependence: ContainerImpl

Provided Class: CompanyImplBean Its Dependencies: ContainerImpl - constant Required: ContainerImplPojo

Provided Class: CompanyImplBean Dependence: Company

Provided Class: CompanyImplBean Its Dependencies: Company - constant Required: Company

Provided Class: CompanyImplBean Dependence: package org.softlang.company.impl.bean;


Class Name: CompanyImplBean,  src\org\softlang\company\impl\bean\CompanyImpl.java

 Provided Classes:  [ CompanyImplBean ] 

 Required Classes:  [ ContainerImplPojo ]  [ Company ] 

Class Content:
package org.softlang.company.impl.bean;

import org.softlang.company.*;
import java.util.Observable;

/**
 * Observability and a parent axis are added on top of the Component interface.
 */
public abstract class ComponentImpl extends Observable implements Component {

	private ComponentImpl parent;
	private String name;
	public String getName() {
		return name; 
	}
	public void setName(String name) { 
		this.name = name; 
		/*#if($logging)*/
		setChanged();
		notifyObservers("name");		
		/*#end*/
	}
	public ComponentImpl getParent() { return parent; }
	/* package */ void setParent(ComponentImpl parent) { this.parent = parent; }
	
}

Parametros para o SOOT -> Classe:ComponentImpl path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/bean

Provided Class: ComponentImplBean Dependence: Component

Provided Class: ComponentImplBean Its Dependencies: Component - constant Required: Component

Provided Class: ComponentImplBean Dependence: package org.softlang.company.impl.bean;


Class Name: ComponentImplBean,  src\org\softlang\company\impl\bean\ComponentImpl.java

 Provided Classes:  [ ComponentImplBean ] 

 Required Classes:  [ Component ] 

Class Content:
package org.softlang.company.impl.bean;

import java.util.Observer;
import org.softlang.company.Container;
import org.softlang.company.Subunit;
import org.softlang.util.ObservableSimpleList;
import org.softlang.util.SimpleLinkedList;


public abstract class ContainerImpl extends ComponentImpl implements Container {

	private ObservableSimpleList<Subunit> subunits =  new ObservableSimpleList<Subunit>(new SimpleLinkedList<Subunit>());
	
	public Iterable<? extends Subunit> subunits() {
		return subunits;
	}
	
	public boolean add(Subunit u) {
		ComponentImpl i = (ComponentImpl)u;
		if (i.getParent()!=null)
			throw new IllegalArgumentException("Attemped re-parenting.");
		i.setParent(this);
		return subunits.add(u);
	}
	
	public boolean remove(Subunit u) {
		ComponentImpl i = (ComponentImpl)u;
		i.setParent(null);
		return subunits.remove(u);
	}
	
	/*#if($logging)*/
	public void addObserver(Observer o) {
		super.addObserver(o);
		subunits.addObserver(o);
	}
	/*#end*/
	
	/*#if($logging)*/
	public void deleteObserver(Observer o) {
		super.deleteObserver(o);
		subunits.deleteObserver(o);		
	}
	/*#end*/
	
	/*#if($logging)*/
	public void deleteObservers() {
		super.deleteObservers();
		subunits.deleteObservers();
	}	
	/*#end*/
}

Parametros para o SOOT -> Classe:ContainerImpl path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/bean
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/bean/ContainerImpl.java:12:
  Semantic Error: can not instantiate Unknown no matching constructor found in Unknown

Provided Class: ContainerImplBean Dependence: ComponentImpl

Provided Class: ContainerImplBean Its Dependencies: ComponentImpl - constant Required: ComponentImplPojo

Provided Class: ContainerImplBean Dependence: org.softlang.company.Subunit

Provided Class: ContainerImplBean Its Dependencies: org.softlang.company.Subunit - constant Required: Subunit

Provided Class: ContainerImplBean Dependence: ObservableSimpleList

Provided Class: ContainerImplBean Its Dependencies: ObservableSimpleList - constant Required: ObservableSimpleList

Provided Class: ContainerImplBean Dependence: org.softlang.util.SimpleLinkedList

Provided Class: ContainerImplBean Its Dependencies: org.softlang.util.SimpleLinkedList - constant Required: SimpleLinkedList

Provided Class: ContainerImplBean Dependence: Subunit

Provided Class: ContainerImplBean Its Dependencies: Subunit - constant Required: Subunit

Provided Class: ContainerImplBean Dependence: org.softlang.util.ObservableSimpleList

Provided Class: ContainerImplBean Its Dependencies: org.softlang.util.ObservableSimpleList - constant Required: ObservableSimpleList

Provided Class: ContainerImplBean Dependence: SimpleLinkedList

Provided Class: ContainerImplBean Its Dependencies: SimpleLinkedList - constant Required: SimpleLinkedList

Provided Class: ContainerImplBean Dependence: Container

Provided Class: ContainerImplBean Its Dependencies: Container - constant Required: Container

Provided Class: ContainerImplBean Dependence: org.softlang.company.Container

Provided Class: ContainerImplBean Its Dependencies: org.softlang.company.Container - constant Required: Container

Provided Class: ContainerImplBean Dependence: package org.softlang.company.impl.bean;


Class Name: ContainerImplBean,  src\org\softlang\company\impl\bean\ContainerImpl.java

 Provided Classes:  [ ContainerImplBean ] 

 Required Classes:  [ ComponentImplPojo ]  [ ObservableSimpleList ]  [ Subunit ]  [ SimpleLinkedList ]  [ Container ] 

Class Content:
package org.softlang.company.impl.bean;

import org.softlang.company.Department;
import org.softlang.company.Employee;
import org.softlang.company.Subunit;

public class DepartmentImpl extends ContainerImpl implements Department {
	
		public Employee getManager() {
		for (Subunit u : subunits())
			if (u instanceof Employee) {
				Employee e = (Employee)u;
				if (e.getManager())
					return e;
			}
		return null;
	}	
}

Parametros para o SOOT -> Classe:DepartmentImpl path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/bean
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/bean/DepartmentImpl.java:10:
  Semantic Error: no method named subunits() in org.softlang.company.impl.bean.DepartmentImpl matches.

Provided Class: DepartmentImplBean Dependence: org.softlang.company.Subunit

Provided Class: DepartmentImplBean Its Dependencies: org.softlang.company.Subunit - constant Required: Subunit

Provided Class: DepartmentImplBean Dependence: ContainerImpl

Provided Class: DepartmentImplBean Its Dependencies: ContainerImpl - constant Required: ContainerImplPojo

Provided Class: DepartmentImplBean Dependence: Subunit

Provided Class: DepartmentImplBean Its Dependencies: Subunit - constant Required: Subunit

Provided Class: DepartmentImplBean Dependence: Department

Provided Class: DepartmentImplBean Its Dependencies: Department - constant Required: Department

Provided Class: DepartmentImplBean Dependence: org.softlang.company.Employee

Provided Class: DepartmentImplBean Its Dependencies: org.softlang.company.Employee - constant Required: Employee

Provided Class: DepartmentImplBean Dependence: Employee

Provided Class: DepartmentImplBean Its Dependencies: Employee - constant Required: Employee

Provided Class: DepartmentImplBean Dependence: org.softlang.company.Department

Provided Class: DepartmentImplBean Its Dependencies: org.softlang.company.Department - constant Required: Department

Provided Class: DepartmentImplBean Dependence: package org.softlang.company.impl.bean;


Class Name: DepartmentImplBean,  src\org\softlang\company\impl\bean\DepartmentImpl.java

 Provided Classes:  [ DepartmentImplBean ] 

 Required Classes:  [ ContainerImplPojo ]  [ Subunit ]  [ Department ]  [ Employee ] 

Class Content:
package org.softlang.company.impl.bean;

import org.softlang.company.*;

public class EmployeeImpl extends ComponentImpl implements Employee {
	
	private String name;
	private String address;
	private double salary;
	private boolean manager;
	
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
		/*#if($logging)*/
		setChanged();
		notifyObservers("name");
		/*#end*/
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
		/*#if($logging)*/
		setChanged();
		notifyObservers("address");
	    /*#end*/
	}

	public double getSalary() {
		return 10;
	}

	public void setSalary(double salary) {
		if(salary!=this.getSalary()){
			this.salary = salary;
			/*#if($logging)*/
	 		setChanged();
	 		notifyObservers("salary");
		    /*#end*/
		}	
	}	
	
	public boolean getManager() {
		return manager;
	}

	public void setManager(boolean manager) {
		this.manager = manager;
		/*#if($logging)*/
		setChanged();
		notifyObservers("manager");
		/*#end*/
	}

	public String getCep() {
		return "cep";
	}
}

Parametros para o SOOT -> Classe:EmployeeImpl path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/bean
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/bean/EmployeeImpl.java:19:
  Semantic Error: no method named setChanged() in org.softlang.company.impl.bean.EmployeeImpl matches.
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/bean/EmployeeImpl.java:20:
  Semantic Error: no method named notifyObservers(java.lang.String) in org.softlang.company.impl.bean.EmployeeImpl matches.
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/bean/EmployeeImpl.java:31:
  Semantic Error: no method named setChanged() in org.softlang.company.impl.bean.EmployeeImpl matches.
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/bean/EmployeeImpl.java:32:
  Semantic Error: no method named notifyObservers(java.lang.String) in org.softlang.company.impl.bean.EmployeeImpl matches.
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/bean/EmployeeImpl.java:44:
  Semantic Error: no method named setChanged() in org.softlang.company.impl.bean.EmployeeImpl matches.
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/bean/EmployeeImpl.java:45:
  Semantic Error: no method named notifyObservers(java.lang.String) in org.softlang.company.impl.bean.EmployeeImpl matches.
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/bean/EmployeeImpl.java:57:
  Semantic Error: no method named setChanged() in org.softlang.company.impl.bean.EmployeeImpl matches.
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/bean/EmployeeImpl.java:58:
  Semantic Error: no method named notifyObservers(java.lang.String) in org.softlang.company.impl.bean.EmployeeImpl matches.

Provided Class: EmployeeImplBean Dependence: ComponentImpl

Provided Class: EmployeeImplBean Its Dependencies: ComponentImpl - constant Required: ComponentImplPojo

Provided Class: EmployeeImplBean Dependence: Employee

Provided Class: EmployeeImplBean Its Dependencies: Employee - constant Required: Employee

Provided Class: EmployeeImplBean Dependence: package org.softlang.company.impl.bean;


Class Name: EmployeeImplBean,  src\org\softlang\company\impl\bean\EmployeeImpl.java

 Provided Classes:  [ EmployeeImplBean ] 

 Required Classes:  [ ComponentImplPojo ]  [ Employee ] 

Class Content:
package org.softlang.visitor;

import org.softlang.company.*;

public interface ReturningVisitor<R> {

	R visit(Company o);
	R visit(Department o);
	R visit(Employee o);

}

Parametros para o SOOT -> Classe:ReturningVisitor path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/visitor
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/visitor/ReturningVisitor.java:3,8:
  Semantic Error: org.softlang.company not found
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/visitor/ReturningVisitor.java:7:
  Semantic Error: method with signature visit(Unknown) is multiply declared in type org.softlang.visitor.ReturningVisitor
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/visitor/ReturningVisitor.java:8:
  Semantic Error: method with signature visit(Unknown) is multiply declared in type org.softlang.visitor.ReturningVisitor

Provided Class: ReturningVisitor Dependence: Department

Provided Class: ReturningVisitor Its Dependencies: Department - constant Required: Department

Provided Class: ReturningVisitor Dependence: Company

Provided Class: ReturningVisitor Its Dependencies: Company - constant Required: Company

Provided Class: ReturningVisitor Dependence: Employee

Provided Class: ReturningVisitor Its Dependencies: Employee - constant Required: Employee

Provided Class: ReturningVisitor Dependence: package org.softlang.visitor;


Class Name: ReturningVisitor,  src\org\softlang\visitor\ReturningVisitor.java

 Provided Classes:  [ ReturningVisitor ] 

 Required Classes:  [ Company ]  [ Department ]  [ Employee ] 

Class Content:
package org.softlang.visitor;

import org.softlang.company.*;

public interface VoidVisitor {

	void visit(Company o);
	void visit(Department o);
	void visit(Employee o);
		
}

Parametros para o SOOT -> Classe:VoidVisitor path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/visitor
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/visitor/VoidVisitor.java:3,8:
  Semantic Error: org.softlang.company not found
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/visitor/VoidVisitor.java:7:
  Semantic Error: method with signature visit(Unknown) is multiply declared in type org.softlang.visitor.VoidVisitor
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/visitor/VoidVisitor.java:8:
  Semantic Error: method with signature visit(Unknown) is multiply declared in type org.softlang.visitor.VoidVisitor

Provided Class: VoidVisitor Dependence: Department

Provided Class: VoidVisitor Its Dependencies: Department - constant Required: Department

Provided Class: VoidVisitor Dependence: Company

Provided Class: VoidVisitor Its Dependencies: Company - constant Required: Company

Provided Class: VoidVisitor Dependence: Employee

Provided Class: VoidVisitor Its Dependencies: Employee - constant Required: Employee

Provided Class: VoidVisitor Dependence: package org.softlang.visitor;


Class Name: VoidVisitor,  src\org\softlang\visitor\VoidVisitor.java

 Provided Classes:  [ VoidVisitor ] 

 Required Classes:  [ Company ]  [ Department ]  [ Employee ] 

Class Content:
package org.softlang.util;

import java.util.*;

/**
 * Compose the (Simple)List interface with the Observable base class.
 * In fact, a given list is decorated with observer capability.
 * The methods must be adjusted to notify upon changes.
 * Addition and removal of observers is pushed into elements--if they are observable.
 */
public class ObservableSimpleList<X> extends Observable implements SimpleList<X> {

	private SimpleList<X> inner;
	
	public ObservableSimpleList(SimpleList<X> inner) {
		this.inner = inner;
	}
		
	//
	//
	// Methods of the Observable interface are overridden. 
	//
	//
	
	public void addObserver(Observer o) {
		super.addObserver(o);
		for (X e : this)
			if (e instanceof Observable)
				((Observable)e).addObserver(o);
	}	
	
	public void deleteObserver(Observer o) {
		super.deleteObserver(o);
		for (X e : this)
			if (e instanceof Observable)
				((Observable)e).deleteObserver(o);
	}	
	
	public void deleteObservers() {
		super.deleteObservers();
		for (X e : this)
			if (e instanceof Observable)
				((Observable)e).deleteObservers();
	}	
		
	//
	//
	// Beyond this point, the SimpleList interface is implemented
	//
	//
	
	public Iterator<X> iterator() {
		return inner.iterator();
	}
	
	public boolean add(X e) {
		boolean result = inner.add(e);
		if (result) {
			setChanged();
			notifyObservers(new AddToList(e));	
		}
		return result;
	}

	public boolean remove(X e) {
		boolean result = inner.remove(e);
		if (result) {
			setChanged();
			notifyObservers(new RemoveFromList(e));
		}
		return result;
	}
}

Parametros para o SOOT -> Classe:ObservableSimpleList path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/util
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/util/ObservableSimpleList.java:60:
  Semantic Error: can not instantiate Unknown no matching constructor found in Unknown
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/util/ObservableSimpleList.java:69:
  Semantic Error: can not instantiate Unknown no matching constructor found in Unknown

Provided Class: ObservableSimpleList Dependence: AddToList

Provided Class: ObservableSimpleList Its Dependencies: AddToList - constant Required: AddToList

Provided Class: ObservableSimpleList Dependence: RemoveFromList

Provided Class: ObservableSimpleList Its Dependencies: RemoveFromList - constant Required: RemoveFromList

Provided Class: ObservableSimpleList Dependence: SimpleList

Provided Class: ObservableSimpleList Its Dependencies: SimpleList - constant Required: SimpleList

Provided Class: ObservableSimpleList Dependence: package org.softlang.util;


Class Name: ObservableSimpleList,  src\org\softlang\util\ObservableSimpleList.java

 Provided Classes:  [ ObservableSimpleList ] 

 Required Classes:  [ AddToList ]  [ SimpleList ]  [ RemoveFromList ] 

Class Content:
package org.softlang.util;

/**
 * This is a down-graded version of java.util.List.
 */
public interface SimpleList<X> extends Iterable<X> {
	boolean add(X x);
	boolean remove(X x);
}

Parametros para o SOOT -> Classe:SimpleList path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/util

Provided Class: SimpleList Dependence: package org.softlang.util;


Class Name: SimpleList,  src\org\softlang\util\SimpleList.java

 Provided Classes:  [ SimpleList ] 

 Required Classes: 

Class Content:
package org.softlang.util;

import java.util.Iterator;
import java.util.LinkedList;

/**
 * This is a down-graded version of java.util.LinkedList.
 */
public class SimpleLinkedList<X> implements SimpleList<X> {

	protected LinkedList<X> inner = 
		new LinkedList<X>();
		
	public Iterator<X> iterator() {
		return inner.iterator();
	}

	public boolean add(X x) {
		return inner.add(x);
	}

	public boolean remove(X x) {
		return inner.remove(x);
	}
}

Parametros para o SOOT -> Classe:SimpleLinkedList path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/util

Provided Class: SimpleLinkedList Dependence: SimpleList

Provided Class: SimpleLinkedList Its Dependencies: SimpleList - constant Required: SimpleList

Provided Class: SimpleLinkedList Dependence: package org.softlang.util;


Class Name: SimpleLinkedList,  src\org\softlang\util\SimpleLinkedList.java

 Provided Classes:  [ SimpleLinkedList ] 

 Required Classes:  [ SimpleList ] 

Class Content:
package org.softlang.util;

public class AddToList extends ChangeList {
	public AddToList(Object o) { this.element = o; }
}

Parametros para o SOOT -> Classe:AddToList path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/util
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/util/AddToList.java:4,36:
  Semantic Error: no field named element

Provided Class: AddToList Dependence: ChangeList

Provided Class: AddToList Its Dependencies: ChangeList - constant Required: ChangeList

Provided Class: AddToList Dependence: package org.softlang.util;


Class Name: AddToList,  src\org\softlang\util\AddToList.java

 Provided Classes:  [ AddToList ] 

 Required Classes:  [ ChangeList ] 

Class Content:
package org.softlang.util;

/**
 * Represent changes to observable lists
 */
public abstract class ChangeList {
	public Object element;
}

Parametros para o SOOT -> Classe:ChangeList path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/util

Provided Class: ChangeList Dependence: package org.softlang.util;


Class Name: ChangeList,  src\org\softlang\util\ChangeList.java

 Provided Classes:  [ ChangeList ] 

 Required Classes: 

Class Content:
package org.softlang.util;

public class RemoveFromList extends ChangeList {
	public RemoveFromList(Object o) { this.element = o; }
}

Parametros para o SOOT -> Classe:RemoveFromList path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/util
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/util/RemoveFromList.java:4,41:
  Semantic Error: no field named element

Provided Class: RemoveFromList Dependence: ChangeList

Provided Class: RemoveFromList Its Dependencies: ChangeList - constant Required: ChangeList

Provided Class: RemoveFromList Dependence: package org.softlang.util;


Class Name: RemoveFromList,  src\org\softlang\util\RemoveFromList.java

 Provided Classes:  [ RemoveFromList ] 

 Required Classes:  [ ChangeList ] 

Class Content:
package org.softlang.company.factory;

import org.softlang.company.*;
import org.softlang.company.impl.pojo.*;

/**
 * A factory that constructs POJPs
 */
public class PojoFactory implements Factory {
	public Company mkCompany() { return new CompanyImpl(); }
	public Department mkDepartment() { return new DepartmentImpl(); }
	public Employee mkEmployee() { return new EmployeeImpl(); }
}

Parametros para o SOOT -> Classe:PojoFactory path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/factory
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/factory/PojoFactory.java:4,8:
  Semantic Error: org.softlang.company.impl.pojo not found

Provided Class: PojoFactory Dependence: DepartmentImpl

Provided Class: PojoFactory Its Dependencies: DepartmentImpl - constant Required: DepartmentImplPojo

Provided Class: PojoFactory Dependence: EmployeeImpl

Provided Class: PojoFactory Its Dependencies: EmployeeImpl - constant Required: EmployeeImplPojo

Provided Class: PojoFactory Dependence: Factory

Provided Class: PojoFactory Its Dependencies: Factory - constant Required: Factory

Provided Class: PojoFactory Dependence: Department

Provided Class: PojoFactory Its Dependencies: Department - constant Required: Department

Provided Class: PojoFactory Dependence: Company

Provided Class: PojoFactory Its Dependencies: Company - constant Required: Company

Provided Class: PojoFactory Dependence: Employee

Provided Class: PojoFactory Its Dependencies: Employee - constant Required: Employee

Provided Class: PojoFactory Dependence: CompanyImpl

Provided Class: PojoFactory Its Dependencies: CompanyImpl - constant Required: CompanyImplBean

Provided Class: PojoFactory Dependence: package org.softlang.company.factory;


Class Name: PojoFactory, src\org\softlang\company\factory\PojoFactory.java

 Provided Classes:  [ PojoFactory ] 

 Required Classes:  [ EmployeeImplPojo ]  [ DepartmentImplPojo ]  [ CompanyImplBean ]  [ Factory ]  [ Company ]  [ Department ]  [ Employee ] 

Class Content:
package org.softlang.company.impl.pojo;

import org.softlang.company.Company;
import org.softlang.company.Department;
import org.softlang.company.Subunit;

public class CompanyImpl extends ContainerImpl implements Company{ 

	/**
	 * Enforce the constraint a company can only aggregate departments
	 */
	public boolean add(Subunit u) {
		if (!(u instanceof Department)){
			throw new IllegalArgumentException();
		}
		return super.add(u);
	}
}

Parametros para o SOOT -> Classe:CompanyImpl path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/pojo

Provided Class: CompanyImplPojo Dependence: org.softlang.company.Subunit

Provided Class: CompanyImplPojo Its Dependencies: org.softlang.company.Subunit - constant Required: Subunit

Provided Class: CompanyImplPojo Dependence: org.softlang.company.Company

Provided Class: CompanyImplPojo Its Dependencies: org.softlang.company.Company - constant Required: Company

Provided Class: CompanyImplPojo Dependence: ContainerImpl

Provided Class: CompanyImplPojo Its Dependencies: ContainerImpl - constant Required: ContainerImplPojo

Provided Class: CompanyImplPojo Dependence: Subunit

Provided Class: CompanyImplPojo Its Dependencies: Subunit - constant Required: Subunit

Provided Class: CompanyImplPojo Dependence: Department

Provided Class: CompanyImplPojo Its Dependencies: Department - constant Required: Department

Provided Class: CompanyImplPojo Dependence: Company

Provided Class: CompanyImplPojo Its Dependencies: Company - constant Required: Company

Provided Class: CompanyImplPojo Dependence: org.softlang.company.Department

Provided Class: CompanyImplPojo Its Dependencies: org.softlang.company.Department - constant Required: Department

Provided Class: CompanyImplPojo Dependence: package org.softlang.company.impl.pojo;


Class Name: CompanyImplPojo, src\org\softlang\company\impl\pojo\CompanyImpl.java

 Provided Classes:  [ CompanyImplPojo ] 

 Required Classes:  [ ContainerImplPojo ]  [ Subunit ]  [ Department ]  [ Company ] 

Class Content:
package org.softlang.company.impl.pojo;

import org.softlang.company.*;

public abstract class ComponentImpl implements Component {
	private String name;
	public String getName() { return name; }
	public void setName(String name) { this.name = name; }
}

Parametros para o SOOT -> Classe:ComponentImpl path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/pojo

Provided Class: ComponentImplPojo Dependence: Component

Provided Class: ComponentImplPojo Its Dependencies: Component - constant Required: Component

Provided Class: ComponentImplPojo Dependence: package org.softlang.company.impl.pojo;


Class Name: ComponentImplPojo, src\org\softlang\company\impl\pojo\ComponentImpl.java

 Provided Classes:  [ ComponentImplPojo ] 

 Required Classes:  [ Component ] 

Class Content:
package org.softlang.company.impl.pojo;

import org.softlang.company.*;
import java.util.LinkedList;
import java.util.List;

public abstract class ContainerImpl extends ComponentImpl implements Container {
	
	private List<Subunit> subunits = new LinkedList<Subunit>();
	public Iterable<? extends Subunit> subunits() {
		return subunits;
	}
	public boolean add(Subunit u) {
		return subunits.add(u);
	}
	public boolean remove(Subunit u) {
		return subunits.remove(u);
	}
}

Parametros para o SOOT -> Classe:ContainerImpl path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/pojo

Provided Class: ContainerImplPojo Dependence: ComponentImpl

Provided Class: ContainerImplPojo Its Dependencies: ComponentImpl - constant Required: ComponentImplPojo

Provided Class: ContainerImplPojo Dependence: Subunit

Provided Class: ContainerImplPojo Its Dependencies: Subunit - constant Required: Subunit

Provided Class: ContainerImplPojo Dependence: Container

Provided Class: ContainerImplPojo Its Dependencies: Container - constant Required: Container

Provided Class: ContainerImplPojo Dependence: package org.softlang.company.impl.pojo;


Class Name: ContainerImplPojo, src\org\softlang\company\impl\pojo\ContainerImpl.java

 Provided Classes:  [ ContainerImplPojo ] 

 Required Classes:  [ ComponentImplPojo ]  [ Subunit ]  [ Container ] 

Class Content:
package org.softlang.company.impl.pojo;

import org.softlang.company.Department;
import org.softlang.company.Employee;
import org.softlang.company.Subunit;

public class DepartmentImpl extends ContainerImpl implements Department {
	
	public Employee getManager() {
		for (Subunit u : subunits())
			if (u instanceof Employee) {
				Employee e = (Employee)u;
				if (e.getManager()){
					return e;
				}
			}
		return null;
	}	
}

Parametros para o SOOT -> Classe:DepartmentImpl path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/pojo
/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/pojo/DepartmentImpl.java:10:
  Semantic Error: no method named subunits() in org.softlang.company.impl.pojo.DepartmentImpl matches.

Provided Class: DepartmentImplPojo Dependence: org.softlang.company.Subunit

Provided Class: DepartmentImplPojo Its Dependencies: org.softlang.company.Subunit - constant Required: Subunit

Provided Class: DepartmentImplPojo Dependence: ContainerImpl

Provided Class: DepartmentImplPojo Its Dependencies: ContainerImpl - constant Required: ContainerImplPojo

Provided Class: DepartmentImplPojo Dependence: Subunit

Provided Class: DepartmentImplPojo Its Dependencies: Subunit - constant Required: Subunit

Provided Class: DepartmentImplPojo Dependence: Department

Provided Class: DepartmentImplPojo Its Dependencies: Department - constant Required: Department

Provided Class: DepartmentImplPojo Dependence: org.softlang.company.Employee

Provided Class: DepartmentImplPojo Its Dependencies: org.softlang.company.Employee - constant Required: Employee

Provided Class: DepartmentImplPojo Dependence: Employee

Provided Class: DepartmentImplPojo Its Dependencies: Employee - constant Required: Employee

Provided Class: DepartmentImplPojo Dependence: org.softlang.company.Department

Provided Class: DepartmentImplPojo Its Dependencies: org.softlang.company.Department - constant Required: Department

Provided Class: DepartmentImplPojo Dependence: package org.softlang.company.impl.pojo;


Class Name: DepartmentImplPojo, src\org\softlang\company\impl\pojo\DepartmentImpl.java

 Provided Classes:  [ DepartmentImplPojo ] 

 Required Classes:  [ ContainerImplPojo ]  [ Subunit ]  [ Department ]  [ Employee ] 

Class Content:
package org.softlang.company.impl.pojo;

import org.softlang.company.*;

public class EmployeeImpl extends ComponentImpl implements Employee {
	
	private String address;
	private double salary;
	private boolean manager = false;

	public String getAddress() {
		return address;
	}
	public void setAddress(String address) {
		this.address = address;
	}
	public double getSalary() {
		return salary;
	}
	public void setSalary(double salary) {
		this.salary = salary;
	}
	public boolean getManager() {
		return manager;
	}
	public void setManager(boolean manager) {
		this.manager = manager;
	}
	
	public String getCep() {
		return "cep";
	}
	
}

Parametros para o SOOT -> Classe:EmployeeImpl path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/company/impl/pojo

Provided Class: EmployeeImplPojo Dependence: ComponentImpl

Provided Class: EmployeeImplPojo Its Dependencies: ComponentImpl - constant Required: ComponentImplPojo

Provided Class: EmployeeImplPojo Dependence: Employee

Provided Class: EmployeeImplPojo Its Dependencies: Employee - constant Required: Employee

Provided Class: EmployeeImplPojo Dependence: package org.softlang.company.impl.pojo;


Class Name: EmployeeImplPojo, src\org\softlang\company\impl\pojo\EmployeeImpl.java

 Provided Classes:  [ EmployeeImplPojo ] 

 Required Classes:  [ ComponentImplPojo ]  [ Employee ] 

Class Content:
package org.softlang.main;

import org.softlang.company.Company;
import org.softlang.company.Department;
import org.softlang.company.Employee;
import org.softlang.company.factory.BeanFactory;
import org.softlang.company.factory.Factory;
import org.softlang.company.impl.bean.EmployeeImpl;

public class Main {
	
	    private Company sampleCompany;
	    private EmployeeImpl emp;
	    
	    public Main(){
	    	super();
	    	this.createSampleCompany(new BeanFactory());
	    }
	    
		public void createSampleCompany(Factory f) {
			// Create company
			this.sampleCompany = f.mkCompany();
			sampleCompany.setName("meganalysis");
			
			// Create all employees
			Employee craig = f.mkEmployee();
			craig.setName("Craig");
			craig.setAddress("Redmond");
			craig.setSalary(123456);
			craig.setManager(true);
	
			Employee erik = f.mkEmployee();
			erik.setName("Erik");
			erik.setAddress("Utrecht");
			erik.setSalary(12345);
	
			Employee ralf = f.mkEmployee();
			ralf.setName("Ralf");
			ralf.setAddress("Koblenz");
			ralf.setSalary(1234);		
	
			Employee ray = f.mkEmployee();
			ray.setName("Ray");
			ray.setAddress("Redmond");
			ray.setSalary(234567);
			ray.setManager(true);
	
			Employee klaus = f.mkEmployee();
			klaus.setName("Klaus");
			klaus.setAddress("Boston");
			klaus.setSalary(23456);
			klaus.setManager(true);
			
			Employee karl = f.mkEmployee();
			karl.setName("Karl");
			karl.setAddress("Riga");
			karl.setSalary(2345);
			karl.setManager(true);
			
			Employee joe = f.mkEmployee();
			joe.setName("Joe");
			joe.setAddress("Wifi City");
			joe.setSalary(2344);								
	
			// Create research department
			Department research = f.mkDepartment();
			research.setName("Research");
			research.add(craig);
			research.add(erik);
			research.add(ralf);
			sampleCompany.add(research);
	
			// Create development department
			Department development = f.mkDepartment();
			development.setName("Development");
			development.add(ray);
			sampleCompany.add(development);
	
			// Create sub-department dev1
			Department dev1 = f.mkDepartment();
			dev1.setName("Dev1");
			dev1.add(klaus);
			development.add(dev1);
	
			// Create sub-department dev11
			Department dev11 = f.mkDepartment();
			dev11.setName("Dev1.1");
			dev11.add(karl);
			dev11.add(joe);
			dev1.add(dev11);
	}
		
	public void setSalary(org.softlang.company.impl.bean.EmployeeImpl e, double salary){
		e.setSalary(salary);
	}
	
	public double getSalary(org.softlang.company.impl.bean.EmployeeImpl e){
		return e.getSalary();
	}
	
	public static void main(String[] args) {
		Main m = new Main();
		Company c = m.getSampleCompany();
		
	}

	
	
	
	
	/*.................... Getters and Setters */
	public Company getSampleCompany() {
		return sampleCompany;
	}
	public void setSampleCompany(Company sampleCompany) {
		this.sampleCompany = sampleCompany;
	}

	public EmployeeImpl getEmp() {
		return emp;
	}

	public void setEmp(EmployeeImpl emp) {
		this.emp = emp;
	}

}

Parametros para o SOOT -> Classe:Main path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/main

Provided Class: Main Dependence: org.softlang.company.factory.Factory

Provided Class: Main Its Dependencies: org.softlang.company.factory.Factory - constant Required: Factory

Provided Class: Main Dependence: org.softlang.company.Company

Provided Class: Main Its Dependencies: org.softlang.company.Company - constant Required: Company

Provided Class: Main Dependence: org.softlang.company.factory.BeanFactory

Provided Class: Main Its Dependencies: org.softlang.company.factory.BeanFactory - constant Required: BeanFactory

Provided Class: Main Dependence: Factory

Provided Class: Main Its Dependencies: Factory - constant Required: Factory

Provided Class: Main Dependence: EmployeeImpl

Provided Class: Main Its Dependencies: EmployeeImpl - constant Required: EmployeeImplPojo

Provided Class: Main Dependence: org.softlang.company.impl.bean.EmployeeImpl

Provided Class: Main Its Dependencies: org.softlang.company.impl.bean.EmployeeImpl - constant Required: EmployeeImplBean

Provided Class: Main Dependence: Department

Provided Class: Main Its Dependencies: Department - constant Required: Department

Provided Class: Main Dependence: Company

Provided Class: Main Its Dependencies: Company - constant Required: Company

Provided Class: Main Dependence: org.softlang.company.Employee

Provided Class: Main Its Dependencies: org.softlang.company.Employee - constant Required: Employee

Provided Class: Main Dependence: Employee

Provided Class: Main Its Dependencies: Employee - constant Required: Employee

Provided Class: Main Dependence: BeanFactory

Provided Class: Main Its Dependencies: BeanFactory - constant Required: BeanFactory

Provided Class: Main Dependence: org.softlang.company.Department

Provided Class: Main Its Dependencies: org.softlang.company.Department - constant Required: Department

Provided Class: Main Dependence: package org.softlang.main;


Class Name: Main, src\org\softlang\main\Main.java

 Provided Classes:  [ Main ] 

 Required Classes:  [ EmployeeImplBean ]  [ EmployeeImplPojo ]  [ Factory ]  [ Department ]  [ Company ]  [ Employee ]  [ BeanFactory ] 

Class Content:
package org.softlang.features;

import java.util.Observable;
import java.util.Observer;

import org.softlang.company.impl.bean.EmployeeImpl;

/**
 * Log all changes to salaries of employees.
 * Log them on stdout and count them.
 */
public class Logging implements Observer {

	private int size;
	
	
	public void update(Observable o, Object arg) {
		if (o instanceof EmployeeImpl && arg instanceof String) {
			EmployeeImpl e = (EmployeeImpl)o;
			if (((String)arg).equals("salary")) {
					size++;
					System.out.println("Salary of " + e.getName() + " adjusted to " + e.getSalary());
			}
		}
	}

	/**
	 * Get the number of entries in the log.
	 */
	public int getSize() {
		return size;
	}
	
	/**
	 * Reset the log.
	 */
	public void reset() {
		size = 0;
	}
}

Parametros para o SOOT -> Classe:Logging path:/home/jefferson/Dropbox/101Companies/SecondCategory/ToySPL02T/src/org/softlang/features

Provided Class: Logging Dependence: EmployeeImpl

Provided Class: Logging Its Dependencies: EmployeeImpl - constant Required: EmployeeImplPojo

Provided Class: Logging Dependence: org.softlang.company.impl.bean.EmployeeImpl

Provided Class: Logging Its Dependencies: org.softlang.company.impl.bean.EmployeeImpl - constant Required: EmployeeImplBean

Provided Class: Logging Dependence: package org.softlang.features;


Class Name: Logging, src\org\softlang\features\Logging.java

 Provided Classes:  [ Logging ] 

 Required Classes:  [ EmployeeImplBean ]  [ EmployeeImplPojo ] 

target Configuration Knowledge Items:
Feature Expression: treestructure
Provided: {Subunit=src\org\softlang\company\Subunit.java}
Required: [Component]

Feature Expression: treestructure
Provided: {Company=src\org\softlang\company\Company.java}
Required: [Container]

Feature Expression: treestructure
Provided: {DepartmentImplBean=src\org\softlang\company\impl\bean\DepartmentImpl.java}
Required: [ContainerImplPojo, Subunit, Department, Employee]

Feature Expression: treestructure
Provided: {ReturningVisitor=src\org\softlang\visitor\ReturningVisitor.java}
Required: [Company, Department, Employee]

Feature Expression: treestructure
Provided: {CompanyImplPojo=src\org\softlang\company\impl\pojo\CompanyImpl.java}
Required: [ContainerImplPojo, Subunit, Department, Company]

Feature Expression: treestructure
Provided: {EmployeeImplBean=src\org\softlang\company\impl\bean\EmployeeImpl.java}
Required: [ComponentImplPojo, Employee]

Feature Expression: treestructure
Provided: {PojoFactory=src\org\softlang\company\factory\PojoFactory.java}
Required: [EmployeeImplPojo, DepartmentImplPojo, CompanyImplBean, Factory, Company, Department, Employee]

Feature Expression: treestructure
Provided: {EmployeeImplPojo=src\org\softlang\company\impl\pojo\EmployeeImpl.java}
Required: [ComponentImplPojo, Employee]

Feature Expression: treestructure
Provided: {BeanFactory=src\org\softlang\company\factory\BeanFactory.java}
Required: [EmployeeImplPojo, DepartmentImplPojo, CompanyImplBean, Factory, Company, Department, Employee]

Feature Expression: treestructure
Provided: {AddToList=src\org\softlang\util\AddToList.java}
Required: [ChangeList]

Feature Expression: treestructure
Provided: {Factory=src\org\softlang\company\factory\Factory.java}
Required: [Department, Company, Employee]

Feature Expression: treestructure
Provided: {ChangeList=src\org\softlang\util\ChangeList.java}
Required: []

Feature Expression: javaexorcismspl
Provided: {Basics=src\org\softlang\tests\Basics.java}
Required: [Factory, Department, Company, Employee]

Feature Expression: treestructure
Provided: {ComponentImplPojo=src\org\softlang\company\impl\pojo\ComponentImpl.java}
Required: [Component]

Feature Expression: treestructure
Provided: {ComponentImplBean=src\org\softlang\company\impl\bean\ComponentImpl.java}
Required: [Component]

Feature Expression: treestructure
Provided: {Container=src\org\softlang\company\Container.java}
Required: [Subunit, Component]

Feature Expression: logging
Provided: {Logging=src\org\softlang\features\Logging.java}
Required: [EmployeeImplBean, EmployeeImplPojo]

Feature Expression: treestructure
Provided: {SimpleLinkedList=src\org\softlang\util\SimpleLinkedList.java}
Required: [SimpleList]

Feature Expression: treestructure
Provided: {Component=src\org\softlang\company\Component.java}
Required: []

Feature Expression: javaexorcismspl
Provided: {Junit=lib\Junit.jar}
Required: []

Feature Expression: treestructure
Provided: {ContainerImplBean=src\org\softlang\company\impl\bean\ContainerImpl.java}
Required: [ComponentImplPojo, ObservableSimpleList, Subunit, SimpleLinkedList, Container]

Feature Expression: treestructure
Provided: {ObservableSimpleList=src\org\softlang\util\ObservableSimpleList.java}
Required: [AddToList, SimpleList, RemoveFromList]

Feature Expression: treestructure
Provided: {Employee=src\org\softlang\company\Employee.java}
Required: [Subunit]

Feature Expression: treestructure
Provided: {Main=src\org\softlang\main\Main.java}
Required: [EmployeeImplBean, EmployeeImplPojo, Factory, Department, Company, Employee, BeanFactory]

Feature Expression: treestructure
Provided: {Department=src\org\softlang\company\Department.java}
Required: [Subunit, Employee, Container]

Feature Expression: treestructure
Provided: {VoidVisitor=src\org\softlang\visitor\VoidVisitor.java}
Required: [Company, Department, Employee]

Feature Expression: treestructure
Provided: {ContainerImplPojo=src\org\softlang\company\impl\pojo\ContainerImpl.java}
Required: [ComponentImplPojo, Subunit, Container]

Feature Expression: treestructure
Provided: {CompanyImplBean=src\org\softlang\company\impl\bean\CompanyImpl.java}
Required: [ContainerImplPojo, Company]

Feature Expression: treestructure
Provided: {SimpleList=src\org\softlang\util\SimpleList.java}
Required: []

Feature Expression: treestructure
Provided: {Build=build.xml}
Required: []

Feature Expression: treestructure
Provided: {RemoveFromList=src\org\softlang\util\RemoveFromList.java}
Required: [ChangeList]

Feature Expression: treestructure
Provided: {DepartmentImplPojo=src\org\softlang\company\impl\pojo\DepartmentImpl.java}
Required: [ContainerImplPojo, Subunit, Department, Employee]


Feature: logging - Files: Logging
Feature: preprocess - Files: src\org\softlang\company\impl\bean\EmployeeImpl.java,src\org\softlang\company\impl\bean\ComponentImpl.java,src\org\softlang\company\impl\bean\ContainerImpl.java,src\org\softlang\company\impl\bean\EmployeeImpl.java,src\org\softlang\company\impl\bean\ComponentImpl.java,src\org\softlang\company\impl\bean\ContainerImpl.java
Alloy File Content: open default
 pred provided[] { 
( isTrue[treestructure] => (isTrue[Subunit]) )
( isTrue[treestructure] => (isTrue[Company]) )
( isTrue[treestructure] => (isTrue[DepartmentImplBean]) )
( isTrue[treestructure] => (isTrue[ReturningVisitor]) )
( isTrue[treestructure] => (isTrue[CompanyImplPojo]) )
( isTrue[treestructure] => (isTrue[EmployeeImplBean]) )
( isTrue[treestructure] => (isTrue[PojoFactory]) )
( isTrue[treestructure] => (isTrue[EmployeeImplPojo]) )
( isTrue[treestructure] => (isTrue[BeanFactory]) )
( isTrue[treestructure] => (isTrue[AddToList]) )
( isTrue[treestructure] => (isTrue[Factory]) )
( isTrue[treestructure] => (isTrue[ChangeList]) )
( isTrue[javaexorcismspl] => (isTrue[Basics]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo]) )
( isTrue[treestructure] => (isTrue[ComponentImplBean]) )
( isTrue[treestructure] => (isTrue[Container]) )
( isTrue[logging] => (isTrue[Logging]) )
( isTrue[treestructure] => (isTrue[SimpleLinkedList]) )
( isTrue[treestructure] => (isTrue[Component]) )
( isTrue[javaexorcismspl] => (isTrue[Junit]) )
( isTrue[treestructure] => (isTrue[ContainerImplBean]) )
( isTrue[treestructure] => (isTrue[ObservableSimpleList]) )
( isTrue[treestructure] => (isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[Main]) )
( isTrue[treestructure] => (isTrue[Department]) )
( isTrue[treestructure] => (isTrue[VoidVisitor]) )
( isTrue[treestructure] => (isTrue[ContainerImplPojo]) )
( isTrue[treestructure] => (isTrue[CompanyImplBean]) )
( isTrue[treestructure] => (isTrue[SimpleList]) )
( isTrue[treestructure] => (isTrue[Build]) )
( isTrue[treestructure] => (isTrue[RemoveFromList]) )
( isTrue[treestructure] => (isTrue[DepartmentImplPojo]) )
 }

 pred required[] { 
( isTrue[treestructure] => (isTrue[Component]) )
( isTrue[treestructure] => (isTrue[Container]) )
( isTrue[treestructure] => (isTrue[ContainerImplPojo] and isTrue[Subunit] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[Company] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[ContainerImplPojo] and isTrue[Subunit] and isTrue[Department] and isTrue[Company]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[EmployeeImplPojo] and isTrue[DepartmentImplPojo] and isTrue[CompanyImplBean] and isTrue[Factory] and isTrue[Company] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[EmployeeImplPojo] and isTrue[DepartmentImplPojo] and isTrue[CompanyImplBean] and isTrue[Factory] and isTrue[Company] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[ChangeList]) )
( isTrue[treestructure] => (isTrue[Department] and isTrue[Company] and isTrue[Employee]) )
( isTrue[javaexorcismspl] => (isTrue[Factory] and isTrue[Department] and isTrue[Company] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[Component]) )
( isTrue[treestructure] => (isTrue[Component]) )
( isTrue[treestructure] => (isTrue[Subunit] and isTrue[Component]) )
( isTrue[logging] => (isTrue[EmployeeImplBean] and isTrue[EmployeeImplPojo]) )
( isTrue[treestructure] => (isTrue[SimpleList]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo] and isTrue[ObservableSimpleList] and isTrue[Subunit] and isTrue[SimpleLinkedList] and isTrue[Container]) )
( isTrue[treestructure] => (isTrue[AddToList] and isTrue[SimpleList] and isTrue[RemoveFromList]) )
( isTrue[treestructure] => (isTrue[Subunit]) )
( isTrue[treestructure] => (isTrue[EmployeeImplBean] and isTrue[EmployeeImplPojo] and isTrue[Factory] and isTrue[Department] and isTrue[Company] and isTrue[Employee] and isTrue[BeanFactory]) )
( isTrue[treestructure] => (isTrue[Subunit] and isTrue[Employee] and isTrue[Container]) )
( isTrue[treestructure] => (isTrue[Company] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo] and isTrue[Subunit] and isTrue[Container]) )
( isTrue[treestructure] => (isTrue[ContainerImplPojo] and isTrue[Company]) )
( isTrue[treestructure] => (isTrue[ChangeList]) )
( isTrue[treestructure] => (isTrue[ContainerImplPojo] and isTrue[Subunit] and isTrue[Department] and isTrue[Employee]) )
 }

 pred semanticaCK[] { provided[] => required[] }


Correct Set of Features:

Feature: javaexorcismspl

Feature: logging

Feature: treestructure

Including CK Signatures in Correct Set

Signature: ReturningVisitor

Signature: Basics

Signature: Subunit

Signature: RemoveFromList

Signature: ComponentImplPojo

Signature: Logging

Signature: Junit

Signature: PojoFactory

Signature: Main

Signature: EmployeeImplPojo

Signature: VoidVisitor

Signature: Build

Signature: ChangeList

Signature: Component

Signature: Department

Signature: Company

Signature: SimpleList

Signature: SimpleLinkedList

Signature: Container

Signature: EmployeeImplBean

Signature: javaexorcismspl

Signature: ContainerImplPojo

Signature: ObservableSimpleList

Signature: ComponentImplBean

Signature: CompanyImplBean

Signature: logging

Signature: Factory

Signature: Employee

Signature: ContainerImplBean

Signature: AddToList

Signature: CompanyImplPojo

Signature: DepartmentImplBean

Signature: DepartmentImplPojo

Signature: treestructure

Signature: BeanFactory

Correct Ser Filled:

Correct Item: ReturningVisitor

Correct Item: Basics

Correct Item: Subunit

Correct Item: RemoveFromList

Correct Item: Logging

Correct Item: ComponentImplPojo

Correct Item: PojoFactory

Correct Item: Junit

Correct Item: Main

Correct Item: EmployeeImplPojo

Correct Item: VoidVisitor

Correct Item: Build

Correct Item: ChangeList

Correct Item: Component

Correct Item: Department

Correct Item: Company

Correct Item: SimpleList

Correct Item: SimpleLinkedList

Correct Item: Container

Correct Item: javaexorcismspl

Correct Item: EmployeeImplBean

Correct Item: ContainerImplPojo

Correct Item: ComponentImplBean

Correct Item: ObservableSimpleList

Correct Item: CompanyImplBean

Correct Item: Factory

Correct Item: logging

Correct Item: Employee

Correct Item: ContainerImplBean

Correct Item: AddToList

Correct Item: DepartmentImplPojo

Correct Item: DepartmentImplBean

Correct Item: CompanyImplPojo

Correct Item: BeanFactory

Correct Item: treestructure

Create Alloy CK File:
File Name: /home/jefferson/workspace/ferramentaLPSSM/Alloy/targetCKAlloy.als
Content: module targetCKAlloy
open default
 pred provided[] { 
( isTrue[treestructure] => (isTrue[Subunit]) )
( isTrue[treestructure] => (isTrue[Company]) )
( isTrue[treestructure] => (isTrue[DepartmentImplBean]) )
( isTrue[treestructure] => (isTrue[ReturningVisitor]) )
( isTrue[treestructure] => (isTrue[CompanyImplPojo]) )
( isTrue[treestructure] => (isTrue[EmployeeImplBean]) )
( isTrue[treestructure] => (isTrue[PojoFactory]) )
( isTrue[treestructure] => (isTrue[EmployeeImplPojo]) )
( isTrue[treestructure] => (isTrue[BeanFactory]) )
( isTrue[treestructure] => (isTrue[AddToList]) )
( isTrue[treestructure] => (isTrue[Factory]) )
( isTrue[treestructure] => (isTrue[ChangeList]) )
( isTrue[javaexorcismspl] => (isTrue[Basics]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo]) )
( isTrue[treestructure] => (isTrue[ComponentImplBean]) )
( isTrue[treestructure] => (isTrue[Container]) )
( isTrue[logging] => (isTrue[Logging]) )
( isTrue[treestructure] => (isTrue[SimpleLinkedList]) )
( isTrue[treestructure] => (isTrue[Component]) )
( isTrue[javaexorcismspl] => (isTrue[Junit]) )
( isTrue[treestructure] => (isTrue[ContainerImplBean]) )
( isTrue[treestructure] => (isTrue[ObservableSimpleList]) )
( isTrue[treestructure] => (isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[Main]) )
( isTrue[treestructure] => (isTrue[Department]) )
( isTrue[treestructure] => (isTrue[VoidVisitor]) )
( isTrue[treestructure] => (isTrue[ContainerImplPojo]) )
( isTrue[treestructure] => (isTrue[CompanyImplBean]) )
( isTrue[treestructure] => (isTrue[SimpleList]) )
( isTrue[treestructure] => (isTrue[Build]) )
( isTrue[treestructure] => (isTrue[RemoveFromList]) )
( isTrue[treestructure] => (isTrue[DepartmentImplPojo]) )
 }

 pred required[] { 
( isTrue[treestructure] => (isTrue[Component]) )
( isTrue[treestructure] => (isTrue[Container]) )
( isTrue[treestructure] => (isTrue[ContainerImplPojo] and isTrue[Subunit] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[Company] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[ContainerImplPojo] and isTrue[Subunit] and isTrue[Department] and isTrue[Company]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[EmployeeImplPojo] and isTrue[DepartmentImplPojo] and isTrue[CompanyImplBean] and isTrue[Factory] and isTrue[Company] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[EmployeeImplPojo] and isTrue[DepartmentImplPojo] and isTrue[CompanyImplBean] and isTrue[Factory] and isTrue[Company] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[ChangeList]) )
( isTrue[treestructure] => (isTrue[Department] and isTrue[Company] and isTrue[Employee]) )
( isTrue[javaexorcismspl] => (isTrue[Factory] and isTrue[Department] and isTrue[Company] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[Component]) )
( isTrue[treestructure] => (isTrue[Component]) )
( isTrue[treestructure] => (isTrue[Subunit] and isTrue[Component]) )
( isTrue[logging] => (isTrue[EmployeeImplBean] and isTrue[EmployeeImplPojo]) )
( isTrue[treestructure] => (isTrue[SimpleList]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo] and isTrue[ObservableSimpleList] and isTrue[Subunit] and isTrue[SimpleLinkedList] and isTrue[Container]) )
( isTrue[treestructure] => (isTrue[AddToList] and isTrue[SimpleList] and isTrue[RemoveFromList]) )
( isTrue[treestructure] => (isTrue[Subunit]) )
( isTrue[treestructure] => (isTrue[EmployeeImplBean] and isTrue[EmployeeImplPojo] and isTrue[Factory] and isTrue[Department] and isTrue[Company] and isTrue[Employee] and isTrue[BeanFactory]) )
( isTrue[treestructure] => (isTrue[Subunit] and isTrue[Employee] and isTrue[Container]) )
( isTrue[treestructure] => (isTrue[Company] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo] and isTrue[Subunit] and isTrue[Container]) )
( isTrue[treestructure] => (isTrue[ContainerImplPojo] and isTrue[Company]) )
( isTrue[treestructure] => (isTrue[ChangeList]) )
( isTrue[treestructure] => (isTrue[ContainerImplPojo] and isTrue[Subunit] and isTrue[Department] and isTrue[Employee]) )
 }

 pred semanticaCK[] { provided[] => required[] }
one sig ReturningVisitor, Basics, Subunit, RemoveFromList, Logging, ComponentImplPojo, PojoFactory, Junit, Main, EmployeeImplPojo, VoidVisitor, Build, ChangeList, Component, Department, Company, SimpleList, SimpleLinkedList, Container, javaexorcismspl, EmployeeImplBean, ContainerImplPojo, ComponentImplBean, ObservableSimpleList, CompanyImplBean, Factory, logging, Employee, ContainerImplBean, AddToList, DepartmentImplPojo, DepartmentImplBean, CompanyImplPojo, BeanFactory, treestructure in Bool{}

pred semanticatarget[] { 
isTrue[javaexorcismspl] and ( isTrue[treestructure] <=> isTrue[javaexorcismspl] ) and ( isTrue[logging] => isTrue[javaexorcismspl] )
 }
assert WT {semanticatarget[] => semanticaCK[]}
check WT for 2


		The beginning of the safe composition test to the source SPL


Features: < 2 >
 [ javaexorcismspl ]  [ treestructure ] 

Checking CK ... 

FileContent: module sourceCKAlloy
open default
 pred provided[] { 
( isTrue[treestructure] => (isTrue[Subunit]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo]) )
( isTrue[treestructure] => (isTrue[EmployeeImplBean]) )
( isTrue[treestructure] => (isTrue[Company]) )
( isTrue[treestructure] => (isTrue[ReturningVisitor]) )
( isTrue[treestructure] => (isTrue[DepartmentImplBean]) )
( isTrue[treestructure] => (isTrue[DepartmentImplPojo]) )
( isTrue[treestructure] => (isTrue[ComponentImplBean]) )
( isTrue[treestructure] => (isTrue[Component]) )
( isTrue[treestructure] => (isTrue[PojoFactory]) )
( isTrue[treestructure] => (isTrue[BeanFactory]) )
( isTrue[treestructure] => (isTrue[AddToList]) )
( isTrue[treestructure] => (isTrue[Factory]) )
( isTrue[treestructure] => (isTrue[ChangeList]) )
( isTrue[javaexorcismspl] => (isTrue[Basics]) )
( isTrue[treestructure] => (isTrue[Container]) )
( isTrue[treestructure] => (isTrue[EmployeeImplPojo]) )
( isTrue[treestructure] => (isTrue[SimpleLinkedList]) )
( isTrue[javaexorcismspl] => (isTrue[Junit]) )
( isTrue[treestructure] => (isTrue[ContainerImplBean]) )
( isTrue[treestructure] => (isTrue[ObservableSimpleList]) )
( isTrue[treestructure] => (isTrue[CompanyImplPojo]) )
( isTrue[treestructure] => (isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[Main]) )
( isTrue[treestructure] => (isTrue[Department]) )
( isTrue[treestructure] => (isTrue[VoidVisitor]) )
( isTrue[treestructure] => (isTrue[ContainerImplPojo]) )
( isTrue[treestructure] => (isTrue[SimpleList]) )
( isTrue[treestructure] => (isTrue[Build]) )
( isTrue[treestructure] => (isTrue[RemoveFromList]) )
( isTrue[treestructure] => (isTrue[CompanyImplBean]) )
 }

 pred required[] { 
( isTrue[treestructure] => (isTrue[Component]) )
( isTrue[treestructure] => (isTrue[ReturningVisitor] and isTrue[VoidVisitor] and isTrue[Component]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo] and isTrue[ReturningVisitor] and isTrue[VoidVisitor] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[Container]) )
( isTrue[treestructure] => (isTrue[Company] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[ReturningVisitor] and isTrue[ContainerImplPojo] and isTrue[VoidVisitor] and isTrue[Subunit] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[ReturningVisitor] and isTrue[ContainerImplPojo] and isTrue[VoidVisitor] and isTrue[Subunit] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[ReturningVisitor] and isTrue[VoidVisitor] and isTrue[Component]) )
( isTrue[treestructure] => (isTrue[ReturningVisitor] and isTrue[VoidVisitor]) )
( isTrue[treestructure] => (isTrue[EmployeeImplPojo] and isTrue[DepartmentImplPojo] and isTrue[CompanyImplBean] and isTrue[Factory] and isTrue[Company] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[EmployeeImplPojo] and isTrue[DepartmentImplPojo] and isTrue[CompanyImplBean] and isTrue[Factory] and isTrue[Company] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[ChangeList]) )
( isTrue[treestructure] => (isTrue[Department] and isTrue[Company] and isTrue[Employee]) )
( isTrue[javaexorcismspl] => (isTrue[Factory] and isTrue[Department] and isTrue[Company] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[Subunit] and isTrue[Component]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo] and isTrue[ReturningVisitor] and isTrue[VoidVisitor] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[SimpleList]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo] and isTrue[ObservableSimpleList] and isTrue[Subunit] and isTrue[SimpleLinkedList] and isTrue[Container]) )
( isTrue[treestructure] => (isTrue[AddToList] and isTrue[SimpleList] and isTrue[RemoveFromList]) )
( isTrue[treestructure] => (isTrue[ReturningVisitor] and isTrue[ContainerImplPojo] and isTrue[VoidVisitor] and isTrue[Subunit] and isTrue[Company] and isTrue[Department]) )
( isTrue[treestructure] => (isTrue[Subunit]) )
( isTrue[treestructure] => (isTrue[EmployeeImplBean] and isTrue[EmployeeImplPojo] and isTrue[Factory] and isTrue[Department] and isTrue[Company] and isTrue[Employee] and isTrue[BeanFactory]) )
( isTrue[treestructure] => (isTrue[Subunit] and isTrue[Employee] and isTrue[Container]) )
( isTrue[treestructure] => (isTrue[Company] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo] and isTrue[Subunit] and isTrue[Container]) )
( isTrue[treestructure] => (isTrue[ChangeList]) )
( isTrue[treestructure] => (isTrue[ReturningVisitor] and isTrue[ContainerImplPojo] and isTrue[VoidVisitor] and isTrue[Company]) )
 }

 pred semanticaCK[] { provided[] => required[] }
one sig ReturningVisitor, Basics, Subunit, RemoveFromList, ComponentImplPojo, PojoFactory, Junit, Main, EmployeeImplPojo, VoidVisitor, Build, ChangeList, Component, Department, Company, SimpleList, SimpleLinkedList, Container, javaexorcismspl, EmployeeImplBean, ContainerImplPojo, ObservableSimpleList, ComponentImplBean, CompanyImplBean, Factory, Employee, ContainerImplBean, AddToList, DepartmentImplPojo, DepartmentImplBean, CompanyImplPojo, BeanFactory, treestructure in Bool{}

pred semanticasource[] { 
isTrue[javaexorcismspl] and ( isTrue[treestructure] <=> isTrue[javaexorcismspl] )
 }
assert WT {semanticasource[] => semanticaCK[]}
check WT for 2


Content: module sourceCKAlloy
open default
 pred provided[] { 
( isTrue[treestructure] => (isTrue[Subunit]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo]) )
( isTrue[treestructure] => (isTrue[EmployeeImplBean]) )
( isTrue[treestructure] => (isTrue[Company]) )
( isTrue[treestructure] => (isTrue[ReturningVisitor]) )
( isTrue[treestructure] => (isTrue[DepartmentImplBean]) )
( isTrue[treestructure] => (isTrue[DepartmentImplPojo]) )
( isTrue[treestructure] => (isTrue[ComponentImplBean]) )
( isTrue[treestructure] => (isTrue[Component]) )
( isTrue[treestructure] => (isTrue[PojoFactory]) )
( isTrue[treestructure] => (isTrue[BeanFactory]) )
( isTrue[treestructure] => (isTrue[AddToList]) )
( isTrue[treestructure] => (isTrue[Factory]) )
( isTrue[treestructure] => (isTrue[ChangeList]) )
( isTrue[javaexorcismspl] => (isTrue[Basics]) )
( isTrue[treestructure] => (isTrue[Container]) )
( isTrue[treestructure] => (isTrue[EmployeeImplPojo]) )
( isTrue[treestructure] => (isTrue[SimpleLinkedList]) )
( isTrue[javaexorcismspl] => (isTrue[Junit]) )
( isTrue[treestructure] => (isTrue[ContainerImplBean]) )
( isTrue[treestructure] => (isTrue[ObservableSimpleList]) )
( isTrue[treestructure] => (isTrue[CompanyImplPojo]) )
( isTrue[treestructure] => (isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[Main]) )
( isTrue[treestructure] => (isTrue[Department]) )
( isTrue[treestructure] => (isTrue[VoidVisitor]) )
( isTrue[treestructure] => (isTrue[ContainerImplPojo]) )
( isTrue[treestructure] => (isTrue[SimpleList]) )
( isTrue[treestructure] => (isTrue[Build]) )
( isTrue[treestructure] => (isTrue[RemoveFromList]) )
( isTrue[treestructure] => (isTrue[CompanyImplBean]) )
 }

 pred required[] { 
( isTrue[treestructure] => (isTrue[Component]) )
( isTrue[treestructure] => (isTrue[ReturningVisitor] and isTrue[VoidVisitor] and isTrue[Component]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo] and isTrue[ReturningVisitor] and isTrue[VoidVisitor] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[Container]) )
( isTrue[treestructure] => (isTrue[Company] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[ReturningVisitor] and isTrue[ContainerImplPojo] and isTrue[VoidVisitor] and isTrue[Subunit] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[ReturningVisitor] and isTrue[ContainerImplPojo] and isTrue[VoidVisitor] and isTrue[Subunit] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[ReturningVisitor] and isTrue[VoidVisitor] and isTrue[Component]) )
( isTrue[treestructure] => (isTrue[ReturningVisitor] and isTrue[VoidVisitor]) )
( isTrue[treestructure] => (isTrue[EmployeeImplPojo] and isTrue[DepartmentImplPojo] and isTrue[CompanyImplBean] and isTrue[Factory] and isTrue[Company] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[EmployeeImplPojo] and isTrue[DepartmentImplPojo] and isTrue[CompanyImplBean] and isTrue[Factory] and isTrue[Company] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[ChangeList]) )
( isTrue[treestructure] => (isTrue[Department] and isTrue[Company] and isTrue[Employee]) )
( isTrue[javaexorcismspl] => (isTrue[Factory] and isTrue[Department] and isTrue[Company] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[Subunit] and isTrue[Component]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo] and isTrue[ReturningVisitor] and isTrue[VoidVisitor] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[SimpleList]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo] and isTrue[ObservableSimpleList] and isTrue[Subunit] and isTrue[SimpleLinkedList] and isTrue[Container]) )
( isTrue[treestructure] => (isTrue[AddToList] and isTrue[SimpleList] and isTrue[RemoveFromList]) )
( isTrue[treestructure] => (isTrue[ReturningVisitor] and isTrue[ContainerImplPojo] and isTrue[VoidVisitor] and isTrue[Subunit] and isTrue[Company] and isTrue[Department]) )
( isTrue[treestructure] => (isTrue[Subunit]) )
( isTrue[treestructure] => (isTrue[EmployeeImplBean] and isTrue[EmployeeImplPojo] and isTrue[Factory] and isTrue[Department] and isTrue[Company] and isTrue[Employee] and isTrue[BeanFactory]) )
( isTrue[treestructure] => (isTrue[Subunit] and isTrue[Employee] and isTrue[Container]) )
( isTrue[treestructure] => (isTrue[Company] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo] and isTrue[Subunit] and isTrue[Container]) )
( isTrue[treestructure] => (isTrue[ChangeList]) )
( isTrue[treestructure] => (isTrue[ReturningVisitor] and isTrue[ContainerImplPojo] and isTrue[VoidVisitor] and isTrue[Company]) )
 }

 pred semanticaCK[] { provided[] => required[] }
one sig ReturningVisitor, Basics, Subunit, RemoveFromList, ComponentImplPojo, PojoFactory, Junit, Main, EmployeeImplPojo, VoidVisitor, Build, ChangeList, Component, Department, Company, SimpleList, SimpleLinkedList, Container, javaexorcismspl, EmployeeImplBean, ContainerImplPojo, ObservableSimpleList, ComponentImplBean, CompanyImplBean, Factory, Employee, ContainerImplBean, AddToList, DepartmentImplPojo, DepartmentImplBean, CompanyImplPojo, BeanFactory, treestructure in Bool{}

pred semanticasource[] { 
isTrue[javaexorcismspl] and ( isTrue[treestructure] <=> isTrue[javaexorcismspl] )
 }
assert WT {semanticasource[] => semanticaCK[]}
check WT for 2

world get All Commands SIZE: 1
Command: Check WT for 2

ans:
 ---OUTCOME---
Unsatisfiable.


		End of Safe Composition test to the + source SPL

Well Formedness to the <Source> SPL: true


		The beginning of the safe composition test to the target SPL


Features: < 3 >
 [ javaexorcismspl ]  [ logging ]  [ treestructure ] 

Checking CK ... 

FileContent: module targetCKAlloy
open default
 pred provided[] { 
( isTrue[treestructure] => (isTrue[Subunit]) )
( isTrue[treestructure] => (isTrue[Company]) )
( isTrue[treestructure] => (isTrue[DepartmentImplBean]) )
( isTrue[treestructure] => (isTrue[ReturningVisitor]) )
( isTrue[treestructure] => (isTrue[CompanyImplPojo]) )
( isTrue[treestructure] => (isTrue[EmployeeImplBean]) )
( isTrue[treestructure] => (isTrue[PojoFactory]) )
( isTrue[treestructure] => (isTrue[EmployeeImplPojo]) )
( isTrue[treestructure] => (isTrue[BeanFactory]) )
( isTrue[treestructure] => (isTrue[AddToList]) )
( isTrue[treestructure] => (isTrue[Factory]) )
( isTrue[treestructure] => (isTrue[ChangeList]) )
( isTrue[javaexorcismspl] => (isTrue[Basics]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo]) )
( isTrue[treestructure] => (isTrue[ComponentImplBean]) )
( isTrue[treestructure] => (isTrue[Container]) )
( isTrue[logging] => (isTrue[Logging]) )
( isTrue[treestructure] => (isTrue[SimpleLinkedList]) )
( isTrue[treestructure] => (isTrue[Component]) )
( isTrue[javaexorcismspl] => (isTrue[Junit]) )
( isTrue[treestructure] => (isTrue[ContainerImplBean]) )
( isTrue[treestructure] => (isTrue[ObservableSimpleList]) )
( isTrue[treestructure] => (isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[Main]) )
( isTrue[treestructure] => (isTrue[Department]) )
( isTrue[treestructure] => (isTrue[VoidVisitor]) )
( isTrue[treestructure] => (isTrue[ContainerImplPojo]) )
( isTrue[treestructure] => (isTrue[CompanyImplBean]) )
( isTrue[treestructure] => (isTrue[SimpleList]) )
( isTrue[treestructure] => (isTrue[Build]) )
( isTrue[treestructure] => (isTrue[RemoveFromList]) )
( isTrue[treestructure] => (isTrue[DepartmentImplPojo]) )
 }

 pred required[] { 
( isTrue[treestructure] => (isTrue[Component]) )
( isTrue[treestructure] => (isTrue[Container]) )
( isTrue[treestructure] => (isTrue[ContainerImplPojo] and isTrue[Subunit] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[Company] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[ContainerImplPojo] and isTrue[Subunit] and isTrue[Department] and isTrue[Company]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[EmployeeImplPojo] and isTrue[DepartmentImplPojo] and isTrue[CompanyImplBean] and isTrue[Factory] and isTrue[Company] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[EmployeeImplPojo] and isTrue[DepartmentImplPojo] and isTrue[CompanyImplBean] and isTrue[Factory] and isTrue[Company] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[ChangeList]) )
( isTrue[treestructure] => (isTrue[Department] and isTrue[Company] and isTrue[Employee]) )
( isTrue[javaexorcismspl] => (isTrue[Factory] and isTrue[Department] and isTrue[Company] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[Component]) )
( isTrue[treestructure] => (isTrue[Component]) )
( isTrue[treestructure] => (isTrue[Subunit] and isTrue[Component]) )
( isTrue[logging] => (isTrue[EmployeeImplBean] and isTrue[EmployeeImplPojo]) )
( isTrue[treestructure] => (isTrue[SimpleList]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo] and isTrue[ObservableSimpleList] and isTrue[Subunit] and isTrue[SimpleLinkedList] and isTrue[Container]) )
( isTrue[treestructure] => (isTrue[AddToList] and isTrue[SimpleList] and isTrue[RemoveFromList]) )
( isTrue[treestructure] => (isTrue[Subunit]) )
( isTrue[treestructure] => (isTrue[EmployeeImplBean] and isTrue[EmployeeImplPojo] and isTrue[Factory] and isTrue[Department] and isTrue[Company] and isTrue[Employee] and isTrue[BeanFactory]) )
( isTrue[treestructure] => (isTrue[Subunit] and isTrue[Employee] and isTrue[Container]) )
( isTrue[treestructure] => (isTrue[Company] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo] and isTrue[Subunit] and isTrue[Container]) )
( isTrue[treestructure] => (isTrue[ContainerImplPojo] and isTrue[Company]) )
( isTrue[treestructure] => (isTrue[ChangeList]) )
( isTrue[treestructure] => (isTrue[ContainerImplPojo] and isTrue[Subunit] and isTrue[Department] and isTrue[Employee]) )
 }

 pred semanticaCK[] { provided[] => required[] }
one sig ReturningVisitor, Basics, Subunit, RemoveFromList, Logging, ComponentImplPojo, PojoFactory, Junit, Main, EmployeeImplPojo, VoidVisitor, Build, ChangeList, Component, Department, Company, SimpleList, SimpleLinkedList, Container, javaexorcismspl, EmployeeImplBean, ContainerImplPojo, ComponentImplBean, ObservableSimpleList, CompanyImplBean, Factory, logging, Employee, ContainerImplBean, AddToList, DepartmentImplPojo, DepartmentImplBean, CompanyImplPojo, BeanFactory, treestructure in Bool{}

pred semanticatarget[] { 
isTrue[javaexorcismspl] and ( isTrue[treestructure] <=> isTrue[javaexorcismspl] ) and ( isTrue[logging] => isTrue[javaexorcismspl] )
 }
assert WT {semanticatarget[] => semanticaCK[]}
check WT for 2


Content: module targetCKAlloy
open default
 pred provided[] { 
( isTrue[treestructure] => (isTrue[Subunit]) )
( isTrue[treestructure] => (isTrue[Company]) )
( isTrue[treestructure] => (isTrue[DepartmentImplBean]) )
( isTrue[treestructure] => (isTrue[ReturningVisitor]) )
( isTrue[treestructure] => (isTrue[CompanyImplPojo]) )
( isTrue[treestructure] => (isTrue[EmployeeImplBean]) )
( isTrue[treestructure] => (isTrue[PojoFactory]) )
( isTrue[treestructure] => (isTrue[EmployeeImplPojo]) )
( isTrue[treestructure] => (isTrue[BeanFactory]) )
( isTrue[treestructure] => (isTrue[AddToList]) )
( isTrue[treestructure] => (isTrue[Factory]) )
( isTrue[treestructure] => (isTrue[ChangeList]) )
( isTrue[javaexorcismspl] => (isTrue[Basics]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo]) )
( isTrue[treestructure] => (isTrue[ComponentImplBean]) )
( isTrue[treestructure] => (isTrue[Container]) )
( isTrue[logging] => (isTrue[Logging]) )
( isTrue[treestructure] => (isTrue[SimpleLinkedList]) )
( isTrue[treestructure] => (isTrue[Component]) )
( isTrue[javaexorcismspl] => (isTrue[Junit]) )
( isTrue[treestructure] => (isTrue[ContainerImplBean]) )
( isTrue[treestructure] => (isTrue[ObservableSimpleList]) )
( isTrue[treestructure] => (isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[Main]) )
( isTrue[treestructure] => (isTrue[Department]) )
( isTrue[treestructure] => (isTrue[VoidVisitor]) )
( isTrue[treestructure] => (isTrue[ContainerImplPojo]) )
( isTrue[treestructure] => (isTrue[CompanyImplBean]) )
( isTrue[treestructure] => (isTrue[SimpleList]) )
( isTrue[treestructure] => (isTrue[Build]) )
( isTrue[treestructure] => (isTrue[RemoveFromList]) )
( isTrue[treestructure] => (isTrue[DepartmentImplPojo]) )
 }

 pred required[] { 
( isTrue[treestructure] => (isTrue[Component]) )
( isTrue[treestructure] => (isTrue[Container]) )
( isTrue[treestructure] => (isTrue[ContainerImplPojo] and isTrue[Subunit] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[Company] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[ContainerImplPojo] and isTrue[Subunit] and isTrue[Department] and isTrue[Company]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[EmployeeImplPojo] and isTrue[DepartmentImplPojo] and isTrue[CompanyImplBean] and isTrue[Factory] and isTrue[Company] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[EmployeeImplPojo] and isTrue[DepartmentImplPojo] and isTrue[CompanyImplBean] and isTrue[Factory] and isTrue[Company] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[ChangeList]) )
( isTrue[treestructure] => (isTrue[Department] and isTrue[Company] and isTrue[Employee]) )
( isTrue[javaexorcismspl] => (isTrue[Factory] and isTrue[Department] and isTrue[Company] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[Component]) )
( isTrue[treestructure] => (isTrue[Component]) )
( isTrue[treestructure] => (isTrue[Subunit] and isTrue[Component]) )
( isTrue[logging] => (isTrue[EmployeeImplBean] and isTrue[EmployeeImplPojo]) )
( isTrue[treestructure] => (isTrue[SimpleList]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo] and isTrue[ObservableSimpleList] and isTrue[Subunit] and isTrue[SimpleLinkedList] and isTrue[Container]) )
( isTrue[treestructure] => (isTrue[AddToList] and isTrue[SimpleList] and isTrue[RemoveFromList]) )
( isTrue[treestructure] => (isTrue[Subunit]) )
( isTrue[treestructure] => (isTrue[EmployeeImplBean] and isTrue[EmployeeImplPojo] and isTrue[Factory] and isTrue[Department] and isTrue[Company] and isTrue[Employee] and isTrue[BeanFactory]) )
( isTrue[treestructure] => (isTrue[Subunit] and isTrue[Employee] and isTrue[Container]) )
( isTrue[treestructure] => (isTrue[Company] and isTrue[Department] and isTrue[Employee]) )
( isTrue[treestructure] => (isTrue[ComponentImplPojo] and isTrue[Subunit] and isTrue[Container]) )
( isTrue[treestructure] => (isTrue[ContainerImplPojo] and isTrue[Company]) )
( isTrue[treestructure] => (isTrue[ChangeList]) )
( isTrue[treestructure] => (isTrue[ContainerImplPojo] and isTrue[Subunit] and isTrue[Department] and isTrue[Employee]) )
 }

 pred semanticaCK[] { provided[] => required[] }
one sig ReturningVisitor, Basics, Subunit, RemoveFromList, Logging, ComponentImplPojo, PojoFactory, Junit, Main, EmployeeImplPojo, VoidVisitor, Build, ChangeList, Component, Department, Company, SimpleList, SimpleLinkedList, Container, javaexorcismspl, EmployeeImplBean, ContainerImplPojo, ComponentImplBean, ObservableSimpleList, CompanyImplBean, Factory, logging, Employee, ContainerImplBean, AddToList, DepartmentImplPojo, DepartmentImplBean, CompanyImplPojo, BeanFactory, treestructure in Bool{}

pred semanticatarget[] { 
isTrue[javaexorcismspl] and ( isTrue[treestructure] <=> isTrue[javaexorcismspl] ) and ( isTrue[logging] => isTrue[javaexorcismspl] )
 }
assert WT {semanticatarget[] => semanticaCK[]}
check WT for 2

world get All Commands SIZE: 1
Command: Check WT for 2

ans:
 ---OUTCOME---
Unsatisfiable.


		End of Safe Composition test to the + target SPL

Well Formedness to the <Target> SPL.: true




		Ok. We have already checked the well formedness.


	 -> WF: true


# SOURCE Products List<1> #

1 -> [ javaexorcismspl ] [ treestructure ] 

# TARGET Products List<2> #

1 -> [ javaexorcismspl ] [ logging ] [ treestructure ] 

2 -> [ javaexorcismspl ] [ treestructure ] 

Product 0 ::  [ javaexorcismspl ] [ treestructure ]

 [ Subunit ] - src\org\softlang\company\Subunit.java

 [ ComponentImplPojo ] - src\org\softlang\company\impl\pojo\ComponentImpl.java

 [ EmployeeImplBean ] - src\org\softlang\company\impl\bean\EmployeeImpl.java

 [ Company ] - src\org\softlang\company\Company.java

 [ ReturningVisitor ] - src\org\softlang\visitor\ReturningVisitor.java

 [ DepartmentImplBean ] - src\org\softlang\company\impl\bean\DepartmentImpl.java

 [ DepartmentImplPojo ] - src\org\softlang\company\impl\pojo\DepartmentImpl.java

 [ ComponentImplBean ] - src\org\softlang\company\impl\bean\ComponentImpl.java

 [ Component ] - src\org\softlang\company\Component.java

 [ PojoFactory ] - src\org\softlang\company\factory\PojoFactory.java

 [ BeanFactory ] - src\org\softlang\company\factory\BeanFactory.java

 [ AddToList ] - src\org\softlang\util\AddToList.java

 [ Factory ] - src\org\softlang\company\factory\Factory.java

 [ ChangeList ] - src\org\softlang\util\ChangeList.java

 [ Basics ] - src\org\softlang\tests\Basics.java

 [ Container ] - src\org\softlang\company\Container.java

 [ EmployeeImplPojo ] - src\org\softlang\company\impl\pojo\EmployeeImpl.java

 [ SimpleLinkedList ] - src\org\softlang\util\SimpleLinkedList.java

 [ Junit ] - lib\Junit.jar

 [ ContainerImplBean ] - src\org\softlang\company\impl\bean\ContainerImpl.java

 [ ObservableSimpleList ] - src\org\softlang\util\ObservableSimpleList.java

 [ CompanyImplPojo ] - src\org\softlang\company\impl\pojo\CompanyImpl.java

 [ Employee ] - src\org\softlang\company\Employee.java

 [ Main ] - src\org\softlang\main\Main.java

 [ Department ] - src\org\softlang\company\Department.java

 [ VoidVisitor ] - src\org\softlang\visitor\VoidVisitor.java

 [ ContainerImplPojo ] - src\org\softlang\company\impl\pojo\ContainerImpl.java

 [ SimpleList ] - src\org\softlang\util\SimpleList.java

 [ Build ] - build.xml

 [ RemoveFromList ] - src\org\softlang\util\RemoveFromList.java

 [ CompanyImplBean ] - src\org\softlang\company\impl\bean\CompanyImpl.java
constante destino esta vazio: false


	Correspondent Product

Product 1 ::  [ javaexorcismspl ] [ treestructure ]

 [ Subunit ] - src\org\softlang\company\Subunit.java

 [ Company ] - src\org\softlang\company\Company.java

 [ DepartmentImplBean ] - src\org\softlang\company\impl\bean\DepartmentImpl.java

 [ ReturningVisitor ] - src\org\softlang\visitor\ReturningVisitor.java

 [ CompanyImplPojo ] - src\org\softlang\company\impl\pojo\CompanyImpl.java

 [ EmployeeImplBean ] - src\org\softlang\company\impl\bean\EmployeeImpl.java

 [ PojoFactory ] - src\org\softlang\company\factory\PojoFactory.java

 [ EmployeeImplPojo ] - src\org\softlang\company\impl\pojo\EmployeeImpl.java

 [ BeanFactory ] - src\org\softlang\company\factory\BeanFactory.java

 [ AddToList ] - src\org\softlang\util\AddToList.java

 [ Factory ] - src\org\softlang\company\factory\Factory.java

 [ ChangeList ] - src\org\softlang\util\ChangeList.java

 [ Basics ] - src\org\softlang\tests\Basics.java

 [ ComponentImplPojo ] - src\org\softlang\company\impl\pojo\ComponentImpl.java

 [ ComponentImplBean ] - src\org\softlang\company\impl\bean\ComponentImpl.java

 [ Container ] - src\org\softlang\company\Container.java

 [ SimpleLinkedList ] - src\org\softlang\util\SimpleLinkedList.java

 [ Component ] - src\org\softlang\company\Component.java

 [ Junit ] - lib\Junit.jar

 [ ContainerImplBean ] - src\org\softlang\company\impl\bean\ContainerImpl.java

 [ ObservableSimpleList ] - src\org\softlang\util\ObservableSimpleList.java

 [ Employee ] - src\org\softlang\company\Employee.java

 [ Main ] - src\org\softlang\main\Main.java

 [ Department ] - src\org\softlang\company\Department.java

 [ VoidVisitor ] - src\org\softlang\visitor\VoidVisitor.java

 [ ContainerImplPojo ] - src\org\softlang\company\impl\pojo\ContainerImpl.java

 [ CompanyImplBean ] - src\org\softlang\company\impl\bean\CompanyImpl.java

 [ SimpleList ] - src\org\softlang\util\SimpleList.java

 [ Build ] - build.xml

 [ RemoveFromList ] - src\org\softlang\util\RemoveFromList.java

 [ DepartmentImplPojo ] - src\org\softlang\company\impl\pojo\DepartmentImpl.java
constante destino esta vazio: false


	SOURCE Mapping Asset DESTINY:

 key 0: ReturningVisitor content: src\org\softlang\visitor\ReturningVisitor.java
 key 1: Basics content: src\org\softlang\tests\Basics.java
 key 2: Subunit content: src\org\softlang\company\Subunit.java
 key 3: RemoveFromList content: src\org\softlang\util\RemoveFromList.java
 key 4: ComponentImplPojo content: src\org\softlang\company\impl\pojo\ComponentImpl.java
 key 5: PojoFactory content: src\org\softlang\company\factory\PojoFactory.java
 key 6: Junit content: lib\Junit.jar
 key 7: Main content: src\org\softlang\main\Main.java
 key 8: EmployeeImplPojo content: src\org\softlang\company\impl\pojo\EmployeeImpl.java
 key 9: VoidVisitor content: src\org\softlang\visitor\VoidVisitor.java
 key 10: Build content: build.xml
 key 11: ChangeList content: src\org\softlang\util\ChangeList.java
 key 12: Component content: src\org\softlang\company\Component.java
 key 13: Company content: src\org\softlang\company\Company.java
 key 14: Department content: src\org\softlang\company\Department.java
 key 15: SimpleList content: src\org\softlang\util\SimpleList.java
 key 16: SimpleLinkedList content: src\org\softlang\util\SimpleLinkedList.java
 key 17: Container content: src\org\softlang\company\Container.java
 key 18: EmployeeImplBean content: src\org\softlang\company\impl\bean\EmployeeImpl.java
 key 19: ContainerImplPojo content: src\org\softlang\company\impl\pojo\ContainerImpl.java
 key 20: ComponentImplBean content: src\org\softlang\company\impl\bean\ComponentImpl.java
 key 21: ObservableSimpleList content: src\org\softlang\util\ObservableSimpleList.java
 key 22: CompanyImplBean content: src\org\softlang\company\impl\bean\CompanyImpl.java
 key 23: Factory content: src\org\softlang\company\factory\Factory.java
 key 24: Employee content: src\org\softlang\company\Employee.java
 key 25: ContainerImplBean content: src\org\softlang\company\impl\bean\ContainerImpl.java
 key 26: AddToList content: src\org\softlang\util\AddToList.java
 key 27: DepartmentImplPojo content: src\org\softlang\company\impl\pojo\DepartmentImpl.java
 key 28: DepartmentImplBean content: src\org\softlang\company\impl\bean\DepartmentImpl.java
 key 29: CompanyImplPojo content: src\org\softlang\company\impl\pojo\CompanyImpl.java
 key 30: BeanFactory content: src\org\softlang\company\factory\BeanFactory.java

	TARGET Mapping Asset DESTINY:

 key 0: ReturningVisitor content: src\org\softlang\visitor\ReturningVisitor.java
 key 1: Basics content: src\org\softlang\tests\Basics.java
 key 2: Subunit content: src\org\softlang\company\Subunit.java
 key 3: RemoveFromList content: src\org\softlang\util\RemoveFromList.java
 key 4: ComponentImplPojo content: src\org\softlang\company\impl\pojo\ComponentImpl.java
 key 5: PojoFactory content: src\org\softlang\company\factory\PojoFactory.java
 key 6: Junit content: lib\Junit.jar
 key 7: Main content: src\org\softlang\main\Main.java
 key 8: EmployeeImplPojo content: src\org\softlang\company\impl\pojo\EmployeeImpl.java
 key 9: VoidVisitor content: src\org\softlang\visitor\VoidVisitor.java
 key 10: Build content: build.xml
 key 11: ChangeList content: src\org\softlang\util\ChangeList.java
 key 12: Component content: src\org\softlang\company\Component.java
 key 13: Company content: src\org\softlang\company\Company.java
 key 14: Department content: src\org\softlang\company\Department.java
 key 15: SimpleList content: src\org\softlang\util\SimpleList.java
 key 16: SimpleLinkedList content: src\org\softlang\util\SimpleLinkedList.java
 key 17: Container content: src\org\softlang\company\Container.java
 key 18: EmployeeImplBean content: src\org\softlang\company\impl\bean\EmployeeImpl.java
 key 19: ContainerImplPojo content: src\org\softlang\company\impl\pojo\ContainerImpl.java
 key 20: ComponentImplBean content: src\org\softlang\company\impl\bean\ComponentImpl.java
 key 21: ObservableSimpleList content: src\org\softlang\util\ObservableSimpleList.java
 key 22: CompanyImplBean content: src\org\softlang\company\impl\bean\CompanyImpl.java
 key 23: Factory content: src\org\softlang\company\factory\Factory.java
 key 24: Employee content: src\org\softlang\company\Employee.java
 key 25: ContainerImplBean content: src\org\softlang\company\impl\bean\ContainerImpl.java
 key 26: AddToList content: src\org\softlang\util\AddToList.java
 key 27: DepartmentImplPojo content: src\org\softlang\company\impl\pojo\DepartmentImpl.java
 key 28: CompanyImplPojo content: src\org\softlang\company\impl\pojo\CompanyImpl.java
 key 29: DepartmentImplBean content: src\org\softlang\company\impl\bean\DepartmentImpl.java
 key 30: BeanFactory content: src\org\softlang\company\factory\BeanFactory.java


	SOURCE Mapping Asset ORGIGEM:

 key 0: ReturningVisitor content: /src/org/softlang/visitor/ReturningVisitor.java
 key 1: Basics content: /src/org/softlang/tests/Basics.java
 key 2: Subunit content: /src/org/softlang/company/Subunit.java
 key 3: RemoveFromList content: /src/org/softlang/util/RemoveFromList.java
 key 4: ComponentImplPojo content: /src/org/softlang/company/impl/pojo/ComponentImpl.java
 key 5: Junit content: /lib/Junit.jar
 key 6: PojoFactory content: /src/org/softlang/company/factory/PojoFactory.java
 key 7: Main content: /src/org/softlang/main/Main.java
 key 8: EmployeeImplPojo content: /src/org/softlang/company/impl/pojo/EmployeeImpl.java
 key 9: VoidVisitor content: /src/org/softlang/visitor/VoidVisitor.java
 key 10: Build content: /build.xml
 key 11: ChangeList content: /src/org/softlang/util/ChangeList.java
 key 12: Component content: /src/org/softlang/company/Component.java
 key 13: Company content: /src/org/softlang/company/Company.java
 key 14: Department content: /src/org/softlang/company/Department.java
 key 15: SimpleList content: /src/org/softlang/util/SimpleList.java
 key 16: SimpleLinkedList content: /src/org/softlang/util/SimpleLinkedList.java
 key 17: Container content: /src/org/softlang/company/Container.java
 key 18: EmployeeImplBean content: /src/org/softlang/company/impl/bean/EmployeeImpl.java
 key 19: ContainerImplPojo content: /src/org/softlang/company/impl/pojo/ContainerImpl.java
 key 20: ComponentImplBean content: /src/org/softlang/company/impl/bean/ComponentImpl.java
 key 21: ObservableSimpleList content: /src/org/softlang/util/ObservableSimpleList.java
 key 22: CompanyImplBean content: /src/org/softlang/company/impl/bean/CompanyImpl.java
 key 23: Factory content: /src/org/softlang/company/factory/Factory.java
 key 24: Employee content: /src/org/softlang/company/Employee.java
 key 25: ContainerImplBean content: /src/org/softlang/company/impl/bean/ContainerImpl.java
 key 26: AddToList content: /src/org/softlang/util/AddToList.java
 key 27: CompanyImplPojo content: /src/org/softlang/company/impl/pojo/CompanyImpl.java
 key 28: DepartmentImplBean content: /src/org/softlang/company/impl/bean/DepartmentImpl.java
 key 29: DepartmentImplPojo content: /src/org/softlang/company/impl/pojo/DepartmentImpl.java
 key 30: BeanFactory content: /src/org/softlang/company/factory/BeanFactory.java


	TARGET Mapping Asset ORGIGEM:

 key 0: ReturningVisitor content: /src/org/softlang/visitor/ReturningVisitor.java
 key 1: Basics content: /src/org/softlang/tests/Basics.java
 key 2: Subunit content: /src/org/softlang/company/Subunit.java
 key 3: RemoveFromList content: /src/org/softlang/util/RemoveFromList.java
 key 4: ComponentImplPojo content: /src/org/softlang/company/impl/pojo/ComponentImpl.java
 key 5: Junit content: /lib/Junit.jar
 key 6: PojoFactory content: /src/org/softlang/company/factory/PojoFactory.java
 key 7: Main content: /src/org/softlang/main/Main.java
 key 8: EmployeeImplPojo content: /src/org/softlang/company/impl/pojo/EmployeeImpl.java
 key 9: VoidVisitor content: /src/org/softlang/visitor/VoidVisitor.java
 key 10: Build content: /build.xml
 key 11: ChangeList content: /src/org/softlang/util/ChangeList.java
 key 12: Component content: /src/org/softlang/company/Component.java
 key 13: Company content: /src/org/softlang/company/Company.java
 key 14: Department content: /src/org/softlang/company/Department.java
 key 15: SimpleList content: /src/org/softlang/util/SimpleList.java
 key 16: SimpleLinkedList content: /src/org/softlang/util/SimpleLinkedList.java
 key 17: Container content: /src/org/softlang/company/Container.java
 key 18: EmployeeImplBean content: /src/org/softlang/company/impl/bean/EmployeeImpl.java
 key 19: ContainerImplPojo content: /src/org/softlang/company/impl/pojo/ContainerImpl.java
 key 20: ComponentImplBean content: /src/org/softlang/company/impl/bean/ComponentImpl.java
 key 21: ObservableSimpleList content: /src/org/softlang/util/ObservableSimpleList.java
 key 22: CompanyImplBean content: /src/org/softlang/company/impl/bean/CompanyImpl.java
 key 23: Factory content: /src/org/softlang/company/factory/Factory.java
 key 24: Employee content: /src/org/softlang/company/Employee.java
 key 25: ContainerImplBean content: /src/org/softlang/company/impl/bean/ContainerImpl.java
 key 26: AddToList content: /src/org/softlang/util/AddToList.java
 key 27: DepartmentImplBean content: /src/org/softlang/company/impl/bean/DepartmentImpl.java
 key 28: CompanyImplPojo content: /src/org/softlang/company/impl/pojo/CompanyImpl.java
 key 29: DepartmentImplPojo content: /src/org/softlang/company/impl/pojo/DepartmentImpl.java
 key 30: BeanFactory content: /src/org/softlang/company/factory/BeanFactory.java


	SOURCE PREPROCESS TAGS:

 key 0: javaexorcismspl
 key 1: treestructure


	 TARGET PREPROCESS TAGS:

 key 0: javaexorcismspl
 key 1: treestructure



mappingAssetDestiny: true mappingAssetOrigin: true preProcess: true

Product 2 ::  [ javaexorcismspl ] [ logging ] [ treestructure ]

 [ Subunit ] - src\org\softlang\company\Subunit.java

 [ Company ] - src\org\softlang\company\Company.java

 [ DepartmentImplBean ] - src\org\softlang\company\impl\bean\DepartmentImpl.java

 [ ReturningVisitor ] - src\org\softlang\visitor\ReturningVisitor.java

 [ CompanyImplPojo ] - src\org\softlang\company\impl\pojo\CompanyImpl.java

 [ EmployeeImplBean ] - src\org\softlang\company\impl\bean\EmployeeImpl.java

 [ PojoFactory ] - src\org\softlang\company\factory\PojoFactory.java

 [ EmployeeImplPojo ] - src\org\softlang\company\impl\pojo\EmployeeImpl.java

 [ BeanFactory ] - src\org\softlang\company\factory\BeanFactory.java

 [ AddToList ] - src\org\softlang\util\AddToList.java

 [ Factory ] - src\org\softlang\company\factory\Factory.java

 [ ChangeList ] - src\org\softlang\util\ChangeList.java

 [ Basics ] - src\org\softlang\tests\Basics.java

 [ ComponentImplPojo ] - src\org\softlang\company\impl\pojo\ComponentImpl.java

 [ ComponentImplBean ] - src\org\softlang\company\impl\bean\ComponentImpl.java

 [ Container ] - src\org\softlang\company\Container.java

 [ Logging ] - src\org\softlang\features\Logging.java

 [ SimpleLinkedList ] - src\org\softlang\util\SimpleLinkedList.java

 [ Component ] - src\org\softlang\company\Component.java

 [ Junit ] - lib\Junit.jar

 [ ContainerImplBean ] - src\org\softlang\company\impl\bean\ContainerImpl.java

 [ ObservableSimpleList ] - src\org\softlang\util\ObservableSimpleList.java

 [ Employee ] - src\org\softlang\company\Employee.java

 [ Main ] - src\org\softlang\main\Main.java

 [ Department ] - src\org\softlang\company\Department.java

 [ VoidVisitor ] - src\org\softlang\visitor\VoidVisitor.java

 [ ContainerImplPojo ] - src\org\softlang\company\impl\pojo\ContainerImpl.java

 [ CompanyImplBean ] - src\org\softlang\company\impl\bean\CompanyImpl.java

 [ SimpleList ] - src\org\softlang\util\SimpleList.java

 [ Build ] - build.xml

 [ RemoveFromList ] - src\org\softlang\util\RemoveFromList.java

 [ DepartmentImplPojo ] - src\org\softlang\company\impl\pojo\DepartmentImpl.java
constante destino esta vazio: false


 ... Attempting to marry products that did not have a par.


All products in the source have a really correspondent target product ?: true
FM and CK are refinement:- true
fieldA.getDeclaring: ContainerImpl
fieldA.getDeclaring: ContainerImpl

Have Source and Target the same assets ?:false 


List of Modified Classes: 
org.softlang.company.impl.pojo.ContainerImpl.java
org.softlang.company.impl.bean.CompanyImpl.java
org.softlang.company.impl.pojo.CompanyImpl.java
org.softlang.company.impl.bean.DepartmentImpl.java
org.softlang.company.impl.bean.ContainerImpl.java
org.softlang.company.Component.java
org.softlang.company.impl.pojo.EmployeeImpl.java
org.softlang.company.impl.pojo.ComponentImpl.java
org.softlang.util.ObservableSimpleList.java
org.softlang.company.impl.bean.EmployeeImpl.java
org.softlang.company.impl.bean.ComponentImpl.java
org.softlang.company.impl.pojo.DepartmentImpl.java

--------------------------

 Amount of modified classes: 12

 - Modified: org.softlang.company.impl.pojo.ContainerImpl.java
$classeToGenerateTestes Antes: org.softlang.company.impl.pojo.ContainerImpl.java
*classeToGenerateTestes Depois: org.softlang.company.impl.pojo.ContainerImpl.java
 - Modified: org.softlang.company.impl.bean.CompanyImpl.java
$classeToGenerateTestes Antes: org.softlang.company.impl.bean.CompanyImpl.java
*classeToGenerateTestes Depois: org.softlang.company.impl.bean.CompanyImpl.java
 - Modified: org.softlang.company.impl.pojo.CompanyImpl.java
$classeToGenerateTestes Antes: org.softlang.company.impl.pojo.CompanyImpl.java
*classeToGenerateTestes Depois: org.softlang.company.impl.pojo.CompanyImpl.java
 - Modified: org.softlang.company.impl.bean.DepartmentImpl.java
$classeToGenerateTestes Antes: org.softlang.company.impl.bean.DepartmentImpl.java
*classeToGenerateTestes Depois: org.softlang.company.impl.bean.DepartmentImpl.java
 - Modified: org.softlang.company.impl.bean.ContainerImpl.java
$classeToGenerateTestes Antes: org.softlang.company.impl.bean.ContainerImpl.java
*classeToGenerateTestes Depois: org.softlang.company.impl.bean.ContainerImpl.java
 - Modified: org.softlang.company.Component.java
$classeToGenerateTestes Antes: org.softlang.company.Component.java
*classeToGenerateTestes Depois: org.softlang.company.Component.java
 - Modified: org.softlang.company.impl.pojo.EmployeeImpl.java
$classeToGenerateTestes Antes: org.softlang.company.impl.pojo.EmployeeImpl.java
*classeToGenerateTestes Depois: org.softlang.company.impl.pojo.EmployeeImpl.java
 - Modified: org.softlang.company.impl.pojo.ComponentImpl.java
$classeToGenerateTestes Antes: org.softlang.company.impl.pojo.ComponentImpl.java
*classeToGenerateTestes Depois: org.softlang.company.impl.pojo.ComponentImpl.java
 - Modified: org.softlang.util.ObservableSimpleList.java
$classeToGenerateTestes Antes: org.softlang.util.ObservableSimpleList.java
*classeToGenerateTestes Depois: org.softlang.util.ObservableSimpleList.java
 - Modified: org.softlang.company.impl.bean.EmployeeImpl.java
$classeToGenerateTestes Antes: org.softlang.company.impl.bean.EmployeeImpl.java
*classeToGenerateTestes Depois: org.softlang.company.impl.bean.EmployeeImpl.java
 - Modified: org.softlang.company.impl.bean.ComponentImpl.java
$classeToGenerateTestes Antes: org.softlang.company.impl.bean.ComponentImpl.java
*classeToGenerateTestes Depois: org.softlang.company.impl.bean.ComponentImpl.java
 - Modified: org.softlang.company.impl.pojo.DepartmentImpl.java
$classeToGenerateTestes Antes: org.softlang.company.impl.pojo.DepartmentImpl.java
*classeToGenerateTestes Depois: org.softlang.company.impl.pojo.DepartmentImpl.java

clean_tests:
     [echo]  This task is responsible to clean all tests. 

compile_target_ind:
     [echo]  TARGET Compile IND 
     [echo] The AspectJ compiler can be used like Javac to compile Java sources, but it can also compile AspectJ sources or weave binary aspects with Java bytecode.

compile_source:
     [echo]  SOURCE Compile 
     [echo] The AspectJ compiler can be used like Javac to compile Java sources, but it can also compile AspectJ sources or weave binary aspects with Java bytecode.
Safe Refactor!


ANT BUILD DIRECTORY: /build.xml
#classes pra teste: org.softlang.company.impl.pojo.ContainerImpl|org.softlang.company.impl.bean.CompanyImpl|org.softlang.company.impl.pojo.CompanyImpl|org.softlang.company.impl.bean.DepartmentImpl|org.softlang.company.impl.bean.ContainerImpl|org.softlang.company.Component|org.softlang.company.impl.pojo.EmployeeImpl|org.softlang.company.impl.pojo.ComponentImpl|org.softlang.util.ObservableSimpleList|org.softlang.company.impl.bean.EmployeeImpl|org.softlang.company.impl.bean.ComponentImpl|org.softlang.company.impl.pojo.DepartmentImpl

 You can find ant build logs in: < /tmp/safeRefactorAJ/log.txt >

  [taskdef] Could not load definitions from resource tasks.properties. It could not be found.

Max Testes: 4

TimeOut: 120

Classes: org.softlang.company.impl.pojo.ContainerImpl|org.softlang.company.impl.bean.CompanyImpl|org.softlang.company.impl.pojo.CompanyImpl|org.softlang.company.impl.bean.DepartmentImpl|org.softlang.company.impl.bean.ContainerImpl|org.softlang.company.Component|org.softlang.company.impl.pojo.EmployeeImpl|org.softlang.company.impl.pojo.ComponentImpl|org.softlang.util.ObservableSimpleList|org.softlang.company.impl.bean.EmployeeImpl|org.softlang.company.impl.bean.ComponentImpl|org.softlang.company.impl.pojo.DepartmentImpl

init:

clean:

analyze_target:
     [echo] 
     [echo] 			            Analyzing target methods
     [echo] 			        
     [java] 
     [java] Mapp Class Two
     [java] 
     [java] file source: /home/jefferson/workspace/ferramentaLPSSM/Products/Product0/target/bin
     [java] 
     [java]  I found it: /home/jefferson/workspace/ferramentaLPSSM/Products/Product0/target/bin/org/softlang/company/Component.class
     [java] File Source Directory: /home/jefferson/workspace/ferramentaLPSSM/Products/Product0/target/bin/org/softlang/company/Component.class
     [java] 
     [java]  List of Classes: 22:
     [java] 
     [java] -> org.softlang.company.Component
     [java] 
     [java] -> org.softlang.company.Employee
     [java] 
     [java] -> org.softlang.company.Container
     [java] 
     [java] -> org.softlang.company.impl.bean.DepartmentImpl
     [java] 
     [java] -> org.softlang.company.impl.bean.ComponentImpl
     [java] 
     [java] -> org.softlang.company.impl.bean.CompanyImpl
     [java] 
     [java] -> org.softlang.company.impl.bean.EmployeeImpl
     [java] 
     [java] -> org.softlang.company.impl.bean.ContainerImpl
     [java] 
     [java] -> org.softlang.company.impl.pojo.DepartmentImpl
     [java] 
     [java] -> org.softlang.company.impl.pojo.ComponentImpl
     [java] 
     [java] -> org.softlang.company.impl.pojo.CompanyImpl
     [java] 
     [java] -> org.softlang.company.impl.pojo.EmployeeImpl
     [java] 
     [java] -> org.softlang.company.impl.pojo.ContainerImpl
     [java] 
     [java] -> org.softlang.company.Company
     [java] 
     [java] -> org.softlang.company.Department
     [java] 
     [java] -> org.softlang.company.Subunit
     [java] 
     [java] -> org.softlang.util.ObservableSimpleList
     [java] 
     [java] -> org.softlang.util.RemoveFromList
     [java] 
     [java] -> org.softlang.util.SimpleList
     [java] 
     [java] -> org.softlang.util.AddToList
     [java] 
     [java] -> org.softlang.util.SimpleLinkedList
     [java] 
     [java] -> org.softlang.util.ChangeList
     [java] 
     [java] 
     [java] 
     [java] class name: org.softlang.company.Component
     [java] load start
     [java] load stop
     [java] Class<?> Name: org.softlang.company.Component
     [java] class name: org.softlang.company.Employee
     [java] load start
     [java] load stop
     [java] Class<?> Name: org.softlang.company.Employee
     [java] class name: org.softlang.company.Container
     [java] load start
     [java] load stop
     [java] Class<?> Name: org.softlang.company.Container
     [java] class name: org.softlang.company.impl.bean.DepartmentImpl
     [java] load start
     [java] load stop
     [java] Class<?> Name: org.softlang.company.impl.bean.DepartmentImpl
     [java] class name: org.softlang.company.impl.bean.ComponentImpl
     [java] load start
     [java] load stop
     [java] Class<?> Name: org.softlang.company.impl.bean.ComponentImpl
     [java] class name: org.softlang.company.impl.bean.CompanyImpl
     [java] load start
     [java] load stop
     [java] Class<?> Name: org.softlang.company.impl.bean.CompanyImpl
     [java] class name: org.softlang.company.impl.bean.EmployeeImpl
     [java] load start
     [java] load stop
     [java] Class<?> Name: org.softlang.company.impl.bean.EmployeeImpl
     [java] class name: org.softlang.company.impl.bean.ContainerImpl
     [java] load start
     [java] load stop
     [java] Class<?> Name: org.softlang.company.impl.bean.ContainerImpl
     [java] class name: org.softlang.company.impl.pojo.DepartmentImpl
     [java] load start
     [java] load stop
     [java] Class<?> Name: org.softlang.company.impl.pojo.DepartmentImpl
     [java] class name: org.softlang.company.impl.pojo.ComponentImpl
     [java] load start
     [java] load stop
     [java] Class<?> Name: org.softlang.company.impl.pojo.ComponentImpl
     [java] class name: org.softlang.company.impl.pojo.CompanyImpl
     [java] load start
     [java] load stop
     [java] Class<?> Name: org.softlang.company.impl.pojo.CompanyImpl
     [java] class name: org.softlang.company.impl.pojo.EmployeeImpl
     [java] load start
     [java] load stop
     [java] Class<?> Name: org.softlang.company.impl.pojo.EmployeeImpl
     [java] class name: org.softlang.company.impl.pojo.ContainerImpl
     [java] load start
     [java] load stop
     [java] Class<?> Name: org.softlang.company.impl.pojo.ContainerImpl
     [java] class name: org.softlang.company.Company
     [java] load start
     [java] load stop
     [java] Class<?> Name: org.softlang.company.Company
     [java] class name: org.softlang.company.Department
     [java] load start
     [java] load stop
     [java] Class<?> Name: org.softlang.company.Department
     [java] class name: org.softlang.company.Subunit
     [java] load start
     [java] load stop
     [java] Class<?> Name: org.softlang.company.Subunit
     [java] class name: org.softlang.util.ObservableSimpleList
     [java] load start
     [java] load stop
     [java] Class<?> Name: org.softlang.util.ObservableSimpleList
     [java] class name: org.softlang.util.RemoveFromList
     [java] load start
     [java] load stop
     [java] Class<?> Name: org.softlang.util.RemoveFromList
     [java] class name: org.softlang.util.SimpleList
     [java] load start
     [java] load stop
     [java] Class<?> Name: org.softlang.util.SimpleList
     [java] class name: org.softlang.util.AddToList
     [java] load start
     [java] load stop
     [java] Class<?> Name: org.softlang.util.AddToList
     [java] class name: org.softlang.util.SimpleLinkedList
     [java] load start
     [java] load stop
     [java] Class<?> Name: org.softlang.util.SimpleLinkedList
     [java] class name: org.softlang.util.ChangeList
     [java] load start
     [java] load stop
     [java] Class<?> Name: org.softlang.util.ChangeList
     [java] Classes that throw exception and will be not included in the tests: 
     [java] Removing methods containing unsupported classses parameter

generate_tests:
     [echo] 
     [echo] 	            Generating tests
     [echo] 	        
     [java] 
     [java] 
     [java] source: /home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source
     [java] target: /home/jefferson/workspace/ferramentaLPSSM/Products/Product0/target
     [java] bin: bin
     [java] src: src
     [java] lib: lib
     [java] classes: org.softlang.company.impl.pojo.ContainerImpl|org.softlang.company.impl.bean.CompanyImpl|org.softlang.company.impl.pojo.CompanyImpl|org.softlang.company.impl.bean.DepartmentImpl|org.softlang.company.impl.bean.ContainerImpl|org.softlang.company.Component|org.softlang.company.impl.pojo.EmployeeImpl|org.softlang.company.impl.pojo.ComponentImpl|org.softlang.util.ObservableSimpleList|org.softlang.company.impl.bean.EmployeeImpl|org.softlang.company.impl.bean.ComponentImpl|org.softlang.company.impl.pojo.DepartmentImpl
     [java] maxTestsPerMethods: 2
     [java] criteria: ONLY_COMMON_METHODS_SUBSET_DEFAULT
     [java] 
     [java] 
     [java] 
     [java] Mapp Class One
     [java] 
     [java] File Directory: /home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source/bin
     [java] 
     [java]  I found it: /home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source/bin/org/softlang/company/Component.class
     [java] File Source Directory: /home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source/bin/org/softlang/company/Component.class
     [java] 
     [java] Classes<24>: 
     [java] 
     [java] 1 - org.softlang.company.Component
     [java] 
     [java] 2 - org.softlang.company.Employee
     [java] 
     [java] 3 - org.softlang.company.Container
     [java] 
     [java] 4 - org.softlang.company.impl.bean.DepartmentImpl
     [java] 
     [java] 5 - org.softlang.company.impl.bean.ComponentImpl
     [java] 
     [java] 6 - org.softlang.company.impl.bean.CompanyImpl
     [java] 
     [java] 7 - org.softlang.company.impl.bean.EmployeeImpl
     [java] 
     [java] 8 - org.softlang.company.impl.bean.ContainerImpl
     [java] 
     [java] 9 - org.softlang.company.impl.pojo.DepartmentImpl
     [java] 
     [java] 10 - org.softlang.company.impl.pojo.ComponentImpl
     [java] 
     [java] 11 - org.softlang.company.impl.pojo.CompanyImpl
     [java] 
     [java] 12 - org.softlang.company.impl.pojo.EmployeeImpl
     [java] 
     [java] 13 - org.softlang.company.impl.pojo.ContainerImpl
     [java] 
     [java] 14 - org.softlang.company.Company
     [java] 
     [java] 15 - org.softlang.company.Department
     [java] 
     [java] 16 - org.softlang.company.Subunit
     [java] 
     [java] 17 - org.softlang.util.ObservableSimpleList
     [java] 
     [java] 18 - org.softlang.util.RemoveFromList
     [java] 
     [java] 19 - org.softlang.util.SimpleList
     [java] 
     [java] 20 - org.softlang.util.AddToList
     [java] 
     [java] 21 - org.softlang.util.SimpleLinkedList
     [java] 
     [java] 22 - org.softlang.util.ChangeList
     [java] 
     [java] 23 - org.softlang.visitor.ReturningVisitor
     [java] 
     [java] 24 - org.softlang.visitor.VoidVisitor
     [java] 
     [java] 
     [java] 
     [java] 
     [java] # Get All Constructors and methods of the class: 1 - org.softlang.company.Component
     [java] 
     [java] 
     [java] # Get All Constructors and methods of the class: 2 - org.softlang.company.Employee
     [java] 
     [java] 
     [java] # Get All Constructors and methods of the class: 3 - org.softlang.company.Container
     [java] 
     [java] 
     [java] # Get All Constructors and methods of the class: 4 - org.softlang.company.impl.bean.DepartmentImpl
     [java] 
     [java] Constructor: org.softlang.company.impl.bean.DepartmentImpl
     [java] Method: public void org.softlang.company.impl.bean.DepartmentImpl.accept(org.softlang.visitor.VoidVisitor)
     [java] Method: public java.lang.Object org.softlang.company.impl.bean.DepartmentImpl.accept(org.softlang.visitor.ReturningVisitor)
     [java] Type: org.softlang.visitor.ReturningVisitor<R>
     [java] Method: public org.softlang.company.Employee org.softlang.company.impl.bean.DepartmentImpl.getManager()
     [java] Method: public boolean org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit)
     [java] Method: public boolean org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit)
     [java] Method: public java.lang.Iterable org.softlang.company.impl.bean.ContainerImpl.subunits()
     [java] Method: public void org.softlang.company.impl.bean.ContainerImpl.addObserver(java.util.Observer)
     [java] Method: public void org.softlang.company.impl.bean.ContainerImpl.deleteObserver(java.util.Observer)
     [java] Method: public void org.softlang.company.impl.bean.ContainerImpl.deleteObservers()
     [java] Method: public java.lang.String org.softlang.company.impl.bean.ComponentImpl.getName()
     [java] Method: public org.softlang.company.impl.bean.ComponentImpl org.softlang.company.impl.bean.ComponentImpl.getParent()
     [java] Method: public void org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String)
     [java] Method: public void java.util.Observable.notifyObservers()
     [java] Method: public void java.util.Observable.notifyObservers(java.lang.Object)
     [java] Method: public synchronized boolean java.util.Observable.hasChanged()
     [java] Method: public synchronized int java.util.Observable.countObservers()
     [java] Method: public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait() throws java.lang.InterruptedException
     [java] Method: public boolean java.lang.Object.equals(java.lang.Object)
     [java] Method: public java.lang.String java.lang.Object.toString()
     [java] Method: public native int java.lang.Object.hashCode()
     [java] Method: public final native java.lang.Class java.lang.Object.getClass()
     [java] Method: public final native void java.lang.Object.notify()
     [java] Method: public final native void java.lang.Object.notifyAll()
     [java] 
     [java] # Get All Constructors and methods of the class: 5 - org.softlang.company.impl.bean.ComponentImpl
     [java] 
     [java] Method: public java.lang.String org.softlang.company.impl.bean.ComponentImpl.getName()
     [java] Method: public org.softlang.company.impl.bean.ComponentImpl org.softlang.company.impl.bean.ComponentImpl.getParent()
     [java] Method: public void org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String)
     [java] Method: public abstract void org.softlang.company.impl.bean.ComponentImpl.accept(org.softlang.visitor.VoidVisitor)
     [java] Method: public abstract java.lang.Object org.softlang.company.impl.bean.ComponentImpl.accept(org.softlang.visitor.ReturningVisitor)
     [java] Type: org.softlang.visitor.ReturningVisitor<R>
     [java] Method: public synchronized void java.util.Observable.addObserver(java.util.Observer)
     [java] Method: public synchronized void java.util.Observable.deleteObserver(java.util.Observer)
     [java] Method: public synchronized void java.util.Observable.deleteObservers()
     [java] Method: public void java.util.Observable.notifyObservers()
     [java] Method: public void java.util.Observable.notifyObservers(java.lang.Object)
     [java] Method: public synchronized boolean java.util.Observable.hasChanged()
     [java] Method: public synchronized int java.util.Observable.countObservers()
     [java] Method: public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait() throws java.lang.InterruptedException
     [java] Method: public boolean java.lang.Object.equals(java.lang.Object)
     [java] Method: public java.lang.String java.lang.Object.toString()
     [java] Method: public native int java.lang.Object.hashCode()
     [java] Method: public final native java.lang.Class java.lang.Object.getClass()
     [java] Method: public final native void java.lang.Object.notify()
     [java] Method: public final native void java.lang.Object.notifyAll()
     [java] 
     [java] # Get All Constructors and methods of the class: 6 - org.softlang.company.impl.bean.CompanyImpl
     [java] 
     [java] Constructor: org.softlang.company.impl.bean.CompanyImpl
     [java] Method: public void org.softlang.company.impl.bean.CompanyImpl.accept(org.softlang.visitor.VoidVisitor)
     [java] Method: public java.lang.Object org.softlang.company.impl.bean.CompanyImpl.accept(org.softlang.visitor.ReturningVisitor)
     [java] Type: org.softlang.visitor.ReturningVisitor<R>
     [java] Method: public boolean org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit)
     [java] Method: public boolean org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit)
     [java] Method: public java.lang.Iterable org.softlang.company.impl.bean.ContainerImpl.subunits()
     [java] Method: public void org.softlang.company.impl.bean.ContainerImpl.addObserver(java.util.Observer)
     [java] Method: public void org.softlang.company.impl.bean.ContainerImpl.deleteObserver(java.util.Observer)
     [java] Method: public void org.softlang.company.impl.bean.ContainerImpl.deleteObservers()
     [java] Method: public java.lang.String org.softlang.company.impl.bean.ComponentImpl.getName()
     [java] Method: public org.softlang.company.impl.bean.ComponentImpl org.softlang.company.impl.bean.ComponentImpl.getParent()
     [java] Method: public void org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String)
     [java] Method: public void java.util.Observable.notifyObservers()
     [java] Method: public void java.util.Observable.notifyObservers(java.lang.Object)
     [java] Method: public synchronized boolean java.util.Observable.hasChanged()
     [java] Method: public synchronized int java.util.Observable.countObservers()
     [java] Method: public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait() throws java.lang.InterruptedException
     [java] Method: public boolean java.lang.Object.equals(java.lang.Object)
     [java] Method: public java.lang.String java.lang.Object.toString()
     [java] Method: public native int java.lang.Object.hashCode()
     [java] Method: public final native java.lang.Class java.lang.Object.getClass()
     [java] Method: public final native void java.lang.Object.notify()
     [java] Method: public final native void java.lang.Object.notifyAll()
     [java] 
     [java] # Get All Constructors and methods of the class: 7 - org.softlang.company.impl.bean.EmployeeImpl
     [java] 
     [java] Constructor: org.softlang.company.impl.bean.EmployeeImpl
     [java] Method: public java.lang.String org.softlang.company.impl.bean.EmployeeImpl.getAddress()
     [java] Method: public java.lang.String org.softlang.company.impl.bean.EmployeeImpl.getName()
     [java] Method: public void org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String)
     [java] Method: public void org.softlang.company.impl.bean.EmployeeImpl.accept(org.softlang.visitor.VoidVisitor)
     [java] Method: public java.lang.Object org.softlang.company.impl.bean.EmployeeImpl.accept(org.softlang.visitor.ReturningVisitor)
     [java] Type: org.softlang.visitor.ReturningVisitor<R>
     [java] Method: public void org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String)
     [java] Method: public double org.softlang.company.impl.bean.EmployeeImpl.getSalary()
     [java] Method: public void org.softlang.company.impl.bean.EmployeeImpl.setSalary(double)
     [java] Method: public boolean org.softlang.company.impl.bean.EmployeeImpl.getManager()
     [java] Method: public void org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean)
     [java] Method: public java.lang.String org.softlang.company.impl.bean.EmployeeImpl.getCep()
     [java] Method: public org.softlang.company.impl.bean.ComponentImpl org.softlang.company.impl.bean.ComponentImpl.getParent()
     [java] Method: public synchronized void java.util.Observable.addObserver(java.util.Observer)
     [java] Method: public synchronized void java.util.Observable.deleteObserver(java.util.Observer)
     [java] Method: public synchronized void java.util.Observable.deleteObservers()
     [java] Method: public void java.util.Observable.notifyObservers()
     [java] Method: public void java.util.Observable.notifyObservers(java.lang.Object)
     [java] Method: public synchronized boolean java.util.Observable.hasChanged()
     [java] Method: public synchronized int java.util.Observable.countObservers()
     [java] Method: public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait() throws java.lang.InterruptedException
     [java] Method: public boolean java.lang.Object.equals(java.lang.Object)
     [java] Method: public java.lang.String java.lang.Object.toString()
     [java] Method: public native int java.lang.Object.hashCode()
     [java] Method: public final native java.lang.Class java.lang.Object.getClass()
     [java] Method: public final native void java.lang.Object.notify()
     [java] Method: public final native void java.lang.Object.notifyAll()
     [java] 
     [java] # Get All Constructors and methods of the class: 8 - org.softlang.company.impl.bean.ContainerImpl
     [java] 
     [java] Method: public boolean org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit)
     [java] Method: public boolean org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit)
     [java] Method: public java.lang.Iterable org.softlang.company.impl.bean.ContainerImpl.subunits()
     [java] Method: public void org.softlang.company.impl.bean.ContainerImpl.addObserver(java.util.Observer)
     [java] Method: public void org.softlang.company.impl.bean.ContainerImpl.deleteObserver(java.util.Observer)
     [java] Method: public void org.softlang.company.impl.bean.ContainerImpl.deleteObservers()
     [java] Method: public java.lang.String org.softlang.company.impl.bean.ComponentImpl.getName()
     [java] Method: public org.softlang.company.impl.bean.ComponentImpl org.softlang.company.impl.bean.ComponentImpl.getParent()
     [java] Method: public void org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String)
     [java] Method: public abstract void org.softlang.company.impl.bean.ComponentImpl.accept(org.softlang.visitor.VoidVisitor)
     [java] Method: public abstract java.lang.Object org.softlang.company.impl.bean.ComponentImpl.accept(org.softlang.visitor.ReturningVisitor)
     [java] Type: org.softlang.visitor.ReturningVisitor<R>
     [java] Method: public void java.util.Observable.notifyObservers()
     [java] Method: public void java.util.Observable.notifyObservers(java.lang.Object)
     [java] Method: public synchronized boolean java.util.Observable.hasChanged()
     [java] Method: public synchronized int java.util.Observable.countObservers()
     [java] Method: public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait() throws java.lang.InterruptedException
     [java] Method: public boolean java.lang.Object.equals(java.lang.Object)
     [java] Method: public java.lang.String java.lang.Object.toString()
     [java] Method: public native int java.lang.Object.hashCode()
     [java] Method: public final native java.lang.Class java.lang.Object.getClass()
     [java] Method: public final native void java.lang.Object.notify()
     [java] Method: public final native void java.lang.Object.notifyAll()
     [java] Method: public abstract void org.softlang.company.Component.accept(org.softlang.visitor.VoidVisitor)
     [java] Method: public abstract java.lang.Object org.softlang.company.Component.accept(org.softlang.visitor.ReturningVisitor)
     [java] Type: org.softlang.visitor.ReturningVisitor<R>
     [java] 
     [java] # Get All Constructors and methods of the class: 9 - org.softlang.company.impl.pojo.DepartmentImpl
     [java] 
     [java] Constructor: org.softlang.company.impl.pojo.DepartmentImpl
     [java] Method: public void org.softlang.company.impl.pojo.DepartmentImpl.accept(org.softlang.visitor.VoidVisitor)
     [java] Method: public java.lang.Object org.softlang.company.impl.pojo.DepartmentImpl.accept(org.softlang.visitor.ReturningVisitor)
     [java] Type: org.softlang.visitor.ReturningVisitor<R>
     [java] Method: public org.softlang.company.Employee org.softlang.company.impl.pojo.DepartmentImpl.getManager()
     [java] Method: public boolean org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit)
     [java] Method: public boolean org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit)
     [java] Method: public java.lang.Iterable org.softlang.company.impl.pojo.ContainerImpl.subunits()
     [java] Method: public java.lang.String org.softlang.company.impl.pojo.ComponentImpl.getName()
     [java] Method: public void org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String)
     [java] Method: public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait() throws java.lang.InterruptedException
     [java] Method: public boolean java.lang.Object.equals(java.lang.Object)
     [java] Method: public java.lang.String java.lang.Object.toString()
     [java] Method: public native int java.lang.Object.hashCode()
     [java] Method: public final native java.lang.Class java.lang.Object.getClass()
     [java] Method: public final native void java.lang.Object.notify()
     [java] Method: public final native void java.lang.Object.notifyAll()
     [java] 
     [java] # Get All Constructors and methods of the class: 10 - org.softlang.company.impl.pojo.ComponentImpl
     [java] 
     [java] Method: public java.lang.String org.softlang.company.impl.pojo.ComponentImpl.getName()
     [java] Method: public void org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String)
     [java] Method: public abstract void org.softlang.company.impl.pojo.ComponentImpl.accept(org.softlang.visitor.VoidVisitor)
     [java] Method: public abstract java.lang.Object org.softlang.company.impl.pojo.ComponentImpl.accept(org.softlang.visitor.ReturningVisitor)
     [java] Type: org.softlang.visitor.ReturningVisitor<R>
     [java] Method: public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait() throws java.lang.InterruptedException
     [java] Method: public boolean java.lang.Object.equals(java.lang.Object)
     [java] Method: public java.lang.String java.lang.Object.toString()
     [java] Method: public native int java.lang.Object.hashCode()
     [java] Method: public final native java.lang.Class java.lang.Object.getClass()
     [java] Method: public final native void java.lang.Object.notify()
     [java] Method: public final native void java.lang.Object.notifyAll()
     [java] 
     [java] # Get All Constructors and methods of the class: 11 - org.softlang.company.impl.pojo.CompanyImpl
     [java] 
     [java] Constructor: org.softlang.company.impl.pojo.CompanyImpl
     [java] Method: public boolean org.softlang.company.impl.pojo.CompanyImpl.add(org.softlang.company.Subunit)
     [java] Method: public void org.softlang.company.impl.pojo.CompanyImpl.accept(org.softlang.visitor.VoidVisitor)
     [java] Method: public java.lang.Object org.softlang.company.impl.pojo.CompanyImpl.accept(org.softlang.visitor.ReturningVisitor)
     [java] Type: org.softlang.visitor.ReturningVisitor<R>
     [java] Method: public boolean org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit)
     [java] Method: public java.lang.Iterable org.softlang.company.impl.pojo.ContainerImpl.subunits()
     [java] Method: public java.lang.String org.softlang.company.impl.pojo.ComponentImpl.getName()
     [java] Method: public void org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String)
     [java] Method: public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait() throws java.lang.InterruptedException
     [java] Method: public boolean java.lang.Object.equals(java.lang.Object)
     [java] Method: public java.lang.String java.lang.Object.toString()
     [java] Method: public native int java.lang.Object.hashCode()
     [java] Method: public final native java.lang.Class java.lang.Object.getClass()
     [java] Method: public final native void java.lang.Object.notify()
     [java] Method: public final native void java.lang.Object.notifyAll()
     [java] 
     [java] # Get All Constructors and methods of the class: 12 - org.softlang.company.impl.pojo.EmployeeImpl
     [java] 
     [java] Constructor: org.softlang.company.impl.pojo.EmployeeImpl
     [java] Method: public java.lang.String org.softlang.company.impl.pojo.EmployeeImpl.getAddress()
     [java] Method: public void org.softlang.company.impl.pojo.EmployeeImpl.accept(org.softlang.visitor.VoidVisitor)
     [java] Method: public java.lang.Object org.softlang.company.impl.pojo.EmployeeImpl.accept(org.softlang.visitor.ReturningVisitor)
     [java] Type: org.softlang.visitor.ReturningVisitor<R>
     [java] Method: public void org.softlang.company.impl.pojo.EmployeeImpl.setAddress(java.lang.String)
     [java] Method: public double org.softlang.company.impl.pojo.EmployeeImpl.getSalary()
     [java] Method: public void org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double)
     [java] Method: public boolean org.softlang.company.impl.pojo.EmployeeImpl.getManager()
     [java] Method: public void org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean)
     [java] Method: public java.lang.String org.softlang.company.impl.pojo.EmployeeImpl.getCep()
     [java] Method: public java.lang.String org.softlang.company.impl.pojo.ComponentImpl.getName()
     [java] Method: public void org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String)
     [java] Method: public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait() throws java.lang.InterruptedException
     [java] Method: public boolean java.lang.Object.equals(java.lang.Object)
     [java] Method: public java.lang.String java.lang.Object.toString()
     [java] Method: public native int java.lang.Object.hashCode()
     [java] Method: public final native java.lang.Class java.lang.Object.getClass()
     [java] Method: public final native void java.lang.Object.notify()
     [java] Method: public final native void java.lang.Object.notifyAll()
     [java] 
     [java] # Get All Constructors and methods of the class: 13 - org.softlang.company.impl.pojo.ContainerImpl
     [java] 
     [java] Method: public boolean org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit)
     [java] Method: public boolean org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit)
     [java] Method: public java.lang.Iterable org.softlang.company.impl.pojo.ContainerImpl.subunits()
     [java] Method: public java.lang.String org.softlang.company.impl.pojo.ComponentImpl.getName()
     [java] Method: public void org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String)
     [java] Method: public abstract void org.softlang.company.impl.pojo.ComponentImpl.accept(org.softlang.visitor.VoidVisitor)
     [java] Method: public abstract java.lang.Object org.softlang.company.impl.pojo.ComponentImpl.accept(org.softlang.visitor.ReturningVisitor)
     [java] Type: org.softlang.visitor.ReturningVisitor<R>
     [java] Method: public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait() throws java.lang.InterruptedException
     [java] Method: public boolean java.lang.Object.equals(java.lang.Object)
     [java] Method: public java.lang.String java.lang.Object.toString()
     [java] Method: public native int java.lang.Object.hashCode()
     [java] Method: public final native java.lang.Class java.lang.Object.getClass()
     [java] Method: public final native void java.lang.Object.notify()
     [java] Method: public final native void java.lang.Object.notifyAll()
     [java] Method: public abstract void org.softlang.company.Component.accept(org.softlang.visitor.VoidVisitor)
     [java] Method: public abstract java.lang.Object org.softlang.company.Component.accept(org.softlang.visitor.ReturningVisitor)
     [java] Type: org.softlang.visitor.ReturningVisitor<R>
     [java] 
     [java] # Get All Constructors and methods of the class: 14 - org.softlang.company.Company
     [java] 
     [java] 
     [java] # Get All Constructors and methods of the class: 15 - org.softlang.company.Department
     [java] 
     [java] 
     [java] # Get All Constructors and methods of the class: 16 - org.softlang.company.Subunit
     [java] 
     [java] 
     [java] # Get All Constructors and methods of the class: 17 - org.softlang.util.ObservableSimpleList
     [java] 
     [java] Constructor: org.softlang.util.ObservableSimpleList
     [java] Method: public boolean org.softlang.util.ObservableSimpleList.add(java.lang.Object)
     [java] Method: public java.util.Iterator org.softlang.util.ObservableSimpleList.iterator()
     [java] Method: public boolean org.softlang.util.ObservableSimpleList.remove(java.lang.Object)
     [java] Method: public void org.softlang.util.ObservableSimpleList.addObserver(java.util.Observer)
     [java] Method: public void org.softlang.util.ObservableSimpleList.deleteObserver(java.util.Observer)
     [java] Method: public void org.softlang.util.ObservableSimpleList.deleteObservers()
     [java] Method: public void java.util.Observable.notifyObservers()
     [java] Method: public void java.util.Observable.notifyObservers(java.lang.Object)
     [java] Method: public synchronized boolean java.util.Observable.hasChanged()
     [java] Method: public synchronized int java.util.Observable.countObservers()
     [java] Method: public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait() throws java.lang.InterruptedException
     [java] Method: public boolean java.lang.Object.equals(java.lang.Object)
     [java] Method: public java.lang.String java.lang.Object.toString()
     [java] Method: public native int java.lang.Object.hashCode()
     [java] Method: public final native java.lang.Class java.lang.Object.getClass()
     [java] Method: public final native void java.lang.Object.notify()
     [java] Method: public final native void java.lang.Object.notifyAll()
     [java] 
     [java] # Get All Constructors and methods of the class: 18 - org.softlang.util.RemoveFromList
     [java] 
     [java] Constructor: org.softlang.util.RemoveFromList
     [java] Method: public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait() throws java.lang.InterruptedException
     [java] Method: public boolean java.lang.Object.equals(java.lang.Object)
     [java] Method: public java.lang.String java.lang.Object.toString()
     [java] Method: public native int java.lang.Object.hashCode()
     [java] Method: public final native java.lang.Class java.lang.Object.getClass()
     [java] Method: public final native void java.lang.Object.notify()
     [java] Method: public final native void java.lang.Object.notifyAll()
     [java] 
     [java] # Get All Constructors and methods of the class: 19 - org.softlang.util.SimpleList
     [java] 
     [java] 
     [java] # Get All Constructors and methods of the class: 20 - org.softlang.util.AddToList
     [java] 
     [java] Constructor: org.softlang.util.AddToList
     [java] Method: public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait() throws java.lang.InterruptedException
     [java] Method: public boolean java.lang.Object.equals(java.lang.Object)
     [java] Method: public java.lang.String java.lang.Object.toString()
     [java] Method: public native int java.lang.Object.hashCode()
     [java] Method: public final native java.lang.Class java.lang.Object.getClass()
     [java] Method: public final native void java.lang.Object.notify()
     [java] Method: public final native void java.lang.Object.notifyAll()
     [java] 
     [java] # Get All Constructors and methods of the class: 21 - org.softlang.util.SimpleLinkedList
     [java] 
     [java] Constructor: org.softlang.util.SimpleLinkedList
     [java] Method: public boolean org.softlang.util.SimpleLinkedList.add(java.lang.Object)
     [java] Method: public java.util.Iterator org.softlang.util.SimpleLinkedList.iterator()
     [java] Method: public boolean org.softlang.util.SimpleLinkedList.remove(java.lang.Object)
     [java] Method: public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait() throws java.lang.InterruptedException
     [java] Method: public boolean java.lang.Object.equals(java.lang.Object)
     [java] Method: public java.lang.String java.lang.Object.toString()
     [java] Method: public native int java.lang.Object.hashCode()
     [java] Method: public final native java.lang.Class java.lang.Object.getClass()
     [java] Method: public final native void java.lang.Object.notify()
     [java] Method: public final native void java.lang.Object.notifyAll()
     [java] 
     [java] # Get All Constructors and methods of the class: 22 - org.softlang.util.ChangeList
     [java] 
     [java] Method: public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait() throws java.lang.InterruptedException
     [java] Method: public boolean java.lang.Object.equals(java.lang.Object)
     [java] Method: public java.lang.String java.lang.Object.toString()
     [java] Method: public native int java.lang.Object.hashCode()
     [java] Method: public final native java.lang.Class java.lang.Object.getClass()
     [java] Method: public final native void java.lang.Object.notify()
     [java] Method: public final native void java.lang.Object.notifyAll()
     [java] 
     [java] # Get All Constructors and methods of the class: 23 - org.softlang.visitor.ReturningVisitor
     [java] 
     [java] 
     [java] # Get All Constructors and methods of the class: 24 - org.softlang.visitor.VoidVisitor
     [java] 
     [java] 
     [java] 
     [java] 		SOURCE Classes:
     [java] 
     [java] org.softlang.util.SimpleLinkedList
     [java] org.softlang.util.ChangeList
     [java] org.softlang.company.impl.pojo.EmployeeImpl
     [java] org.softlang.company.impl.bean.EmployeeImpl
     [java] org.softlang.company.impl.bean.ContainerImpl
     [java] org.softlang.company.impl.bean.CompanyImpl
     [java] org.softlang.util.RemoveFromList
     [java] org.softlang.company.impl.pojo.ComponentImpl
     [java] org.softlang.util.ObservableSimpleList
     [java] org.softlang.company.impl.bean.DepartmentImpl
     [java] org.softlang.company.impl.pojo.DepartmentImpl
     [java] org.softlang.company.impl.bean.ComponentImpl
     [java] org.softlang.util.AddToList
     [java] org.softlang.company.impl.pojo.CompanyImpl
     [java] org.softlang.company.impl.pojo.ContainerImpl
     [java] ************
     [java] 
     [java] 
     [java] Mapp Class One
     [java] 
     [java] File Directory: /home/jefferson/workspace/ferramentaLPSSM/Products/Product0/target/bin
     [java] 
     [java]  I found it: /home/jefferson/workspace/ferramentaLPSSM/Products/Product0/target/bin/org/softlang/company/Component.class
     [java] File Source Directory: /home/jefferson/workspace/ferramentaLPSSM/Products/Product0/target/bin/org/softlang/company/Component.class
     [java] 
     [java] Classes<22>: 
     [java] 
     [java] 1 - org.softlang.company.Component
     [java] 
     [java] 2 - org.softlang.company.Employee
     [java] 
     [java] 3 - org.softlang.company.Container
     [java] 
     [java] 4 - org.softlang.company.impl.bean.DepartmentImpl
     [java] 
     [java] 5 - org.softlang.company.impl.bean.ComponentImpl
     [java] 
     [java] 6 - org.softlang.company.impl.bean.CompanyImpl
     [java] 
     [java] 7 - org.softlang.company.impl.bean.EmployeeImpl
     [java] 
     [java] 8 - org.softlang.company.impl.bean.ContainerImpl
     [java] 
     [java] 9 - org.softlang.company.impl.pojo.DepartmentImpl
     [java] 
     [java] 10 - org.softlang.company.impl.pojo.ComponentImpl
     [java] 
     [java] 11 - org.softlang.company.impl.pojo.CompanyImpl
     [java] 
     [java] 12 - org.softlang.company.impl.pojo.EmployeeImpl
     [java] 
     [java] 13 - org.softlang.company.impl.pojo.ContainerImpl
     [java] 
     [java] 14 - org.softlang.company.Company
     [java] 
     [java] 15 - org.softlang.company.Department
     [java] 
     [java] 16 - org.softlang.company.Subunit
     [java] 
     [java] 17 - org.softlang.util.ObservableSimpleList
     [java] 
     [java] 18 - org.softlang.util.RemoveFromList
     [java] 
     [java] 19 - org.softlang.util.SimpleList
     [java] 
     [java] 20 - org.softlang.util.AddToList
     [java] 
     [java] 21 - org.softlang.util.SimpleLinkedList
     [java] 
     [java] 22 - org.softlang.util.ChangeList
     [java] 
     [java] 
     [java] 
     [java] 
     [java] # Get All Constructors and methods of the class: 1 - org.softlang.company.Component
     [java] 
     [java] 
     [java] # Get All Constructors and methods of the class: 2 - org.softlang.company.Employee
     [java] 
     [java] 
     [java] # Get All Constructors and methods of the class: 3 - org.softlang.company.Container
     [java] 
     [java] 
     [java] # Get All Constructors and methods of the class: 4 - org.softlang.company.impl.bean.DepartmentImpl
     [java] 
     [java] Constructor: org.softlang.company.impl.bean.DepartmentImpl
     [java] Method: public org.softlang.company.Employee org.softlang.company.impl.bean.DepartmentImpl.getManager()
     [java] Method: public boolean org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit)
     [java] Method: public boolean org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit)
     [java] Method: public java.lang.Iterable org.softlang.company.impl.bean.ContainerImpl.subunits()
     [java] Method: public void org.softlang.company.impl.bean.ContainerImpl.addObserver(java.util.Observer)
     [java] Method: public void org.softlang.company.impl.bean.ContainerImpl.deleteObserver(java.util.Observer)
     [java] Method: public void org.softlang.company.impl.bean.ContainerImpl.deleteObservers()
     [java] Method: public java.lang.String org.softlang.company.impl.bean.ComponentImpl.getName()
     [java] Method: public org.softlang.company.impl.bean.ComponentImpl org.softlang.company.impl.bean.ComponentImpl.getParent()
     [java] Method: public void org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String)
     [java] Method: public void java.util.Observable.notifyObservers()
     [java] Method: public void java.util.Observable.notifyObservers(java.lang.Object)
     [java] Method: public synchronized boolean java.util.Observable.hasChanged()
     [java] Method: public synchronized int java.util.Observable.countObservers()
     [java] Method: public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait() throws java.lang.InterruptedException
     [java] Method: public boolean java.lang.Object.equals(java.lang.Object)
     [java] Method: public java.lang.String java.lang.Object.toString()
     [java] Method: public native int java.lang.Object.hashCode()
     [java] Method: public final native java.lang.Class java.lang.Object.getClass()
     [java] Method: public final native void java.lang.Object.notify()
     [java] Method: public final native void java.lang.Object.notifyAll()
     [java] 
     [java] # Get All Constructors and methods of the class: 5 - org.softlang.company.impl.bean.ComponentImpl
     [java] 
     [java] Method: public java.lang.String org.softlang.company.impl.bean.ComponentImpl.getName()
     [java] Method: public org.softlang.company.impl.bean.ComponentImpl org.softlang.company.impl.bean.ComponentImpl.getParent()
     [java] Method: public void org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String)
     [java] Method: public synchronized void java.util.Observable.addObserver(java.util.Observer)
     [java] Method: public synchronized void java.util.Observable.deleteObserver(java.util.Observer)
     [java] Method: public synchronized void java.util.Observable.deleteObservers()
     [java] Method: public void java.util.Observable.notifyObservers()
     [java] Method: public void java.util.Observable.notifyObservers(java.lang.Object)
     [java] Method: public synchronized boolean java.util.Observable.hasChanged()
     [java] Method: public synchronized int java.util.Observable.countObservers()
     [java] Method: public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait() throws java.lang.InterruptedException
     [java] Method: public boolean java.lang.Object.equals(java.lang.Object)
     [java] Method: public java.lang.String java.lang.Object.toString()
     [java] Method: public native int java.lang.Object.hashCode()
     [java] Method: public final native java.lang.Class java.lang.Object.getClass()
     [java] Method: public final native void java.lang.Object.notify()
     [java] Method: public final native void java.lang.Object.notifyAll()
     [java] 
     [java] # Get All Constructors and methods of the class: 6 - org.softlang.company.impl.bean.CompanyImpl
     [java] 
     [java] Constructor: org.softlang.company.impl.bean.CompanyImpl
     [java] Method: public boolean org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit)
     [java] Method: public boolean org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit)
     [java] Method: public java.lang.Iterable org.softlang.company.impl.bean.ContainerImpl.subunits()
     [java] Method: public void org.softlang.company.impl.bean.ContainerImpl.addObserver(java.util.Observer)
     [java] Method: public void org.softlang.company.impl.bean.ContainerImpl.deleteObserver(java.util.Observer)
     [java] Method: public void org.softlang.company.impl.bean.ContainerImpl.deleteObservers()
     [java] Method: public java.lang.String org.softlang.company.impl.bean.ComponentImpl.getName()
     [java] Method: public org.softlang.company.impl.bean.ComponentImpl org.softlang.company.impl.bean.ComponentImpl.getParent()
     [java] Method: public void org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String)
     [java] Method: public void java.util.Observable.notifyObservers()
     [java] Method: public void java.util.Observable.notifyObservers(java.lang.Object)
     [java] Method: public synchronized boolean java.util.Observable.hasChanged()
     [java] Method: public synchronized int java.util.Observable.countObservers()
     [java] Method: public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait() throws java.lang.InterruptedException
     [java] Method: public boolean java.lang.Object.equals(java.lang.Object)
     [java] Method: public java.lang.String java.lang.Object.toString()
     [java] Method: public native int java.lang.Object.hashCode()
     [java] Method: public final native java.lang.Class java.lang.Object.getClass()
     [java] Method: public final native void java.lang.Object.notify()
     [java] Method: public final native void java.lang.Object.notifyAll()
     [java] 
     [java] # Get All Constructors and methods of the class: 7 - org.softlang.company.impl.bean.EmployeeImpl
     [java] 
     [java] Constructor: org.softlang.company.impl.bean.EmployeeImpl
     [java] Method: public java.lang.String org.softlang.company.impl.bean.EmployeeImpl.getAddress()
     [java] Method: public java.lang.String org.softlang.company.impl.bean.EmployeeImpl.getName()
     [java] Method: public void org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String)
     [java] Method: public void org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String)
     [java] Method: public double org.softlang.company.impl.bean.EmployeeImpl.getSalary()
     [java] Method: public void org.softlang.company.impl.bean.EmployeeImpl.setSalary(double)
     [java] Method: public boolean org.softlang.company.impl.bean.EmployeeImpl.getManager()
     [java] Method: public void org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean)
     [java] Method: public java.lang.String org.softlang.company.impl.bean.EmployeeImpl.getCep()
     [java] Method: public org.softlang.company.impl.bean.ComponentImpl org.softlang.company.impl.bean.ComponentImpl.getParent()
     [java] Method: public synchronized void java.util.Observable.addObserver(java.util.Observer)
     [java] Method: public synchronized void java.util.Observable.deleteObserver(java.util.Observer)
     [java] Method: public synchronized void java.util.Observable.deleteObservers()
     [java] Method: public void java.util.Observable.notifyObservers()
     [java] Method: public void java.util.Observable.notifyObservers(java.lang.Object)
     [java] Method: public synchronized boolean java.util.Observable.hasChanged()
     [java] Method: public synchronized int java.util.Observable.countObservers()
     [java] Method: public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait() throws java.lang.InterruptedException
     [java] Method: public boolean java.lang.Object.equals(java.lang.Object)
     [java] Method: public java.lang.String java.lang.Object.toString()
     [java] Method: public native int java.lang.Object.hashCode()
     [java] Method: public final native java.lang.Class java.lang.Object.getClass()
     [java] Method: public final native void java.lang.Object.notify()
     [java] Method: public final native void java.lang.Object.notifyAll()
     [java] 
     [java] # Get All Constructors and methods of the class: 8 - org.softlang.company.impl.bean.ContainerImpl
     [java] 
     [java] Method: public boolean org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit)
     [java] Method: public boolean org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit)
     [java] Method: public java.lang.Iterable org.softlang.company.impl.bean.ContainerImpl.subunits()
     [java] Method: public void org.softlang.company.impl.bean.ContainerImpl.addObserver(java.util.Observer)
     [java] Method: public void org.softlang.company.impl.bean.ContainerImpl.deleteObserver(java.util.Observer)
     [java] Method: public void org.softlang.company.impl.bean.ContainerImpl.deleteObservers()
     [java] Method: public java.lang.String org.softlang.company.impl.bean.ComponentImpl.getName()
     [java] Method: public org.softlang.company.impl.bean.ComponentImpl org.softlang.company.impl.bean.ComponentImpl.getParent()
     [java] Method: public void org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String)
     [java] Method: public void java.util.Observable.notifyObservers()
     [java] Method: public void java.util.Observable.notifyObservers(java.lang.Object)
     [java] Method: public synchronized boolean java.util.Observable.hasChanged()
     [java] Method: public synchronized int java.util.Observable.countObservers()
     [java] Method: public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait() throws java.lang.InterruptedException
     [java] Method: public boolean java.lang.Object.equals(java.lang.Object)
     [java] Method: public java.lang.String java.lang.Object.toString()
     [java] Method: public native int java.lang.Object.hashCode()
     [java] Method: public final native java.lang.Class java.lang.Object.getClass()
     [java] Method: public final native void java.lang.Object.notify()
     [java] Method: public final native void java.lang.Object.notifyAll()
     [java] 
     [java] # Get All Constructors and methods of the class: 9 - org.softlang.company.impl.pojo.DepartmentImpl
     [java] 
     [java] Constructor: org.softlang.company.impl.pojo.DepartmentImpl
     [java] Method: public org.softlang.company.Employee org.softlang.company.impl.pojo.DepartmentImpl.getManager()
     [java] Method: public boolean org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit)
     [java] Method: public boolean org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit)
     [java] Method: public java.lang.Iterable org.softlang.company.impl.pojo.ContainerImpl.subunits()
     [java] Method: public java.lang.String org.softlang.company.impl.pojo.ComponentImpl.getName()
     [java] Method: public void org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String)
     [java] Method: public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait() throws java.lang.InterruptedException
     [java] Method: public boolean java.lang.Object.equals(java.lang.Object)
     [java] Method: public java.lang.String java.lang.Object.toString()
     [java] Method: public native int java.lang.Object.hashCode()
     [java] Method: public final native java.lang.Class java.lang.Object.getClass()
     [java] Method: public final native void java.lang.Object.notify()
     [java] Method: public final native void java.lang.Object.notifyAll()
     [java] 
     [java] # Get All Constructors and methods of the class: 10 - org.softlang.company.impl.pojo.ComponentImpl
     [java] 
     [java] Method: public java.lang.String org.softlang.company.impl.pojo.ComponentImpl.getName()
     [java] Method: public void org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String)
     [java] Method: public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait() throws java.lang.InterruptedException
     [java] Method: public boolean java.lang.Object.equals(java.lang.Object)
     [java] Method: public java.lang.String java.lang.Object.toString()
     [java] Method: public native int java.lang.Object.hashCode()
     [java] Method: public final native java.lang.Class java.lang.Object.getClass()
     [java] Method: public final native void java.lang.Object.notify()
     [java] Method: public final native void java.lang.Object.notifyAll()
     [java] 
     [java] # Get All Constructors and methods of the class: 11 - org.softlang.company.impl.pojo.CompanyImpl
     [java] 
     [java] Constructor: org.softlang.company.impl.pojo.CompanyImpl
     [java] Method: public boolean org.softlang.company.impl.pojo.CompanyImpl.add(org.softlang.company.Subunit)
     [java] Method: public boolean org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit)
     [java] Method: public java.lang.Iterable org.softlang.company.impl.pojo.ContainerImpl.subunits()
     [java] Method: public java.lang.String org.softlang.company.impl.pojo.ComponentImpl.getName()
     [java] Method: public void org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String)
     [java] Method: public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait() throws java.lang.InterruptedException
     [java] Method: public boolean java.lang.Object.equals(java.lang.Object)
     [java] Method: public java.lang.String java.lang.Object.toString()
     [java] Method: public native int java.lang.Object.hashCode()
     [java] Method: public final native java.lang.Class java.lang.Object.getClass()
     [java] Method: public final native void java.lang.Object.notify()
     [java] Method: public final native void java.lang.Object.notifyAll()
     [java] 
     [java] # Get All Constructors and methods of the class: 12 - org.softlang.company.impl.pojo.EmployeeImpl
     [java] 
     [java] Constructor: org.softlang.company.impl.pojo.EmployeeImpl
     [java] Method: public java.lang.String org.softlang.company.impl.pojo.EmployeeImpl.getAddress()
     [java] Method: public void org.softlang.company.impl.pojo.EmployeeImpl.setAddress(java.lang.String)
     [java] Method: public double org.softlang.company.impl.pojo.EmployeeImpl.getSalary()
     [java] Method: public void org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double)
     [java] Method: public boolean org.softlang.company.impl.pojo.EmployeeImpl.getManager()
     [java] Method: public void org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean)
     [java] Method: public java.lang.String org.softlang.company.impl.pojo.EmployeeImpl.getCep()
     [java] Method: public java.lang.String org.softlang.company.impl.pojo.ComponentImpl.getName()
     [java] Method: public void org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String)
     [java] Method: public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait() throws java.lang.InterruptedException
     [java] Method: public boolean java.lang.Object.equals(java.lang.Object)
     [java] Method: public java.lang.String java.lang.Object.toString()
     [java] Method: public native int java.lang.Object.hashCode()
     [java] Method: public final native java.lang.Class java.lang.Object.getClass()
     [java] Method: public final native void java.lang.Object.notify()
     [java] Method: public final native void java.lang.Object.notifyAll()
     [java] 
     [java] # Get All Constructors and methods of the class: 13 - org.softlang.company.impl.pojo.ContainerImpl
     [java] 
     [java] Method: public boolean org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit)
     [java] Method: public boolean org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit)
     [java] Method: public java.lang.Iterable org.softlang.company.impl.pojo.ContainerImpl.subunits()
     [java] Method: public java.lang.String org.softlang.company.impl.pojo.ComponentImpl.getName()
     [java] Method: public void org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String)
     [java] Method: public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait() throws java.lang.InterruptedException
     [java] Method: public boolean java.lang.Object.equals(java.lang.Object)
     [java] Method: public java.lang.String java.lang.Object.toString()
     [java] Method: public native int java.lang.Object.hashCode()
     [java] Method: public final native java.lang.Class java.lang.Object.getClass()
     [java] Method: public final native void java.lang.Object.notify()
     [java] Method: public final native void java.lang.Object.notifyAll()
     [java] 
     [java] # Get All Constructors and methods of the class: 14 - org.softlang.company.Company
     [java] 
     [java] 
     [java] # Get All Constructors and methods of the class: 15 - org.softlang.company.Department
     [java] 
     [java] 
     [java] # Get All Constructors and methods of the class: 16 - org.softlang.company.Subunit
     [java] 
     [java] 
     [java] # Get All Constructors and methods of the class: 17 - org.softlang.util.ObservableSimpleList
     [java] 
     [java] Constructor: org.softlang.util.ObservableSimpleList
     [java] Method: public boolean org.softlang.util.ObservableSimpleList.add(java.lang.Object)
     [java] Method: public java.util.Iterator org.softlang.util.ObservableSimpleList.iterator()
     [java] Method: public boolean org.softlang.util.ObservableSimpleList.remove(java.lang.Object)
     [java] Method: public void org.softlang.util.ObservableSimpleList.addObserver(java.util.Observer)
     [java] Method: public void org.softlang.util.ObservableSimpleList.deleteObserver(java.util.Observer)
     [java] Method: public void org.softlang.util.ObservableSimpleList.deleteObservers()
     [java] Method: public void java.util.Observable.notifyObservers()
     [java] Method: public void java.util.Observable.notifyObservers(java.lang.Object)
     [java] Method: public synchronized boolean java.util.Observable.hasChanged()
     [java] Method: public synchronized int java.util.Observable.countObservers()
     [java] Method: public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait() throws java.lang.InterruptedException
     [java] Method: public boolean java.lang.Object.equals(java.lang.Object)
     [java] Method: public java.lang.String java.lang.Object.toString()
     [java] Method: public native int java.lang.Object.hashCode()
     [java] Method: public final native java.lang.Class java.lang.Object.getClass()
     [java] Method: public final native void java.lang.Object.notify()
     [java] Method: public final native void java.lang.Object.notifyAll()
     [java] 
     [java] # Get All Constructors and methods of the class: 18 - org.softlang.util.RemoveFromList
     [java] 
     [java] Constructor: org.softlang.util.RemoveFromList
     [java] Method: public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait() throws java.lang.InterruptedException
     [java] Method: public boolean java.lang.Object.equals(java.lang.Object)
     [java] Method: public java.lang.String java.lang.Object.toString()
     [java] Method: public native int java.lang.Object.hashCode()
     [java] Method: public final native java.lang.Class java.lang.Object.getClass()
     [java] Method: public final native void java.lang.Object.notify()
     [java] Method: public final native void java.lang.Object.notifyAll()
     [java] 
     [java] # Get All Constructors and methods of the class: 19 - org.softlang.util.SimpleList
     [java] 
     [java] 
     [java] # Get All Constructors and methods of the class: 20 - org.softlang.util.AddToList
     [java] 
     [java] Constructor: org.softlang.util.AddToList
     [java] Method: public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait() throws java.lang.InterruptedException
     [java] Method: public boolean java.lang.Object.equals(java.lang.Object)
     [java] Method: public java.lang.String java.lang.Object.toString()
     [java] Method: public native int java.lang.Object.hashCode()
     [java] Method: public final native java.lang.Class java.lang.Object.getClass()
     [java] Method: public final native void java.lang.Object.notify()
     [java] Method: public final native void java.lang.Object.notifyAll()
     [java] 
     [java] # Get All Constructors and methods of the class: 21 - org.softlang.util.SimpleLinkedList
     [java] 
     [java] Constructor: org.softlang.util.SimpleLinkedList
     [java] Method: public boolean org.softlang.util.SimpleLinkedList.add(java.lang.Object)
     [java] Method: public java.util.Iterator org.softlang.util.SimpleLinkedList.iterator()
     [java] Method: public boolean org.softlang.util.SimpleLinkedList.remove(java.lang.Object)
     [java] Method: public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait() throws java.lang.InterruptedException
     [java] Method: public boolean java.lang.Object.equals(java.lang.Object)
     [java] Method: public java.lang.String java.lang.Object.toString()
     [java] Method: public native int java.lang.Object.hashCode()
     [java] Method: public final native java.lang.Class java.lang.Object.getClass()
     [java] Method: public final native void java.lang.Object.notify()
     [java] Method: public final native void java.lang.Object.notifyAll()
     [java] 
     [java] # Get All Constructors and methods of the class: 22 - org.softlang.util.ChangeList
     [java] 
     [java] Method: public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
     [java] Method: public final void java.lang.Object.wait() throws java.lang.InterruptedException
     [java] Method: public boolean java.lang.Object.equals(java.lang.Object)
     [java] Method: public java.lang.String java.lang.Object.toString()
     [java] Method: public native int java.lang.Object.hashCode()
     [java] Method: public final native java.lang.Class java.lang.Object.getClass()
     [java] Method: public final native void java.lang.Object.notify()
     [java] Method: public final native void java.lang.Object.notifyAll()
     [java] 
     [java] 
     [java] 		Target Classes:
     [java] 
     [java] org.softlang.util.SimpleLinkedList
     [java] org.softlang.util.ChangeList
     [java] org.softlang.company.impl.pojo.EmployeeImpl
     [java] org.softlang.company.impl.bean.EmployeeImpl
     [java] org.softlang.company.impl.bean.ContainerImpl
     [java] org.softlang.company.impl.bean.CompanyImpl
     [java] org.softlang.util.RemoveFromList
     [java] org.softlang.company.impl.pojo.ComponentImpl
     [java] org.softlang.util.ObservableSimpleList
     [java] org.softlang.company.impl.bean.DepartmentImpl
     [java] org.softlang.company.impl.pojo.DepartmentImpl
     [java] org.softlang.company.impl.bean.ComponentImpl
     [java] org.softlang.util.AddToList
     [java] org.softlang.company.impl.pojo.CompanyImpl
     [java] org.softlang.company.impl.pojo.ContainerImpl
     [java] ************
     [java] 
     [java] 
     [java] Obtem todos os metodos e construtores em comum entre classes source e target:
     [java] 
     [java] 
     [java] 
     [java] Source Class: Class: org.softlang.util.SimpleLinkedList
     [java] SuperClass: java.lang.Object
     [java]  Constructors: 
     [java] cons : org.softlang.util.SimpleLinkedList.<init>()
     [java] methods: 
     [java] method : org.softlang.util.SimpleLinkedList.add(java.lang.Object) : 
     [java] method : org.softlang.util.SimpleLinkedList.iterator() : 
     [java] method : org.softlang.util.SimpleLinkedList.remove(java.lang.Object) : 
     [java]  Target Class: Class: org.softlang.util.SimpleLinkedList
     [java] SuperClass: java.lang.Object
     [java]  Constructors: 
     [java] cons : org.softlang.util.SimpleLinkedList.<init>()
     [java] methods: 
     [java] method : org.softlang.util.SimpleLinkedList.add(java.lang.Object) : 
     [java] method : org.softlang.util.SimpleLinkedList.iterator() : 
     [java] method : org.softlang.util.SimpleLinkedList.remove(java.lang.Object) : 
     [java] 
     [java] 
     [java] 
     [java] Lista de Construtores em comum: 
     [java] name: org.softlang.util.SimpleLinkedList
     [java] 
     [java] 
     [java] 
     [java] Lista de Metodos em comum: 
     [java] name: add
     [java] name: iterator
     [java] name: remove
     [java] 
     [java] ************************
     [java] 
     [java] Source Class: Class: org.softlang.util.ChangeList
     [java] SuperClass: java.lang.Object
     [java]  Constructors: 
     [java] methods: 
     [java]  Target Class: Class: org.softlang.util.ChangeList
     [java] SuperClass: java.lang.Object
     [java]  Constructors: 
     [java] methods: 
     [java] 
     [java] 
     [java] 
     [java] Lista de Construtores em comum: 
     [java] name: org.softlang.util.SimpleLinkedList
     [java] 
     [java] 
     [java] 
     [java] Lista de Metodos em comum: 
     [java] name: add
     [java] name: iterator
     [java] name: remove
     [java] 
     [java] ************************
     [java] 
     [java] Source Class: Class: org.softlang.company.impl.pojo.EmployeeImpl
     [java] SuperClass: org.softlang.company.impl.pojo.ComponentImpl
     [java]  Constructors: 
     [java] cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>()
     [java] methods: 
     [java] method : org.softlang.company.impl.pojo.EmployeeImpl.getAddress() : 
     [java] method : org.softlang.company.impl.pojo.EmployeeImpl.accept(org.softlang.visitor.VoidVisitor) : 
     [java] method : org.softlang.company.impl.pojo.EmployeeImpl.setAddress(java.lang.String) : 
     [java] method : org.softlang.company.impl.pojo.EmployeeImpl.getSalary() : 
     [java] method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : 
     [java] method : org.softlang.company.impl.pojo.EmployeeImpl.getManager() : 
     [java] method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : 
     [java] method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : 
     [java] method : org.softlang.company.impl.pojo.ComponentImpl.getName() : 
     [java] method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : 
     [java]  Target Class: Class: org.softlang.company.impl.pojo.EmployeeImpl
     [java] SuperClass: org.softlang.company.impl.pojo.ComponentImpl
     [java]  Constructors: 
     [java] cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>()
     [java] methods: 
     [java] method : org.softlang.company.impl.pojo.EmployeeImpl.getAddress() : 
     [java] method : org.softlang.company.impl.pojo.EmployeeImpl.setAddress(java.lang.String) : 
     [java] method : org.softlang.company.impl.pojo.EmployeeImpl.getSalary() : 
     [java] method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : 
     [java] method : org.softlang.company.impl.pojo.EmployeeImpl.getManager() : 
     [java] method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : 
     [java] method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : 
     [java] method : org.softlang.company.impl.pojo.ComponentImpl.getName() : 
     [java] method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : 
     [java] 
     [java] 
     [java] 
     [java] Lista de Construtores em comum: 
     [java] name: org.softlang.util.SimpleLinkedList
     [java] name: org.softlang.company.impl.pojo.EmployeeImpl
     [java] 
     [java] 
     [java] 
     [java] Lista de Metodos em comum: 
     [java] name: add
     [java] name: iterator
     [java] name: remove
     [java] name: getAddress
     [java] name: setAddress
     [java] name: getSalary
     [java] name: setSalary
     [java] name: getManager
     [java] name: setManager
     [java] name: getCep
     [java] name: getName
     [java] name: setName
     [java] 
     [java] ************************
     [java] 
     [java] Source Class: Class: org.softlang.company.impl.bean.EmployeeImpl
     [java] SuperClass: org.softlang.company.impl.bean.ComponentImpl
     [java]  Constructors: 
     [java] cons : org.softlang.company.impl.bean.EmployeeImpl.<init>()
     [java] methods: 
     [java] method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : 
     [java] method : org.softlang.company.impl.bean.EmployeeImpl.getName() : 
     [java] method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : 
     [java] method : org.softlang.company.impl.bean.EmployeeImpl.accept(org.softlang.visitor.VoidVisitor) : 
     [java] method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : 
     [java] method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : 
     [java] method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : 
     [java] method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : 
     [java] method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : 
     [java] method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : 
     [java] method : org.softlang.company.impl.bean.ComponentImpl.getParent() : 
     [java] method : java.util.Observable.addObserver(java.util.Observer) : 
     [java] method : java.util.Observable.deleteObserver(java.util.Observer) : 
     [java] method : java.util.Observable.deleteObservers() : 
     [java] method : java.util.Observable.notifyObservers() : 
     [java] method : java.util.Observable.notifyObservers(java.lang.Object) : 
     [java] method : java.util.Observable.hasChanged() : 
     [java] method : java.util.Observable.countObservers() : 
     [java]  Target Class: Class: org.softlang.company.impl.bean.EmployeeImpl
     [java] SuperClass: org.softlang.company.impl.bean.ComponentImpl
     [java]  Constructors: 
     [java] cons : org.softlang.company.impl.bean.EmployeeImpl.<init>()
     [java] methods: 
     [java] method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : 
     [java] method : org.softlang.company.impl.bean.EmployeeImpl.getName() : 
     [java] method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : 
     [java] method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : 
     [java] method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : 
     [java] method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : 
     [java] method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : 
     [java] method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : 
     [java] method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : 
     [java] method : org.softlang.company.impl.bean.ComponentImpl.getParent() : 
     [java] method : java.util.Observable.addObserver(java.util.Observer) : 
     [java] method : java.util.Observable.deleteObserver(java.util.Observer) : 
     [java] method : java.util.Observable.deleteObservers() : 
     [java] method : java.util.Observable.notifyObservers() : 
     [java] method : java.util.Observable.notifyObservers(java.lang.Object) : 
     [java] method : java.util.Observable.hasChanged() : 
     [java] method : java.util.Observable.countObservers() : 
     [java] 
     [java] 
     [java] 
     [java] Lista de Construtores em comum: 
     [java] name: org.softlang.util.SimpleLinkedList
     [java] name: org.softlang.company.impl.pojo.EmployeeImpl
     [java] name: org.softlang.company.impl.bean.EmployeeImpl
     [java] 
     [java] 
     [java] 
     [java] Lista de Metodos em comum: 
     [java] name: add
     [java] name: iterator
     [java] name: remove
     [java] name: getAddress
     [java] name: setAddress
     [java] name: getSalary
     [java] name: setSalary
     [java] name: getManager
     [java] name: setManager
     [java] name: getCep
     [java] name: getName
     [java] name: setName
     [java] name: getAddress
     [java] name: getName
     [java] name: setName
     [java] name: setAddress
     [java] name: getSalary
     [java] name: setSalary
     [java] name: getManager
     [java] name: setManager
     [java] name: getCep
     [java] name: getParent
     [java] name: addObserver
     [java] name: deleteObserver
     [java] name: deleteObservers
     [java] name: notifyObservers
     [java] name: notifyObservers
     [java] name: hasChanged
     [java] name: countObservers
     [java] 
     [java] ************************
     [java] 
     [java] Source Class: Class: org.softlang.company.impl.bean.ContainerImpl
     [java] SuperClass: org.softlang.company.impl.bean.ComponentImpl
     [java]  Constructors: 
     [java] methods: 
     [java] method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : 
     [java] method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : 
     [java] method : org.softlang.company.impl.bean.ContainerImpl.subunits() : 
     [java] method : org.softlang.company.impl.bean.ContainerImpl.addObserver(java.util.Observer) : 
     [java] method : org.softlang.company.impl.bean.ContainerImpl.deleteObserver(java.util.Observer) : 
     [java] method : org.softlang.company.impl.bean.ContainerImpl.deleteObservers() : 
     [java] method : org.softlang.company.impl.bean.ComponentImpl.getName() : 
     [java] method : org.softlang.company.impl.bean.ComponentImpl.getParent() : 
     [java] method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : 
     [java] method : org.softlang.company.impl.bean.ComponentImpl.accept(org.softlang.visitor.VoidVisitor) : 
     [java] method : java.util.Observable.notifyObservers() : 
     [java] method : java.util.Observable.notifyObservers(java.lang.Object) : 
     [java] method : java.util.Observable.hasChanged() : 
     [java] method : java.util.Observable.countObservers() : 
     [java] method : org.softlang.company.Component.accept(org.softlang.visitor.VoidVisitor) : 
     [java]  Target Class: Class: org.softlang.company.impl.bean.ContainerImpl
     [java] SuperClass: org.softlang.company.impl.bean.ComponentImpl
     [java]  Constructors: 
     [java] methods: 
     [java] method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : 
     [java] method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : 
     [java] method : org.softlang.company.impl.bean.ContainerImpl.subunits() : 
     [java] method : org.softlang.company.impl.bean.ContainerImpl.addObserver(java.util.Observer) : 
     [java] method : org.softlang.company.impl.bean.ContainerImpl.deleteObserver(java.util.Observer) : 
     [java] method : org.softlang.company.impl.bean.ContainerImpl.deleteObservers() : 
     [java] method : org.softlang.company.impl.bean.ComponentImpl.getName() : 
     [java] method : org.softlang.company.impl.bean.ComponentImpl.getParent() : 
     [java] method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : 
     [java] method : java.util.Observable.notifyObservers() : 
     [java] method : java.util.Observable.notifyObservers(java.lang.Object) : 
     [java] method : java.util.Observable.hasChanged() : 
     [java] method : java.util.Observable.countObservers() : 
     [java] 
     [java] 
     [java] 
     [java] Lista de Construtores em comum: 
     [java] name: org.softlang.util.SimpleLinkedList
     [java] name: org.softlang.company.impl.pojo.EmployeeImpl
     [java] name: org.softlang.company.impl.bean.EmployeeImpl
     [java] 
     [java] 
     [java] 
     [java] Lista de Metodos em comum: 
     [java] name: add
     [java] name: iterator
     [java] name: remove
     [java] name: getAddress
     [java] name: setAddress
     [java] name: getSalary
     [java] name: setSalary
     [java] name: getManager
     [java] name: setManager
     [java] name: getCep
     [java] name: getName
     [java] name: setName
     [java] name: getAddress
     [java] name: getName
     [java] name: setName
     [java] name: setAddress
     [java] name: getSalary
     [java] name: setSalary
     [java] name: getManager
     [java] name: setManager
     [java] name: getCep
     [java] name: getParent
     [java] name: addObserver
     [java] name: deleteObserver
     [java] name: deleteObservers
     [java] name: notifyObservers
     [java] name: notifyObservers
     [java] name: hasChanged
     [java] name: countObservers
     [java] name: add
     [java] name: remove
     [java] name: subunits
     [java] name: addObserver
     [java] name: deleteObserver
     [java] name: deleteObservers
     [java] name: getName
     [java] name: setName
     [java] 
     [java] ************************
     [java] 
     [java] Source Class: Class: org.softlang.company.impl.bean.CompanyImpl
     [java] SuperClass: org.softlang.company.impl.bean.ContainerImpl
     [java]  Constructors: 
     [java] cons : org.softlang.company.impl.bean.CompanyImpl.<init>()
     [java] methods: 
     [java] method : org.softlang.company.impl.bean.CompanyImpl.accept(org.softlang.visitor.VoidVisitor) : 
     [java] method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : 
     [java] method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : 
     [java] method : org.softlang.company.impl.bean.ContainerImpl.subunits() : 
     [java] method : org.softlang.company.impl.bean.ContainerImpl.addObserver(java.util.Observer) : 
     [java] method : org.softlang.company.impl.bean.ContainerImpl.deleteObserver(java.util.Observer) : 
     [java] method : org.softlang.company.impl.bean.ContainerImpl.deleteObservers() : 
     [java] method : org.softlang.company.impl.bean.ComponentImpl.getName() : 
     [java] method : org.softlang.company.impl.bean.ComponentImpl.getParent() : 
     [java] method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : 
     [java] method : java.util.Observable.notifyObservers() : 
     [java] method : java.util.Observable.notifyObservers(java.lang.Object) : 
     [java] method : java.util.Observable.hasChanged() : 
     [java] method : java.util.Observable.countObservers() : 
     [java]  Target Class: Class: org.softlang.company.impl.bean.CompanyImpl
     [java] SuperClass: org.softlang.company.impl.bean.ContainerImpl
     [java]  Constructors: 
     [java] cons : org.softlang.company.impl.bean.CompanyImpl.<init>()
     [java] methods: 
     [java] method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : 
     [java] method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : 
     [java] method : org.softlang.company.impl.bean.ContainerImpl.subunits() : 
     [java] method : org.softlang.company.impl.bean.ContainerImpl.addObserver(java.util.Observer) : 
     [java] method : org.softlang.company.impl.bean.ContainerImpl.deleteObserver(java.util.Observer) : 
     [java] method : org.softlang.company.impl.bean.ContainerImpl.deleteObservers() : 
     [java] method : org.softlang.company.impl.bean.ComponentImpl.getName() : 
     [java] method : org.softlang.company.impl.bean.ComponentImpl.getParent() : 
     [java] method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : 
     [java] method : java.util.Observable.notifyObservers() : 
     [java] method : java.util.Observable.notifyObservers(java.lang.Object) : 
     [java] method : java.util.Observable.hasChanged() : 
     [java] method : java.util.Observable.countObservers() : 
     [java] 
     [java] 
     [java] 
     [java] Lista de Construtores em comum: 
     [java] name: org.softlang.util.SimpleLinkedList
     [java] name: org.softlang.company.impl.pojo.EmployeeImpl
     [java] name: org.softlang.company.impl.bean.EmployeeImpl
     [java] name: org.softlang.company.impl.bean.CompanyImpl
     [java] 
     [java] 
     [java] 
     [java] Lista de Metodos em comum: 
     [java] name: add
     [java] name: iterator
     [java] name: remove
     [java] name: getAddress
     [java] name: setAddress
     [java] name: getSalary
     [java] name: setSalary
     [java] name: getManager
     [java] name: setManager
     [java] name: getCep
     [java] name: getName
     [java] name: setName
     [java] name: getAddress
     [java] name: getName
     [java] name: setName
     [java] name: setAddress
     [java] name: getSalary
     [java] name: setSalary
     [java] name: getManager
     [java] name: setManager
     [java] name: getCep
     [java] name: getParent
     [java] name: addObserver
     [java] name: deleteObserver
     [java] name: deleteObservers
     [java] name: notifyObservers
     [java] name: notifyObservers
     [java] name: hasChanged
     [java] name: countObservers
     [java] name: add
     [java] name: remove
     [java] name: subunits
     [java] name: addObserver
     [java] name: deleteObserver
     [java] name: deleteObservers
     [java] name: getName
     [java] name: setName
     [java] 
     [java] ************************
     [java] 
     [java] Source Class: Class: org.softlang.util.RemoveFromList
     [java] SuperClass: org.softlang.util.ChangeList
     [java]  Constructors: 
     [java] cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object)
     [java] methods: 
     [java]  Target Class: Class: org.softlang.util.RemoveFromList
     [java] SuperClass: org.softlang.util.ChangeList
     [java]  Constructors: 
     [java] cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object)
     [java] methods: 
     [java] 
     [java] 
     [java] 
     [java] Lista de Construtores em comum: 
     [java] name: org.softlang.util.SimpleLinkedList
     [java] name: org.softlang.company.impl.pojo.EmployeeImpl
     [java] name: org.softlang.company.impl.bean.EmployeeImpl
     [java] name: org.softlang.company.impl.bean.CompanyImpl
     [java] name: org.softlang.util.RemoveFromList
     [java] 
     [java] 
     [java] 
     [java] Lista de Metodos em comum: 
     [java] name: add
     [java] name: iterator
     [java] name: remove
     [java] name: getAddress
     [java] name: setAddress
     [java] name: getSalary
     [java] name: setSalary
     [java] name: getManager
     [java] name: setManager
     [java] name: getCep
     [java] name: getName
     [java] name: setName
     [java] name: getAddress
     [java] name: getName
     [java] name: setName
     [java] name: setAddress
     [java] name: getSalary
     [java] name: setSalary
     [java] name: getManager
     [java] name: setManager
     [java] name: getCep
     [java] name: getParent
     [java] name: addObserver
     [java] name: deleteObserver
     [java] name: deleteObservers
     [java] name: notifyObservers
     [java] name: notifyObservers
     [java] name: hasChanged
     [java] name: countObservers
     [java] name: add
     [java] name: remove
     [java] name: subunits
     [java] name: addObserver
     [java] name: deleteObserver
     [java] name: deleteObservers
     [java] name: getName
     [java] name: setName
     [java] 
     [java] ************************
     [java] 
     [java] Source Class: Class: org.softlang.company.impl.pojo.ComponentImpl
     [java] SuperClass: java.lang.Object
     [java]  Constructors: 
     [java] methods: 
     [java] method : org.softlang.company.impl.pojo.ComponentImpl.getName() : 
     [java] method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : 
     [java] method : org.softlang.company.impl.pojo.ComponentImpl.accept(org.softlang.visitor.VoidVisitor) : 
     [java]  Target Class: Class: org.softlang.company.impl.pojo.ComponentImpl
     [java] SuperClass: java.lang.Object
     [java]  Constructors: 
     [java] methods: 
     [java] method : org.softlang.company.impl.pojo.ComponentImpl.getName() : 
     [java] method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : 
     [java] 
     [java] 
     [java] 
     [java] Lista de Construtores em comum: 
     [java] name: org.softlang.util.SimpleLinkedList
     [java] name: org.softlang.company.impl.pojo.EmployeeImpl
     [java] name: org.softlang.company.impl.bean.EmployeeImpl
     [java] name: org.softlang.company.impl.bean.CompanyImpl
     [java] name: org.softlang.util.RemoveFromList
     [java] 
     [java] 
     [java] 
     [java] Lista de Metodos em comum: 
     [java] name: add
     [java] name: iterator
     [java] name: remove
     [java] name: getAddress
     [java] name: setAddress
     [java] name: getSalary
     [java] name: setSalary
     [java] name: getManager
     [java] name: setManager
     [java] name: getCep
     [java] name: getName
     [java] name: setName
     [java] name: getAddress
     [java] name: getName
     [java] name: setName
     [java] name: setAddress
     [java] name: getSalary
     [java] name: setSalary
     [java] name: getManager
     [java] name: setManager
     [java] name: getCep
     [java] name: getParent
     [java] name: addObserver
     [java] name: deleteObserver
     [java] name: deleteObservers
     [java] name: notifyObservers
     [java] name: notifyObservers
     [java] name: hasChanged
     [java] name: countObservers
     [java] name: add
     [java] name: remove
     [java] name: subunits
     [java] name: addObserver
     [java] name: deleteObserver
     [java] name: deleteObservers
     [java] name: getName
     [java] name: setName
     [java] 
     [java] ************************
     [java] 
     [java] Source Class: Class: org.softlang.util.ObservableSimpleList
     [java] SuperClass: java.util.Observable
     [java]  Constructors: 
     [java] cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList)
     [java] methods: 
     [java] method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : 
     [java] method : org.softlang.util.ObservableSimpleList.iterator() : 
     [java] method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : 
     [java] method : org.softlang.util.ObservableSimpleList.addObserver(java.util.Observer) : 
     [java] method : org.softlang.util.ObservableSimpleList.deleteObserver(java.util.Observer) : 
     [java] method : org.softlang.util.ObservableSimpleList.deleteObservers() : 
     [java] method : java.util.Observable.notifyObservers() : 
     [java] method : java.util.Observable.notifyObservers(java.lang.Object) : 
     [java] method : java.util.Observable.hasChanged() : 
     [java] method : java.util.Observable.countObservers() : 
     [java]  Target Class: Class: org.softlang.util.ObservableSimpleList
     [java] SuperClass: java.util.Observable
     [java]  Constructors: 
     [java] cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList)
     [java] methods: 
     [java] method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : 
     [java] method : org.softlang.util.ObservableSimpleList.iterator() : 
     [java] method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : 
     [java] method : org.softlang.util.ObservableSimpleList.addObserver(java.util.Observer) : 
     [java] method : org.softlang.util.ObservableSimpleList.deleteObserver(java.util.Observer) : 
     [java] method : org.softlang.util.ObservableSimpleList.deleteObservers() : 
     [java] method : java.util.Observable.notifyObservers() : 
     [java] method : java.util.Observable.notifyObservers(java.lang.Object) : 
     [java] method : java.util.Observable.hasChanged() : 
     [java] method : java.util.Observable.countObservers() : 
     [java] 
     [java] 
     [java] 
     [java] Lista de Construtores em comum: 
     [java] name: org.softlang.util.SimpleLinkedList
     [java] name: org.softlang.company.impl.pojo.EmployeeImpl
     [java] name: org.softlang.company.impl.bean.EmployeeImpl
     [java] name: org.softlang.company.impl.bean.CompanyImpl
     [java] name: org.softlang.util.RemoveFromList
     [java] name: org.softlang.util.ObservableSimpleList
     [java] 
     [java] 
     [java] 
     [java] Lista de Metodos em comum: 
     [java] name: add
     [java] name: iterator
     [java] name: remove
     [java] name: getAddress
     [java] name: setAddress
     [java] name: getSalary
     [java] name: setSalary
     [java] name: getManager
     [java] name: setManager
     [java] name: getCep
     [java] name: getName
     [java] name: setName
     [java] name: getAddress
     [java] name: getName
     [java] name: setName
     [java] name: setAddress
     [java] name: getSalary
     [java] name: setSalary
     [java] name: getManager
     [java] name: setManager
     [java] name: getCep
     [java] name: getParent
     [java] name: addObserver
     [java] name: deleteObserver
     [java] name: deleteObservers
     [java] name: notifyObservers
     [java] name: notifyObservers
     [java] name: hasChanged
     [java] name: countObservers
     [java] name: add
     [java] name: remove
     [java] name: subunits
     [java] name: addObserver
     [java] name: deleteObserver
     [java] name: deleteObservers
     [java] name: getName
     [java] name: setName
     [java] name: add
     [java] name: iterator
     [java] name: remove
     [java] name: addObserver
     [java] name: deleteObserver
     [java] name: deleteObservers
     [java] 
     [java] ************************
     [java] 
     [java] Source Class: Class: org.softlang.company.impl.bean.DepartmentImpl
     [java] SuperClass: org.softlang.company.impl.bean.ContainerImpl
     [java]  Constructors: 
     [java] cons : org.softlang.company.impl.bean.DepartmentImpl.<init>()
     [java] methods: 
     [java] method : org.softlang.company.impl.bean.DepartmentImpl.accept(org.softlang.visitor.VoidVisitor) : 
     [java] method : org.softlang.company.impl.bean.DepartmentImpl.getManager() : 
     [java] method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : 
     [java] method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : 
     [java] method : org.softlang.company.impl.bean.ContainerImpl.subunits() : 
     [java] method : org.softlang.company.impl.bean.ContainerImpl.addObserver(java.util.Observer) : 
     [java] method : org.softlang.company.impl.bean.ContainerImpl.deleteObserver(java.util.Observer) : 
     [java] method : org.softlang.company.impl.bean.ContainerImpl.deleteObservers() : 
     [java] method : org.softlang.company.impl.bean.ComponentImpl.getName() : 
     [java] method : org.softlang.company.impl.bean.ComponentImpl.getParent() : 
     [java] method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : 
     [java] method : java.util.Observable.notifyObservers() : 
     [java] method : java.util.Observable.notifyObservers(java.lang.Object) : 
     [java] method : java.util.Observable.hasChanged() : 
     [java] method : java.util.Observable.countObservers() : 
     [java]  Target Class: Class: org.softlang.company.impl.bean.DepartmentImpl
     [java] SuperClass: org.softlang.company.impl.bean.ContainerImpl
     [java]  Constructors: 
     [java] cons : org.softlang.company.impl.bean.DepartmentImpl.<init>()
     [java] methods: 
     [java] method : org.softlang.company.impl.bean.DepartmentImpl.getManager() : 
     [java] method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : 
     [java] method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : 
     [java] method : org.softlang.company.impl.bean.ContainerImpl.subunits() : 
     [java] method : org.softlang.company.impl.bean.ContainerImpl.addObserver(java.util.Observer) : 
     [java] method : org.softlang.company.impl.bean.ContainerImpl.deleteObserver(java.util.Observer) : 
     [java] method : org.softlang.company.impl.bean.ContainerImpl.deleteObservers() : 
     [java] method : org.softlang.company.impl.bean.ComponentImpl.getName() : 
     [java] method : org.softlang.company.impl.bean.ComponentImpl.getParent() : 
     [java] method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : 
     [java] method : java.util.Observable.notifyObservers() : 
     [java] method : java.util.Observable.notifyObservers(java.lang.Object) : 
     [java] method : java.util.Observable.hasChanged() : 
     [java] method : java.util.Observable.countObservers() : 
     [java] 
     [java] 
     [java] 
     [java] Lista de Construtores em comum: 
     [java] name: org.softlang.util.SimpleLinkedList
     [java] name: org.softlang.company.impl.pojo.EmployeeImpl
     [java] name: org.softlang.company.impl.bean.EmployeeImpl
     [java] name: org.softlang.company.impl.bean.CompanyImpl
     [java] name: org.softlang.util.RemoveFromList
     [java] name: org.softlang.util.ObservableSimpleList
     [java] name: org.softlang.company.impl.bean.DepartmentImpl
     [java] 
     [java] 
     [java] 
     [java] Lista de Metodos em comum: 
     [java] name: add
     [java] name: iterator
     [java] name: remove
     [java] name: getAddress
     [java] name: setAddress
     [java] name: getSalary
     [java] name: setSalary
     [java] name: getManager
     [java] name: setManager
     [java] name: getCep
     [java] name: getName
     [java] name: setName
     [java] name: getAddress
     [java] name: getName
     [java] name: setName
     [java] name: setAddress
     [java] name: getSalary
     [java] name: setSalary
     [java] name: getManager
     [java] name: setManager
     [java] name: getCep
     [java] name: getParent
     [java] name: addObserver
     [java] name: deleteObserver
     [java] name: deleteObservers
     [java] name: notifyObservers
     [java] name: notifyObservers
     [java] name: hasChanged
     [java] name: countObservers
     [java] name: add
     [java] name: remove
     [java] name: subunits
     [java] name: addObserver
     [java] name: deleteObserver
     [java] name: deleteObservers
     [java] name: getName
     [java] name: setName
     [java] name: add
     [java] name: iterator
     [java] name: remove
     [java] name: addObserver
     [java] name: deleteObserver
     [java] name: deleteObservers
     [java] name: getManager
     [java] 
     [java] ************************
     [java] 
     [java] Source Class: Class: org.softlang.company.impl.pojo.DepartmentImpl
     [java] SuperClass: org.softlang.company.impl.pojo.ContainerImpl
     [java]  Constructors: 
     [java] cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>()
     [java] methods: 
     [java] method : org.softlang.company.impl.pojo.DepartmentImpl.accept(org.softlang.visitor.VoidVisitor) : 
     [java] method : org.softlang.company.impl.pojo.DepartmentImpl.getManager() : 
     [java] method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : 
     [java] method : org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit) : 
     [java] method : org.softlang.company.impl.pojo.ContainerImpl.subunits() : 
     [java] method : org.softlang.company.impl.pojo.ComponentImpl.getName() : 
     [java] method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : 
     [java]  Target Class: Class: org.softlang.company.impl.pojo.DepartmentImpl
     [java] SuperClass: org.softlang.company.impl.pojo.ContainerImpl
     [java]  Constructors: 
     [java] cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>()
     [java] methods: 
     [java] method : org.softlang.company.impl.pojo.DepartmentImpl.getManager() : 
     [java] method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : 
     [java] method : org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit) : 
     [java] method : org.softlang.company.impl.pojo.ContainerImpl.subunits() : 
     [java] method : org.softlang.company.impl.pojo.ComponentImpl.getName() : 
     [java] method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : 
     [java] 
     [java] 
     [java] 
     [java] Lista de Construtores em comum: 
     [java] name: org.softlang.util.SimpleLinkedList
     [java] name: org.softlang.company.impl.pojo.EmployeeImpl
     [java] name: org.softlang.company.impl.bean.EmployeeImpl
     [java] name: org.softlang.company.impl.bean.CompanyImpl
     [java] name: org.softlang.util.RemoveFromList
     [java] name: org.softlang.util.ObservableSimpleList
     [java] name: org.softlang.company.impl.bean.DepartmentImpl
     [java] name: org.softlang.company.impl.pojo.DepartmentImpl
     [java] 
     [java] 
     [java] 
     [java] Lista de Metodos em comum: 
     [java] name: add
     [java] name: iterator
     [java] name: remove
     [java] name: getAddress
     [java] name: setAddress
     [java] name: getSalary
     [java] name: setSalary
     [java] name: getManager
     [java] name: setManager
     [java] name: getCep
     [java] name: getName
     [java] name: setName
     [java] name: getAddress
     [java] name: getName
     [java] name: setName
     [java] name: setAddress
     [java] name: getSalary
     [java] name: setSalary
     [java] name: getManager
     [java] name: setManager
     [java] name: getCep
     [java] name: getParent
     [java] name: addObserver
     [java] name: deleteObserver
     [java] name: deleteObservers
     [java] name: notifyObservers
     [java] name: notifyObservers
     [java] name: hasChanged
     [java] name: countObservers
     [java] name: add
     [java] name: remove
     [java] name: subunits
     [java] name: addObserver
     [java] name: deleteObserver
     [java] name: deleteObservers
     [java] name: getName
     [java] name: setName
     [java] name: add
     [java] name: iterator
     [java] name: remove
     [java] name: addObserver
     [java] name: deleteObserver
     [java] name: deleteObservers
     [java] name: getManager
     [java] name: getManager
     [java] name: add
     [java] name: remove
     [java] name: subunits
     [java] 
     [java] ************************
     [java] 
     [java] Source Class: Class: org.softlang.company.impl.bean.ComponentImpl
     [java] SuperClass: java.util.Observable
     [java]  Constructors: 
     [java] methods: 
     [java] method : org.softlang.company.impl.bean.ComponentImpl.getName() : 
     [java] method : org.softlang.company.impl.bean.ComponentImpl.getParent() : 
     [java] method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : 
     [java] method : org.softlang.company.impl.bean.ComponentImpl.accept(org.softlang.visitor.VoidVisitor) : 
     [java] method : java.util.Observable.addObserver(java.util.Observer) : 
     [java] method : java.util.Observable.deleteObserver(java.util.Observer) : 
     [java] method : java.util.Observable.deleteObservers() : 
     [java] method : java.util.Observable.notifyObservers() : 
     [java] method : java.util.Observable.notifyObservers(java.lang.Object) : 
     [java] method : java.util.Observable.hasChanged() : 
     [java] method : java.util.Observable.countObservers() : 
     [java]  Target Class: Class: org.softlang.company.impl.bean.ComponentImpl
     [java] SuperClass: java.util.Observable
     [java]  Constructors: 
     [java] methods: 
     [java] method : org.softlang.company.impl.bean.ComponentImpl.getName() : 
     [java] method : org.softlang.company.impl.bean.ComponentImpl.getParent() : 
     [java] method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : 
     [java] method : java.util.Observable.addObserver(java.util.Observer) : 
     [java] method : java.util.Observable.deleteObserver(java.util.Observer) : 
     [java] method : java.util.Observable.deleteObservers() : 
     [java] method : java.util.Observable.notifyObservers() : 
     [java] method : java.util.Observable.notifyObservers(java.lang.Object) : 
     [java] method : java.util.Observable.hasChanged() : 
     [java] method : java.util.Observable.countObservers() : 
     [java] 
     [java] 
     [java] 
     [java] Lista de Construtores em comum: 
     [java] name: org.softlang.util.SimpleLinkedList
     [java] name: org.softlang.company.impl.pojo.EmployeeImpl
     [java] name: org.softlang.company.impl.bean.EmployeeImpl
     [java] name: org.softlang.company.impl.bean.CompanyImpl
     [java] name: org.softlang.util.RemoveFromList
     [java] name: org.softlang.util.ObservableSimpleList
     [java] name: org.softlang.company.impl.bean.DepartmentImpl
     [java] name: org.softlang.company.impl.pojo.DepartmentImpl
     [java] 
     [java] 
     [java] 
     [java] Lista de Metodos em comum: 
     [java] name: add
     [java] name: iterator
     [java] name: remove
     [java] name: getAddress
     [java] name: setAddress
     [java] name: getSalary
     [java] name: setSalary
     [java] name: getManager
     [java] name: setManager
     [java] name: getCep
     [java] name: getName
     [java] name: setName
     [java] name: getAddress
     [java] name: getName
     [java] name: setName
     [java] name: setAddress
     [java] name: getSalary
     [java] name: setSalary
     [java] name: getManager
     [java] name: setManager
     [java] name: getCep
     [java] name: getParent
     [java] name: addObserver
     [java] name: deleteObserver
     [java] name: deleteObservers
     [java] name: notifyObservers
     [java] name: notifyObservers
     [java] name: hasChanged
     [java] name: countObservers
     [java] name: add
     [java] name: remove
     [java] name: subunits
     [java] name: addObserver
     [java] name: deleteObserver
     [java] name: deleteObservers
     [java] name: getName
     [java] name: setName
     [java] name: add
     [java] name: iterator
     [java] name: remove
     [java] name: addObserver
     [java] name: deleteObserver
     [java] name: deleteObservers
     [java] name: getManager
     [java] name: getManager
     [java] name: add
     [java] name: remove
     [java] name: subunits
     [java] 
     [java] ************************
     [java] 
     [java] Source Class: Class: org.softlang.util.AddToList
     [java] SuperClass: org.softlang.util.ChangeList
     [java]  Constructors: 
     [java] cons : org.softlang.util.AddToList.<init>(java.lang.Object)
     [java] methods: 
     [java]  Target Class: Class: org.softlang.util.AddToList
     [java] SuperClass: org.softlang.util.ChangeList
     [java]  Constructors: 
     [java] cons : org.softlang.util.AddToList.<init>(java.lang.Object)
     [java] methods: 
     [java] 
     [java] 
     [java] 
     [java] Lista de Construtores em comum: 
     [java] name: org.softlang.util.SimpleLinkedList
     [java] name: org.softlang.company.impl.pojo.EmployeeImpl
     [java] name: org.softlang.company.impl.bean.EmployeeImpl
     [java] name: org.softlang.company.impl.bean.CompanyImpl
     [java] name: org.softlang.util.RemoveFromList
     [java] name: org.softlang.util.ObservableSimpleList
     [java] name: org.softlang.company.impl.bean.DepartmentImpl
     [java] name: org.softlang.company.impl.pojo.DepartmentImpl
     [java] name: org.softlang.util.AddToList
     [java] 
     [java] 
     [java] 
     [java] Lista de Metodos em comum: 
     [java] name: add
     [java] name: iterator
     [java] name: remove
     [java] name: getAddress
     [java] name: setAddress
     [java] name: getSalary
     [java] name: setSalary
     [java] name: getManager
     [java] name: setManager
     [java] name: getCep
     [java] name: getName
     [java] name: setName
     [java] name: getAddress
     [java] name: getName
     [java] name: setName
     [java] name: setAddress
     [java] name: getSalary
     [java] name: setSalary
     [java] name: getManager
     [java] name: setManager
     [java] name: getCep
     [java] name: getParent
     [java] name: addObserver
     [java] name: deleteObserver
     [java] name: deleteObservers
     [java] name: notifyObservers
     [java] name: notifyObservers
     [java] name: hasChanged
     [java] name: countObservers
     [java] name: add
     [java] name: remove
     [java] name: subunits
     [java] name: addObserver
     [java] name: deleteObserver
     [java] name: deleteObservers
     [java] name: getName
     [java] name: setName
     [java] name: add
     [java] name: iterator
     [java] name: remove
     [java] name: addObserver
     [java] name: deleteObserver
     [java] name: deleteObservers
     [java] name: getManager
     [java] name: getManager
     [java] name: add
     [java] name: remove
     [java] name: subunits
     [java] 
     [java] ************************
     [java] 
     [java] Source Class: Class: org.softlang.company.impl.pojo.CompanyImpl
     [java] SuperClass: org.softlang.company.impl.pojo.ContainerImpl
     [java]  Constructors: 
     [java] cons : org.softlang.company.impl.pojo.CompanyImpl.<init>()
     [java] methods: 
     [java] method : org.softlang.company.impl.pojo.CompanyImpl.add(org.softlang.company.Subunit) : 
     [java] method : org.softlang.company.impl.pojo.CompanyImpl.accept(org.softlang.visitor.VoidVisitor) : 
     [java] method : org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit) : 
     [java] method : org.softlang.company.impl.pojo.ContainerImpl.subunits() : 
     [java] method : org.softlang.company.impl.pojo.ComponentImpl.getName() : 
     [java] method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : 
     [java]  Target Class: Class: org.softlang.company.impl.pojo.CompanyImpl
     [java] SuperClass: org.softlang.company.impl.pojo.ContainerImpl
     [java]  Constructors: 
     [java] cons : org.softlang.company.impl.pojo.CompanyImpl.<init>()
     [java] methods: 
     [java] method : org.softlang.company.impl.pojo.CompanyImpl.add(org.softlang.company.Subunit) : 
     [java] method : org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit) : 
     [java] method : org.softlang.company.impl.pojo.ContainerImpl.subunits() : 
     [java] method : org.softlang.company.impl.pojo.ComponentImpl.getName() : 
     [java] method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : 
     [java] 
     [java] 
     [java] 
     [java] Lista de Construtores em comum: 
     [java] name: org.softlang.util.SimpleLinkedList
     [java] name: org.softlang.company.impl.pojo.EmployeeImpl
     [java] name: org.softlang.company.impl.bean.EmployeeImpl
     [java] name: org.softlang.company.impl.bean.CompanyImpl
     [java] name: org.softlang.util.RemoveFromList
     [java] name: org.softlang.util.ObservableSimpleList
     [java] name: org.softlang.company.impl.bean.DepartmentImpl
     [java] name: org.softlang.company.impl.pojo.DepartmentImpl
     [java] name: org.softlang.util.AddToList
     [java] name: org.softlang.company.impl.pojo.CompanyImpl
     [java] 
     [java] 
     [java] 
     [java] Lista de Metodos em comum: 
     [java] name: add
     [java] name: iterator
     [java] name: remove
     [java] name: getAddress
     [java] name: setAddress
     [java] name: getSalary
     [java] name: setSalary
     [java] name: getManager
     [java] name: setManager
     [java] name: getCep
     [java] name: getName
     [java] name: setName
     [java] name: getAddress
     [java] name: getName
     [java] name: setName
     [java] name: setAddress
     [java] name: getSalary
     [java] name: setSalary
     [java] name: getManager
     [java] name: setManager
     [java] name: getCep
     [java] name: getParent
     [java] name: addObserver
     [java] name: deleteObserver
     [java] name: deleteObservers
     [java] name: notifyObservers
     [java] name: notifyObservers
     [java] name: hasChanged
     [java] name: countObservers
     [java] name: add
     [java] name: remove
     [java] name: subunits
     [java] name: addObserver
     [java] name: deleteObserver
     [java] name: deleteObservers
     [java] name: getName
     [java] name: setName
     [java] name: add
     [java] name: iterator
     [java] name: remove
     [java] name: addObserver
     [java] name: deleteObserver
     [java] name: deleteObservers
     [java] name: getManager
     [java] name: getManager
     [java] name: add
     [java] name: remove
     [java] name: subunits
     [java] name: add
     [java] 
     [java] ************************
     [java] 
     [java] Source Class: Class: org.softlang.company.impl.pojo.ContainerImpl
     [java] SuperClass: org.softlang.company.impl.pojo.ComponentImpl
     [java]  Constructors: 
     [java] methods: 
     [java] method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : 
     [java] method : org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit) : 
     [java] method : org.softlang.company.impl.pojo.ContainerImpl.subunits() : 
     [java] method : org.softlang.company.impl.pojo.ComponentImpl.getName() : 
     [java] method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : 
     [java] method : org.softlang.company.impl.pojo.ComponentImpl.accept(org.softlang.visitor.VoidVisitor) : 
     [java] method : org.softlang.company.Component.accept(org.softlang.visitor.VoidVisitor) : 
     [java]  Target Class: Class: org.softlang.company.impl.pojo.ContainerImpl
     [java] SuperClass: org.softlang.company.impl.pojo.ComponentImpl
     [java]  Constructors: 
     [java] methods: 
     [java] method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : 
     [java] method : org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit) : 
     [java] method : org.softlang.company.impl.pojo.ContainerImpl.subunits() : 
     [java] method : org.softlang.company.impl.pojo.ComponentImpl.getName() : 
     [java] method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : 
     [java] 
     [java] 
     [java] 
     [java] Lista de Construtores em comum: 
     [java] name: org.softlang.util.SimpleLinkedList
     [java] name: org.softlang.company.impl.pojo.EmployeeImpl
     [java] name: org.softlang.company.impl.bean.EmployeeImpl
     [java] name: org.softlang.company.impl.bean.CompanyImpl
     [java] name: org.softlang.util.RemoveFromList
     [java] name: org.softlang.util.ObservableSimpleList
     [java] name: org.softlang.company.impl.bean.DepartmentImpl
     [java] name: org.softlang.company.impl.pojo.DepartmentImpl
     [java] name: org.softlang.util.AddToList
     [java] name: org.softlang.company.impl.pojo.CompanyImpl
     [java] 
     [java] 
     [java] 
     [java] Lista de Metodos em comum: 
     [java] name: add
     [java] name: iterator
     [java] name: remove
     [java] name: getAddress
     [java] name: setAddress
     [java] name: getSalary
     [java] name: setSalary
     [java] name: getManager
     [java] name: setManager
     [java] name: getCep
     [java] name: getName
     [java] name: setName
     [java] name: getAddress
     [java] name: getName
     [java] name: setName
     [java] name: setAddress
     [java] name: getSalary
     [java] name: setSalary
     [java] name: getManager
     [java] name: setManager
     [java] name: getCep
     [java] name: getParent
     [java] name: addObserver
     [java] name: deleteObserver
     [java] name: deleteObservers
     [java] name: notifyObservers
     [java] name: notifyObservers
     [java] name: hasChanged
     [java] name: countObservers
     [java] name: add
     [java] name: remove
     [java] name: subunits
     [java] name: addObserver
     [java] name: deleteObserver
     [java] name: deleteObservers
     [java] name: getName
     [java] name: setName
     [java] name: add
     [java] name: iterator
     [java] name: remove
     [java] name: addObserver
     [java] name: deleteObserver
     [java] name: deleteObservers
     [java] name: getManager
     [java] name: getManager
     [java] name: add
     [java] name: remove
     [java] name: subunits
     [java] name: add
     [java] 
     [java] ************************
     [java] 
     [java] Classe Para Testar:
     [java] 
     [java] classe para teste: org.softlang.company.impl.pojo.ContainerImpl
     [java] 
     [java] classe para teste: org.softlang.company.impl.bean.CompanyImpl
     [java] 
     [java] classe para teste: org.softlang.company.impl.pojo.CompanyImpl
     [java] 
     [java] classe para teste: org.softlang.company.impl.bean.DepartmentImpl
     [java] 
     [java] classe para teste: org.softlang.company.impl.bean.ContainerImpl
     [java] 
     [java] classe para teste: org.softlang.company.Component
     [java] 
     [java] classe para teste: org.softlang.company.impl.pojo.EmployeeImpl
     [java] 
     [java] classe para teste: org.softlang.company.impl.pojo.ComponentImpl
     [java] 
     [java] classe para teste: org.softlang.util.ObservableSimpleList
     [java] 
     [java] classe para teste: org.softlang.company.impl.bean.EmployeeImpl
     [java] 
     [java] classe para teste: org.softlang.company.impl.bean.ComponentImpl
     [java] 
     [java] classe para teste: org.softlang.company.impl.pojo.DepartmentImpl
     [java] lines.toString = cons : org.softlang.util.SimpleLinkedList.<init>()
     [java] cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>()
     [java] cons : org.softlang.company.impl.bean.EmployeeImpl.<init>()
     [java] cons : org.softlang.company.impl.bean.CompanyImpl.<init>()
     [java] cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object)
     [java] cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList)
     [java] cons : org.softlang.company.impl.bean.DepartmentImpl.<init>()
     [java] cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>()
     [java] cons : org.softlang.util.AddToList.<init>(java.lang.Object)
     [java] cons : org.softlang.company.impl.pojo.CompanyImpl.<init>()
     [java] cons : org.softlang.util.SimpleLinkedList.<init>()
     [java] cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>()
     [java] cons : org.softlang.company.impl.bean.EmployeeImpl.<init>()
     [java] cons : org.softlang.company.impl.bean.CompanyImpl.<init>()
     [java] cons : org.softlang.company.impl.bean.CompanyImpl.<init>()
     [java] cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object)
     [java] cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList)
     [java] cons : org.softlang.company.impl.bean.DepartmentImpl.<init>()
     [java] cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>()
     [java] cons : org.softlang.util.AddToList.<init>(java.lang.Object)
     [java] cons : org.softlang.company.impl.pojo.CompanyImpl.<init>()
     [java] cons : org.softlang.util.SimpleLinkedList.<init>()
     [java] cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>()
     [java] cons : org.softlang.company.impl.bean.EmployeeImpl.<init>()
     [java] cons : org.softlang.company.impl.bean.CompanyImpl.<init>()
     [java] cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object)
     [java] cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList)
     [java] cons : org.softlang.company.impl.bean.DepartmentImpl.<init>()
     [java] cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>()
     [java] cons : org.softlang.util.AddToList.<init>(java.lang.Object)
     [java] cons : org.softlang.company.impl.pojo.CompanyImpl.<init>()
     [java] cons : org.softlang.company.impl.pojo.CompanyImpl.<init>()
     [java] cons : org.softlang.util.SimpleLinkedList.<init>()
     [java] cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>()
     [java] cons : org.softlang.company.impl.bean.EmployeeImpl.<init>()
     [java] cons : org.softlang.company.impl.bean.CompanyImpl.<init>()
     [java] cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object)
     [java] cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList)
     [java] cons : org.softlang.company.impl.bean.DepartmentImpl.<init>()
     [java] cons : org.softlang.company.impl.bean.DepartmentImpl.<init>()
     [java] cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>()
     [java] cons : org.softlang.util.AddToList.<init>(java.lang.Object)
     [java] cons : org.softlang.company.impl.pojo.CompanyImpl.<init>()
     [java] cons : org.softlang.util.SimpleLinkedList.<init>()
     [java] cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>()
     [java] cons : org.softlang.company.impl.bean.EmployeeImpl.<init>()
     [java] cons : org.softlang.company.impl.bean.CompanyImpl.<init>()
     [java] cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object)
     [java] cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList)
     [java] cons : org.softlang.company.impl.bean.DepartmentImpl.<init>()
     [java] cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>()
     [java] cons : org.softlang.util.AddToList.<init>(java.lang.Object)
     [java] cons : org.softlang.company.impl.pojo.CompanyImpl.<init>()
     [java] cons : org.softlang.util.SimpleLinkedList.<init>()
     [java] cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>()
     [java] cons : org.softlang.company.impl.bean.EmployeeImpl.<init>()
     [java] cons : org.softlang.company.impl.bean.CompanyImpl.<init>()
     [java] cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object)
     [java] cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList)
     [java] cons : org.softlang.company.impl.bean.DepartmentImpl.<init>()
     [java] cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>()
     [java] cons : org.softlang.util.AddToList.<init>(java.lang.Object)
     [java] cons : org.softlang.company.impl.pojo.CompanyImpl.<init>()
     [java] cons : org.softlang.util.SimpleLinkedList.<init>()
     [java] cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>()
     [java] cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>()
     [java] cons : org.softlang.company.impl.bean.EmployeeImpl.<init>()
     [java] cons : org.softlang.company.impl.bean.CompanyImpl.<init>()
     [java] cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object)
     [java] cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList)
     [java] cons : org.softlang.company.impl.bean.DepartmentImpl.<init>()
     [java] cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>()
     [java] cons : org.softlang.util.AddToList.<init>(java.lang.Object)
     [java] cons : org.softlang.company.impl.pojo.CompanyImpl.<init>()
     [java] cons : org.softlang.util.SimpleLinkedList.<init>()
     [java] cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>()
     [java] cons : org.softlang.company.impl.bean.EmployeeImpl.<init>()
     [java] cons : org.softlang.company.impl.bean.CompanyImpl.<init>()
     [java] cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object)
     [java] cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList)
     [java] cons : org.softlang.company.impl.bean.DepartmentImpl.<init>()
     [java] cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>()
     [java] cons : org.softlang.util.AddToList.<init>(java.lang.Object)
     [java] cons : org.softlang.company.impl.pojo.CompanyImpl.<init>()
     [java] cons : org.softlang.util.SimpleLinkedList.<init>()
     [java] cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>()
     [java] cons : org.softlang.company.impl.bean.EmployeeImpl.<init>()
     [java] cons : org.softlang.company.impl.bean.CompanyImpl.<init>()
     [java] cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object)
     [java] cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList)
     [java] cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList)
     [java] cons : org.softlang.company.impl.bean.DepartmentImpl.<init>()
     [java] cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>()
     [java] cons : org.softlang.util.AddToList.<init>(java.lang.Object)
     [java] cons : org.softlang.company.impl.pojo.CompanyImpl.<init>()
     [java] cons : org.softlang.util.SimpleLinkedList.<init>()
     [java] cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>()
     [java] cons : org.softlang.company.impl.bean.EmployeeImpl.<init>()
     [java] cons : org.softlang.company.impl.bean.EmployeeImpl.<init>()
     [java] cons : org.softlang.company.impl.bean.CompanyImpl.<init>()
     [java] cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object)
     [java] cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList)
     [java] cons : org.softlang.company.impl.bean.DepartmentImpl.<init>()
     [java] cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>()
     [java] cons : org.softlang.util.AddToList.<init>(java.lang.Object)
     [java] cons : org.softlang.company.impl.pojo.CompanyImpl.<init>()
     [java] cons : org.softlang.util.SimpleLinkedList.<init>()
     [java] cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>()
     [java] cons : org.softlang.company.impl.bean.EmployeeImpl.<init>()
     [java] cons : org.softlang.company.impl.bean.CompanyImpl.<init>()
     [java] cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object)
     [java] cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList)
     [java] cons : org.softlang.company.impl.bean.DepartmentImpl.<init>()
     [java] cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>()
     [java] cons : org.softlang.util.AddToList.<init>(java.lang.Object)
     [java] cons : org.softlang.company.impl.pojo.CompanyImpl.<init>()
     [java] cons : org.softlang.util.SimpleLinkedList.<init>()
     [java] cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>()
     [java] cons : org.softlang.company.impl.bean.EmployeeImpl.<init>()
     [java] cons : org.softlang.company.impl.bean.CompanyImpl.<init>()
     [java] cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object)
     [java] cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList)
     [java] cons : org.softlang.company.impl.bean.DepartmentImpl.<init>()
     [java] cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>()
     [java] cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>()
     [java] cons : org.softlang.util.AddToList.<init>(java.lang.Object)
     [java] cons : org.softlang.company.impl.pojo.CompanyImpl.<init>()
     [java] cons : org.softlang.util.SimpleLinkedList.<init>()
     [java] cons : org.softlang.company.impl.pojo.EmployeeImpl.<init>()
     [java] cons : org.softlang.company.impl.bean.EmployeeImpl.<init>()
     [java] cons : org.softlang.company.impl.bean.CompanyImpl.<init>()
     [java] cons : org.softlang.util.RemoveFromList.<init>(java.lang.Object)
     [java] cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList)
     [java] cons : org.softlang.util.ObservableSimpleList.<init>(org.softlang.util.SimpleList)
     [java] cons : org.softlang.company.impl.bean.DepartmentImpl.<init>()
     [java] cons : org.softlang.company.impl.pojo.DepartmentImpl.<init>()
     [java] cons : org.softlang.util.AddToList.<init>(java.lang.Object)
     [java] cons : org.softlang.company.impl.pojo.CompanyImpl.<init>()
     [java] method : org.softlang.company.impl.pojo.EmployeeImpl.getAddress() : org.softlang.company.impl.pojo.EmployeeImpl
     [java] method : org.softlang.company.impl.pojo.EmployeeImpl.setAddress(java.lang.String) : org.softlang.company.impl.pojo.EmployeeImpl
     [java] method : org.softlang.company.impl.pojo.EmployeeImpl.getSalary() : org.softlang.company.impl.pojo.EmployeeImpl
     [java] method : org.softlang.company.impl.pojo.EmployeeImpl.setSalary(double) : org.softlang.company.impl.pojo.EmployeeImpl
     [java] method : org.softlang.company.impl.pojo.EmployeeImpl.getManager() : org.softlang.company.impl.pojo.EmployeeImpl
     [java] method : org.softlang.company.impl.pojo.EmployeeImpl.setManager(boolean) : org.softlang.company.impl.pojo.EmployeeImpl
     [java] method : org.softlang.company.impl.pojo.EmployeeImpl.getCep() : org.softlang.company.impl.pojo.EmployeeImpl
     [java] method : org.softlang.company.impl.pojo.ComponentImpl.getName() : org.softlang.company.impl.pojo.ComponentImpl;org.softlang.company.impl.pojo.DepartmentImpl;org.softlang.company.impl.pojo.EmployeeImpl;org.softlang.company.impl.pojo.ContainerImpl;org.softlang.company.impl.pojo.CompanyImpl
     [java] method : org.softlang.company.impl.pojo.ComponentImpl.setName(java.lang.String) : org.softlang.company.impl.pojo.ComponentImpl;org.softlang.company.impl.pojo.DepartmentImpl;org.softlang.company.impl.pojo.EmployeeImpl;org.softlang.company.impl.pojo.ContainerImpl;org.softlang.company.impl.pojo.CompanyImpl
     [java] method : org.softlang.company.impl.bean.EmployeeImpl.getAddress() : org.softlang.company.impl.bean.EmployeeImpl
     [java] method : org.softlang.company.impl.bean.EmployeeImpl.getName() : org.softlang.company.impl.bean.EmployeeImpl
     [java] method : org.softlang.company.impl.bean.EmployeeImpl.setName(java.lang.String) : org.softlang.company.impl.bean.EmployeeImpl
     [java] method : org.softlang.company.impl.bean.EmployeeImpl.setAddress(java.lang.String) : org.softlang.company.impl.bean.EmployeeImpl
     [java] method : org.softlang.company.impl.bean.EmployeeImpl.getSalary() : org.softlang.company.impl.bean.EmployeeImpl
     [java] method : org.softlang.company.impl.bean.EmployeeImpl.setSalary(double) : org.softlang.company.impl.bean.EmployeeImpl
     [java] method : org.softlang.company.impl.bean.EmployeeImpl.getManager() : org.softlang.company.impl.bean.EmployeeImpl
     [java] method : org.softlang.company.impl.bean.EmployeeImpl.setManager(boolean) : org.softlang.company.impl.bean.EmployeeImpl
     [java] method : org.softlang.company.impl.bean.EmployeeImpl.getCep() : org.softlang.company.impl.bean.EmployeeImpl
     [java] method : org.softlang.company.impl.bean.ComponentImpl.getParent() : org.softlang.company.impl.bean.CompanyImpl;org.softlang.company.impl.bean.DepartmentImpl;org.softlang.company.impl.bean.ComponentImpl;org.softlang.company.impl.bean.EmployeeImpl;org.softlang.company.impl.bean.ContainerImpl
     [java] method : java.util.Observable.addObserver(java.util.Observer) : org.softlang.company.impl.bean.ComponentImpl;org.softlang.company.impl.bean.EmployeeImpl
     [java] method : java.util.Observable.deleteObserver(java.util.Observer) : org.softlang.company.impl.bean.ComponentImpl;org.softlang.company.impl.bean.EmployeeImpl
     [java] method : java.util.Observable.deleteObservers() : org.softlang.company.impl.bean.ComponentImpl;org.softlang.company.impl.bean.EmployeeImpl
     [java] method : java.util.Observable.notifyObservers() : org.softlang.company.impl.bean.CompanyImpl;org.softlang.util.ObservableSimpleList;org.softlang.company.impl.bean.DepartmentImpl;org.softlang.company.impl.bean.ComponentImpl;org.softlang.company.impl.bean.EmployeeImpl;org.softlang.company.impl.bean.ContainerImpl
     [java] method : java.util.Observable.notifyObservers(java.lang.Object) : org.softlang.company.impl.bean.CompanyImpl;org.softlang.util.ObservableSimpleList;org.softlang.company.impl.bean.DepartmentImpl;org.softlang.company.impl.bean.ComponentImpl;org.softlang.company.impl.bean.EmployeeImpl;org.softlang.company.impl.bean.ContainerImpl
     [java] method : java.util.Observable.hasChanged() : org.softlang.company.impl.bean.CompanyImpl;org.softlang.util.ObservableSimpleList;org.softlang.company.impl.bean.DepartmentImpl;org.softlang.company.impl.bean.ComponentImpl;org.softlang.company.impl.bean.EmployeeImpl;org.softlang.company.impl.bean.ContainerImpl
     [java] method : java.util.Observable.countObservers() : org.softlang.company.impl.bean.CompanyImpl;org.softlang.util.ObservableSimpleList;org.softlang.company.impl.bean.DepartmentImpl;org.softlang.company.impl.bean.ComponentImpl;org.softlang.company.impl.bean.EmployeeImpl;org.softlang.company.impl.bean.ContainerImpl
     [java] method : org.softlang.company.impl.bean.ContainerImpl.add(org.softlang.company.Subunit) : org.softlang.company.impl.bean.CompanyImpl;org.softlang.company.impl.bean.DepartmentImpl;org.softlang.company.impl.bean.ContainerImpl
     [java] method : org.softlang.company.impl.bean.ContainerImpl.remove(org.softlang.company.Subunit) : org.softlang.company.impl.bean.CompanyImpl;org.softlang.company.impl.bean.DepartmentImpl;org.softlang.company.impl.bean.ContainerImpl
     [java] method : org.softlang.company.impl.bean.ContainerImpl.subunits() : org.softlang.company.impl.bean.CompanyImpl;org.softlang.company.impl.bean.DepartmentImpl;org.softlang.company.impl.bean.ContainerImpl
     [java] method : org.softlang.company.impl.bean.ContainerImpl.addObserver(java.util.Observer) : org.softlang.company.impl.bean.CompanyImpl;org.softlang.company.impl.bean.DepartmentImpl;org.softlang.company.impl.bean.ContainerImpl
     [java] method : org.softlang.company.impl.bean.ContainerImpl.deleteObserver(java.util.Observer) : org.softlang.company.impl.bean.CompanyImpl;org.softlang.company.impl.bean.DepartmentImpl;org.softlang.company.impl.bean.ContainerImpl
     [java] method : org.softlang.company.impl.bean.ContainerImpl.deleteObservers() : org.softlang.company.impl.bean.CompanyImpl;org.softlang.company.impl.bean.DepartmentImpl;org.softlang.company.impl.bean.ContainerImpl
     [java] method : org.softlang.company.impl.bean.ComponentImpl.getName() : org.softlang.company.impl.bean.CompanyImpl;org.softlang.company.impl.bean.DepartmentImpl;org.softlang.company.impl.bean.ComponentImpl;org.softlang.company.impl.bean.ContainerImpl
     [java] method : org.softlang.company.impl.bean.ComponentImpl.setName(java.lang.String) : org.softlang.company.impl.bean.CompanyImpl;org.softlang.company.impl.bean.DepartmentImpl;org.softlang.company.impl.bean.ComponentImpl;org.softlang.company.impl.bean.ContainerImpl
     [java] method : org.softlang.util.ObservableSimpleList.add(java.lang.Object) : org.softlang.util.ObservableSimpleList
     [java] method : org.softlang.util.ObservableSimpleList.iterator() : org.softlang.util.ObservableSimpleList
     [java] method : org.softlang.util.ObservableSimpleList.remove(java.lang.Object) : org.softlang.util.ObservableSimpleList
     [java] method : org.softlang.util.ObservableSimpleList.addObserver(java.util.Observer) : org.softlang.util.ObservableSimpleList
     [java] method : org.softlang.util.ObservableSimpleList.deleteObserver(java.util.Observer) : org.softlang.util.ObservableSimpleList
     [java] method : org.softlang.util.ObservableSimpleList.deleteObservers() : org.softlang.util.ObservableSimpleList
     [java] method : org.softlang.company.impl.bean.DepartmentImpl.getManager() : org.softlang.company.impl.bean.DepartmentImpl
     [java] method : org.softlang.company.impl.pojo.DepartmentImpl.getManager() : org.softlang.company.impl.pojo.DepartmentImpl
     [java] method : org.softlang.company.impl.pojo.ContainerImpl.add(org.softlang.company.Subunit) : org.softlang.company.impl.pojo.DepartmentImpl;org.softlang.company.impl.pojo.ContainerImpl
     [java] method : org.softlang.company.impl.pojo.ContainerImpl.remove(org.softlang.company.Subunit) : org.softlang.company.impl.pojo.DepartmentImpl;org.softlang.company.impl.pojo.ContainerImpl;org.softlang.company.impl.pojo.CompanyImpl
     [java] method : org.softlang.company.impl.pojo.ContainerImpl.subunits() : org.softlang.company.impl.pojo.DepartmentImpl;org.softlang.company.impl.pojo.ContainerImpl;org.softlang.company.impl.pojo.CompanyImpl
     [java] method : org.softlang.company.impl.pojo.CompanyImpl.add(org.softlang.company.Subunit) : org.softlang.company.impl.pojo.CompanyImpl
     [java] 
     [java] 
     [java] 
     [java] Amount of tests to test: 54
     [java] Quantity of method to test: 54
     [java] 
     [java]  INPUT LIMIT: 108
     [java] 
     [java]  INPUT LIMIT: 500
     [java]  Args Size: 8
     [java] policy = sun.security.provider.PolicyFile@55d15445
     [java] PUBLIC MEMBERS=57
     [java] Explorer = randoop.ForwardGenerator@7a148bd3
     [java] Começo!!
     [java] 
     [java] Progress update: test inputs generated=0, failing inputs=0      (Thu Mar 21 15:25:28 BRT 2013)FIM!!!
     [java] 
     [java] Progress update: test inputs generated=500, failing inputs=0      (Thu Mar 21 15:25:31 BRT 2013)
     [java] Normal method executions:12948
     [java] Exceptional method executions:13
     [java] 
     [java] Average method execution time (normal termination):     0.153
     [java] Average method execution time (exceptional termination):0.448
     [java] 
     [java] Creating Junit tests (500 tests)...Writing 500 junit tests
     [java] 
     [java] Created file: /tmp/safeRefactorAJ/tests/source/RandoopTest0.java
     [java] Created file: /tmp/safeRefactorAJ/tests/source/RandoopTest.java

compile_tests:
     [echo] Compiling the tests
    [javac] Compiling 2 source files to /tmp/safeRefactorAJ/tests/bin
    [javac] Note: /tmp/safeRefactorAJ/tests/source/RandoopTest0.java uses unchecked or unsafe operations.
    [javac] Note: Recompile with -Xlint:unchecked for details.

run_tests:
     [echo] Running JUnit to test the "source"
    [junit] Running RandoopTest0
    [junit] Tests run: 500, Failures: 0, Errors: 1, Time elapsed: 0.424 sec
     [echo] Running JUnit to test the "target"
    [junit] Test RandoopTest0 FAILED
    [junit] Running RandoopTest0
    [junit] Tests run: 500, Failures: 109, Errors: 1, Time elapsed: 0.402 sec
    [junit] Test RandoopTest0 FAILED
     [echo] Running JUnit to test the "source" again
    [junit] Running RandoopTest0
    [junit] Tests run: 500, Failures: 0, Errors: 1, Time elapsed: 0.257 sec
    [junit] Test RandoopTest0 FAILED
 Print Report :
Testes generated: 500
Failures on source: 0
Errors on source: 1
Failures on target: 109
Errors on target: 1
Refactoring? false



report changes: null
RandoopTest0.test408 in source is SUCCESS while in target is FAILURE
RandoopTest0.test93 in source is SUCCESS while in target is FAILURE
RandoopTest0.test403 in source is SUCCESS while in target is FAILURE
RandoopTest0.test402 in source is SUCCESS while in target is FAILURE
RandoopTest0.test401 in source is SUCCESS while in target is FAILURE
RandoopTest0.test328 in source is SUCCESS while in target is FAILURE
RandoopTest0.test148 in source is SUCCESS while in target is FAILURE
RandoopTest0.test329 in source is SUCCESS while in target is FAILURE
RandoopTest0.test73 in source is SUCCESS while in target is FAILURE
RandoopTest0.test284 in source is SUCCESS while in target is FAILURE
RandoopTest0.test420 in source is SUCCESS while in target is FAILURE
RandoopTest0.test283 in source is SUCCESS while in target is FAILURE
RandoopTest0.test285 in source is SUCCESS while in target is FAILURE
RandoopTest0.test426 in source is SUCCESS while in target is FAILURE
RandoopTest0.test142 in source is SUCCESS while in target is FAILURE
RandoopTest0.test427 in source is SUCCESS while in target is FAILURE
RandoopTest0.test145 in source is SUCCESS while in target is FAILURE
RandoopTest0.test71 in source is SUCCESS while in target is FAILURE
RandoopTest0.test280 in source is SUCCESS while in target is FAILURE
RandoopTest0.test84 in source is SUCCESS while in target is FAILURE
RandoopTest0.test277 in source is SUCCESS while in target is FAILURE
RandoopTest0.test137 in source is SUCCESS while in target is FAILURE
RandoopTest0.test318 in source is SUCCESS while in target is FAILURE
RandoopTest0.test410 in source is SUCCESS while in target is FAILURE
RandoopTest0.test311 in source is SUCCESS while in target is FAILURE
RandoopTest0.test412 in source is SUCCESS while in target is FAILURE
RandoopTest0.test413 in source is SUCCESS while in target is FAILURE
RandoopTest0.test136 in source is SUCCESS while in target is FAILURE
RandoopTest0.test416 in source is SUCCESS while in target is FAILURE
RandoopTest0.test170 in source is SUCCESS while in target is FAILURE
RandoopTest0.test172 in source is SUCCESS while in target is FAILURE
RandoopTest0.test59 in source is SUCCESS while in target is FAILURE
RandoopTest0.test302 in source is SUCCESS while in target is FAILURE
RandoopTest0.test266 in source is SUCCESS while in target is FAILURE
RandoopTest0.test306 in source is SUCCESS while in target is FAILURE
RandoopTest0.test265 in source is SUCCESS while in target is FAILURE
RandoopTest0.test440 in source is SUCCESS while in target is FAILURE
RandoopTest0.test50 in source is SUCCESS while in target is FAILURE
RandoopTest0.test168 in source is SUCCESS while in target is FAILURE
RandoopTest0.test445 in source is SUCCESS while in target is FAILURE
RandoopTest0.test163 in source is SUCCESS while in target is FAILURE
RandoopTest0.test161 in source is SUCCESS while in target is FAILURE
RandoopTest0.test432 in source is SUCCESS while in target is FAILURE
RandoopTest0.test67 in source is SUCCESS while in target is FAILURE
RandoopTest0.test250 in source is SUCCESS while in target is FAILURE
RandoopTest0.test438 in source is SUCCESS while in target is FAILURE
RandoopTest0.test259 in source is SUCCESS while in target is FAILURE
RandoopTest0.test155 in source is SUCCESS while in target is FAILURE
RandoopTest0.test153 in source is SUCCESS while in target is FAILURE
RandoopTest0.test434 in source is SUCCESS while in target is FAILURE
RandoopTest0.test435 in source is SUCCESS while in target is FAILURE
RandoopTest0.test37 in source is SUCCESS while in target is FAILURE
RandoopTest0.test190 in source is SUCCESS while in target is FAILURE
RandoopTest0.test194 in source is SUCCESS while in target is FAILURE
RandoopTest0.test193 in source is SUCCESS while in target is FAILURE
RandoopTest0.test364 in source is SUCCESS while in target is FAILURE
RandoopTest0.test463 in source is SUCCESS while in target is FAILURE
RandoopTest0.test33 in source is SUCCESS while in target is FAILURE
RandoopTest0.test48 in source is SUCCESS while in target is FAILURE
RandoopTest0.test181 in source is SUCCESS while in target is FAILURE
RandoopTest0.test459 in source is SUCCESS while in target is FAILURE
RandoopTest0.test356 in source is SUCCESS while in target is FAILURE
RandoopTest0.test174 in source is SUCCESS while in target is FAILURE
RandoopTest0.test353 in source is SUCCESS while in target is FAILURE
RandoopTest0.test352 in source is SUCCESS while in target is FAILURE
RandoopTest0.test351 in source is SUCCESS while in target is FAILURE
RandoopTest0.test451 in source is SUCCESS while in target is FAILURE
RandoopTest0.test450 in source is SUCCESS while in target is FAILURE
RandoopTest0.test40 in source is SUCCESS while in target is FAILURE
RandoopTest0.test455 in source is SUCCESS while in target is FAILURE
RandoopTest0.test454 in source is SUCCESS while in target is FAILURE
RandoopTest0.test357 in source is SUCCESS while in target is FAILURE
RandoopTest0.test19 in source is SUCCESS while in target is FAILURE
RandoopTest0.test16 in source is SUCCESS while in target is FAILURE
RandoopTest0.test15 in source is SUCCESS while in target is FAILURE
RandoopTest0.test14 in source is SUCCESS while in target is FAILURE
RandoopTest0.test341 in source is SUCCESS while in target is FAILURE
RandoopTest0.test343 in source is SUCCESS while in target is FAILURE
RandoopTest0.test485 in source is SUCCESS while in target is FAILURE
RandoopTest0.test11 in source is SUCCESS while in target is FAILURE
RandoopTest0.test481 in source is SUCCESS while in target is FAILURE
RandoopTest0.test480 in source is SUCCESS while in target is FAILURE
RandoopTest0.test29 in source is SUCCESS while in target is FAILURE
RandoopTest0.test197 in source is SUCCESS while in target is FAILURE
RandoopTest0.test332 in source is SUCCESS while in target is FAILURE
RandoopTest0.test476 in source is SUCCESS while in target is FAILURE
RandoopTest0.test22 in source is SUCCESS while in target is FAILURE
RandoopTest0.test471 in source is SUCCESS while in target is FAILURE
RandoopTest0.test299 in source is SUCCESS while in target is FAILURE
RandoopTest0.test496 in source is SUCCESS while in target is FAILURE
RandoopTest0.test493 in source is SUCCESS while in target is FAILURE
RandoopTest0.test494 in source is SUCCESS while in target is FAILURE
RandoopTest0.test397 in source is SUCCESS while in target is FAILURE
RandoopTest0.test398 in source is SUCCESS while in target is FAILURE
RandoopTest0.test205 in source is SUCCESS while in target is FAILURE
RandoopTest0.test377 in source is SUCCESS while in target is FAILURE
RandoopTest0.test378 in source is SUCCESS while in target is FAILURE
RandoopTest0.test371 in source is SUCCESS while in target is FAILURE
RandoopTest0.test392 in source is SUCCESS while in target is FAILURE
RandoopTest0.test236 in source is SUCCESS while in target is FAILURE
RandoopTest0.test249 in source is SUCCESS while in target is FAILURE
RandoopTest0.test241 in source is SUCCESS while in target is FAILURE
RandoopTest0.test242 in source is SUCCESS while in target is FAILURE
RandoopTest0.test108 in source is SUCCESS while in target is FAILURE
RandoopTest0.test115 in source is SUCCESS while in target is FAILURE
RandoopTest0.test117 in source is SUCCESS while in target is FAILURE
RandoopTest0.test118 in source is SUCCESS while in target is FAILURE
RandoopTest0.test225 in source is SUCCESS while in target is FAILURE
RandoopTest0.test220 in source is SUCCESS while in target is FAILURE


coverage:
    [mkdir] Created dir: /home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source/outinstr
    [mkdir] Created dir: /home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source/instr
processing instrumentation path ...
instrumentation path processed in 66 ms
[15 class(es) instrumented, 0 resource(s) copied]
metadata merged into [/home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source/instr/metadata_source.emma] {in 57 ms}
    [junit] Running RandoopTest0
    [junit] Tests run: 500, Failures: 0, Errors: 1, Time elapsed: 0.351 sec
    [junit] Test RandoopTest0 FAILED
processing input files ...
1 file(s) read and merged in 1 ms
writing [xml] report to [/home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source/report.xml] ...
writing [html] report to [/home/jefferson/workspace/ferramentaLPSSM/Products/Product0/source/report.html] ...


 -- SafeRefactor FOUND behavioral changes -- 

 Safe Refactor Tests' directory:< /tmp/safeRefactor/tests >
###########################false
Asset mapping verificado em: 11 segundos.

Sorry to inform you that Asset Mapping was not refined.

The Software Product Line is NOT a refinement.


	 SPL REPORT: 

-> Source Product Line is Well Formed:?  true
-> Target Product Line is Well Formed:?  true
-> Asset Mappings are Equals :?false
-> Are Configuration Knowledge and Feature Model a refinement:?  true
-> The evolution has a compatible observable behavior:?  false
-> My Whole Software Product Line is Well Formed:?  true
-> My Whole Software Product Line is a Refinement:?  false



